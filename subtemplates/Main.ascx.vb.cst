<%-- 
Name: Main.ascx.vb.cst
Author: Keith Stone
Description: Template for DotNetNuke VB.Net Mainline ASCX Code Behind
Revision: 2014.04.27
Note: For the latest version of this template, http://www.crewstone.com		
--%>

<%@ CodeTemplate Language="C#" Src="DNNMaster.CodeBehind.cs" Inherits="_Main" TargetLanguage="VB.NET" Description="Generates the code-behind for the Settings.ascx web control." %>
<%@ Property Category="DataSource" Name="MultiSourceTable" Type="SchemaExplorer.TableSchemaCollection" Description="Table that the object is based on." %>
<%@ Property Category="DataSource" Name="ObjectQualifier" Type="System.String" Default="" Optional="True" Description="Prefix for objects to be generated." %>
<%@ Property Category="Naming Convention" Name="Namespace" Type="System.String" Default="NameSpace" Description="Used to generate the Namespace declaration." %>
<%@ Property Category="Naming Convention" Name="CompanyName" Type="System.String" Default="YourCompany" Description="Used to generate the copyright declaration." %>
<%@ Property Category="Naming Convention" Name="ModuleName" Type="System.String" Default="" Description="" %>
<%@ Property Category="Naming Convention" Name="FriendlyName" Type="System.String" Default="Your Module" Description="Descriptive module name" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
Option Strict On
Option Explicit On
'
' Module: <%=FriendlyName%>
' Copyright (c) <%= DateTime.Now.Year.ToString() %> <%=CompanyName%>
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
'
Imports DotNetNuke
Imports DotNetNuke.Entities.Modules.Actions
Imports DotNetNuke.Entities.Modules
Imports DotNetNuke.Services.Exceptions
Imports DotNetNuke.Services.Localization
Imports DotNetNuke.Security
Imports DotNetNuke.Security.PortalSecurity
Imports DotNetNuke.Security.Permissions
Imports System.Web.UI
Imports System.Collections.Generic
Imports System.Reflection


Namespace <%= Namespace %>.Modules.<%= ModuleName %>

    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' This class manages the mainline operation of the module
    ''' </summary>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
 	''' Generated by CodeSmith on <%= DateTime.Now.ToLongDateString() %>
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Class <%= ModuleName %>Menu
        Inherits <%=ModuleName%>ModuleBase
	 	Implements DotNetNuke.Entities.Modules.IActionable
   
		
		Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
            'If ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit, "EDIT", ModInfo) Then
               ' AddItemButton.Enabled = True
            'Else
               ' AddItemButton.Enabled = False
            'End If
			
			<% foreach(SchemaExplorer.TableSchema SourceTable in MultiSourceTable)
				{ %>
            hyp<%= GetTableName(SourceTable) %>.Text = Localization.GetString("MenuList<%= GetTableName(SourceTable) %>", LocalResourceFile)
            hyp<%= GetTableName(SourceTable) %>.NavigateUrl = DotNetNuke.Common.NavigateURL(TabId, "List<%= GetTableName(SourceTable) %>", "mid=" & ModuleId)
                   
			<% } %>
        End Sub
		
#Region "Base Method Implementations"

#End Region

#Region "Optional Interfaces"
        Public ReadOnly Property ModuleActions() As ModuleActionCollection Implements IActionable.ModuleActions
            Get
                Dim Actions As New ModuleActionCollection
				<% foreach(SchemaExplorer.TableSchema SourceTable in MultiSourceTable)
					{ %>
                    
					' Add Edit<%= GetTableName(SourceTable) %>
                    If ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit, "EDIT", ModInfo) Then
                        Actions.Add(GetNextActionID, Localization.GetString("MenuEdit<%= GetTableName(SourceTable) %>", LocalResourceFile), ModuleActionType.AddContent, "", "", EditUrl("Edit<%= GetTableName(SourceTable) %>"), False, Security.SecurityAccessLevel.Edit, True, False)
                    End If
					<% } %>

                Return Actions
            End Get
        End Property
#End Region
    End Class

End Namespace
