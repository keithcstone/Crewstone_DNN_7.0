<%-- 
Name: DataProvider.cs.cst
Author: Keith Stone
Description: Template for DotNetNuke C# Data Provider
Revision: 2014.05.18  
Note: For the latest version of this template, http://www.crewstone.com		
--%>
<%@ CodeTemplate Language="C#" Src="DNNMaster.CodeBehind.cs" Inherits="_Main" TargetLanguage="C#" Description="Generates the DAL DataProvider class." %>
<%@ Property Category="Naming Convention" Name="Namespace" Type="System.String" Default="Namespace" Description="Used to generate the Namespace declaration." %>
<%@ Property Category="Naming Convention" Name="ModuleName" Type="System.String" Default="" Description="" %>
<%@ Property Category="Naming Convention" Name="CompanyName" Type="System.String" Default="MyCompany" Description="Used to generate the copyright declaration." %>
<%@ Property Category="Naming Convention" Name="FriendlyName" Type="System.String" Default="Your Module" Description="Descriptive module name" %>
<%@ Property Category="Options" Name="ListByPortalID" Type="System.Boolean" Default="False" Description="If true items will be selected using PortalID otherwise ModuleID will be used." %>

<%@ Property Category="DataSource" Name="MultiSourceTable" Type="SchemaExplorer.TableSchemaCollection" Description="Table that the object is based on." %>
<%@ Property Category="DataSource" Name="ObjectQualifier" Type="System.String" Default="" Optional="True" Description="Suffix for objects to be generated." %>
<%@ Property Category="Options" Name="IncludeInsert" Type="System.Boolean" Default="True" Description="If true insert statements will be generated." %>
<%@ Property Category="Options" Name="IncludeUpdate" Type="System.Boolean" Default="True" Description="If true update statements will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete statements will be generated." %>
<%@ Property Name="IncludeGet" Type="System.Boolean" Default="True" Category="Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist statements will be generated." %>
<%@ Property Name="IncludeForeignKeyProcs" Type="System.Boolean" Default="True" Category="Options" Description="If true get statements will be generated for every foreign key in the table." %>
<%@ Property Name="IncludePaging" Type="System.Boolean" Default="True" Category="Options" Description="If true paging/sorting statements will be generated." %>
<%@ Property Name="PagingKeyword" Type="System.String" Default="GetPage" Category="Style" Description="Suffix to use for all generated PAGING/SORTING stored procedures." %>
<%@ Property Name="InsertKeyword" Type="System.String" Default="Add" Category="Style" Description="Suffix to use for all generated INSERT stored procedures." %>
<%@ Property Name="UpdateKeyword" Type="System.String" Default="Update" Category="Style" Description="Suffix to use for all generated UPDATE stored procedures." %>
<%@ Property Name="DeleteKeyword" Type="System.String" Default="Delete" Category="Style" Description="Suffix to use for all generated DELETE stored procedures." %>
<%@ Property Name="SelectKeyword" Type="System.String" Default="Get" Category="Style" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="ListKeyword" Type="System.String" Default="List" Category="Style" Description="Suffix to use for all generated SELECT stored procedures." %>


<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
/*
' Module: <%=FriendlyName%>
' Copyright (c) <%= DateTime.Now.Year.ToString() %> <%=CompanyName%>
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
' 
*/
using System;
using System.Data;
using DotNetNuke.Framework;

namespace <%=Namespace%>.Modules.<%=ModuleName%>.Data
{    
    /// ----------------------------------------------------------------------------- 
    /// <summary> 
    /// Abstract DataProvider class 
    /// </summary> 
    /// <remarks> 
    /// </remarks> 
    /// <history> 
    /// Generated by CodeSmith on <%= DateTime.Now.ToLongDateString() %>
    /// </history> 
    /// ----------------------------------------------------------------------------- 
    public abstract class DataProvider
    {
#region common methods

        /// <summary>
        /// var that is returned in the this singleton
        /// pattern
        /// </summary>
        private static DataProvider instance = null;

        /// <summary>
        /// private static cstor that is used to init an
        /// instance of this class as a singleton
        /// </summary>
        static DataProvider()
        {
            instance = (DataProvider)Reflection.CreateObject("data", "<%=Namespace%>.Modules.<%=ModuleName%>.Providers", "");
        }

        /// <summary>
        /// Exposes the singleton object used to access the database with
        /// the conrete dataprovider
        /// </summary>
        /// <returns></returns>
        public static DataProvider Instance()
        {
            return instance;
        }
#endregion

<% 
foreach(SchemaExplorer.TableSchema SourceTable in MultiSourceTable) {%> 
#region <%= GetTableName(SourceTable) %> Abstract Methods
	<% if (IncludeGet) { %>
	// Get a single <%= GetTableName(SourceTable) %> item by primary key
	public abstract IDataReader <%= GetMethodName(GetTableName(SourceTable), SelectKeyword) %>(<%= GetPrimaryKeyParameters(SourceTable, true,"cs").Trim() %>);
    
    <% } %>
	<% if (IncludeList) { %> <%-- List items --%>
	// Get a all <%= GetTableName(SourceTable) %> items
	public abstract IDataReader <%= GetMethodName(GetTableName(SourceTable), ListKeyword) %>(<% if (ListByPortalID && SourceTable.Columns.Contains("portalId")) {%>int portalId<% } %><% if (!ListByPortalID && SourceTable.Columns.Contains("moduleId")) {%>int moduleid<% } %>);
    
    <% } %>
	<% if (IncludeForeignKeyProcs) { %> <%-- Select for each Foreign Key --%>
		<% for (int K = 0; K < SourceTable.ForeignKeys.Count; K++) { %>
			<% TableKeySchema fk = SourceTable.ForeignKeys[K]; %>
	// Get all <%= GetTableName(SourceTable) %> by foreign key
	public abstract IDataReader <%= GetMethodName(GetTableName(SourceTable), SelectKeyword) %>By<%= GetTableName(fk.PrimaryKeyTable) %>(<%= GetPrimaryKeyParameters(fk.PrimaryKeyTable, true,"cs")%>);
        <% } %>
    <% } %>
	<% if (IncludeInsert) { %> <%-- Insert Item --%>
	// Insert a single <%= GetTableName(SourceTable) %> item
	public abstract void <%= GetMethodName(GetTableName(SourceTable), InsertKeyword) %>(<%= GetNonPrimaryKeyParameters(SourceTable, true, false, true, "cs").Trim() %>);
    
    <% } %>
	<% if (IncludeUpdate) { %> <%-- Update Item --%>
	// Update a single <%= GetTableName(SourceTable) %> item by primary key
	public abstract void <%= GetMethodName(GetTableName(SourceTable), UpdateKeyword) %>(<%= GetPrimaryKeyParameters(SourceTable, true, "cs").Trim() %>, <%= GetNonPrimaryKeyParameters(SourceTable, true, false, true, "cs").Trim() %>);
    
    <% } %>
	<% if (IncludeDelete) { %> <%-- Delete Item --%>
	// Delete a single <%= GetTableName(SourceTable) %> item by primary key
	public abstract void <%= GetMethodName(GetTableName(SourceTable), DeleteKeyword) %>(<%= GetPrimaryKeyParameters(SourceTable, true, "cs").Trim() %>);
    
    <% } %>
	<% if (IncludePaging) { %> <%-- Use Paging --%>
	//public abstract IDataReader <%= PagingKeyword %><%= GetTableName(SourceTable) %>(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
    <% } %>
#endregion
<% } %> 
	}
}
