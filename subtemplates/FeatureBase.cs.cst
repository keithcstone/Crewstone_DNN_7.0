<%-- 
Name: ModuleBase.cs.cst
Author: Keith Stone
Description: Generates the DNN Feature Base Class for C#.Net
Revision: 2014.04.12
Note: For the latest version of this template, http://www.crewstone.com		
--%>

<%@ CodeTemplate Language="C#" Src="DNNMaster.CodeBehind.cs" Inherits="_Main" TargetLanguage="C#" Description="Generates the DNN Module Info class." Debug="True" %>
<%@ Property Category="DataSource" Name="MultiSourceTable" Type="SchemaExplorer.TableSchemaCollection" Description="Table that the object is based on." %>
<%@ Property Category="DataSource" Name="ObjectQualifier" Type="System.String" Default="" Optional="True" Description="Prefix for objects to be generated." %>
<%@ Property Category="Naming Convention" Name="CompanyName" Type="System.String" Default="YourCompany" Description="Used to generate the Namespace declaration." %>
<%@ Property Category="Naming Convention" Name="ModuleName" Type="System.String" Default="YourModule" Description="" %>
<%@ Property Category="Naming Convention" Name="Namespace" Type="System.String" Default="NameSpace"  Description="Used to generate the Namespace declaration." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
/*
' Copyright (c) <%= DateTime.Now.Year.ToString() %> <%=CompanyName%>
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
' 
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using <%= Namespace %>.Modules.<%=ModuleName%>.Entities

namespace <%= Namespace %>.Modules.<%=ModuleName%>.Components
{
    /* <summary>
    ' The feature base class for <%= ModuleName %>
    ' </summary>
    ' <remarks>
    ' This class contains all the collections used for import and export processing
    ' </remarks>
    ' <history>
	' Generated by CodeSmith on <%= DateTime.Now.ToLongDateString() %>
    ' </history>
    ' ----------------------------------------------------------------------------- 
    */
    [Serializable(), XmlRoot("<%= ModuleName %>")] _
	public class <%= ModuleName %>FeatureBase
    {

#Region "Private Members"
<% foreach(SchemaExplorer.TableSchema SourceTable in MultiSourceTable) { %>
        private Generic.List<<%= GetClassNameInfo(SourceTable) %>> _<%=GetTableName(SourceTable)%>>;
<% } %>
#End Region

#Region "Constructors"
		public %= ModuleName %>()
		{
		}
		
#End Region

#Region "Public Properties"
<% foreach(SchemaExplorer.TableSchema SourceTable in MultiSourceTable) { %>
		// <summary>
		// Gets and sets the <%= GetTableName(SourceTable) %>
		<% if (SourceTable.Description.Length > 0) { %>
		// <%= SourceTable.Description %>
		<% } %>
        // </summary>
		[XmlElement("<%=GetTableName(SourceTable)%>s")]
		public Generic.List<<%= GetClassNameInfo(SourceTable) %>> <%=GetTableName(SourceTable)%>s {
			get { return <%=GetTableName(SourceTable)%>s; }
			set { _<%=GetTableName(SourceTable)%>s = value; }
		}
		<% } %>
#End Region

    }

}

