<%-- 
Name: EditModule.ascx.vb.cst
Author: Keith Stone
Description: Generates the DotNetNuke Edit[ModuleName].vb.ascx for VB
Revision: 2014.05.18
Note: For the latest version of this template, http://www.crewstone.com		
--%>
<%@ CodeTemplate Language="C#" Src="DNNMaster.CodeBehind.cs" Inherits="_Main" TargetLanguage="VB" Description="Generates the code-behind for the Edit[ModuleName].ascx web control." %>
<%@ Property Category="DataSource" Name="SourceTable" Type="SchemaExplorer.TableSchema" Description="Table that the object is based on." %>
<%@ Property Category="DataSource" Name="ObjectQualifier" Type="System.String" Default="" Optional="True" Description="Prefix for objects to be generated." %>
<%@ Property Category="Naming Convention" Name="CompanyName" Type="System.String" Default="YourCompany" Description="Used to generate the copyright declaration." %>
<%@ Property Category="Naming Convention" Name="Namespace" Type="System.String" Default="NameSpace" Description="Used to generate the Namespace declaration." %>
<%@ Property Category="Naming Convention" Name="ModuleName" Type="System.String" Default="YourModule" Description="" %>
<%@ Property Category="Naming Convention" Name="FriendlyName" Type="System.String" Default="Your Module" Description="Descriptive module name" %>
<%@ Property Category="Auditing" Name="DateCreated" Type="System.String" Default="" Optional="True" Description="The name of the field that designates the date/time a row was created" %>
<%@ Property Category="Auditing" Name="CreatedBy" Type="System.String" Default="" Optional="True" Description="The name of the field that designates the DNN userid that created a row" %>
<%@ Property Category="Auditing" Name="DateUpdated" Type="System.String" Default="" Optional="True" Description="The name of the field that designates the date/time a row was updated" %>
<%@ Property Category="Auditing" Name="UpdatedBy" Type="System.String" Default="" Optional="True" Description="The name of the field that designates the DNN userid that updated a row" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
Option Strict On
Option Explicit On
'
' Module: <%=FriendlyName%>
' Copyright (c) <%= DateTime.Now.Year.ToString() %> <%=CompanyName%>
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
'
Imports DotNetNuke
Imports DotNetNuke.Entities.Modules.Actions
Imports DotNetNuke.Entities.Modules
Imports DotNetNuke.Services.Exceptions
Imports DotNetNuke.Services.Localization
Imports DotNetNuke.Security
Imports DotNetNuke.Security.Permissions
Imports System.Web.UI
Imports System.Collections.Generic
Imports System.Reflection

Namespace <%=Namespace%>.Modules.<%=ModuleName%>

    Partial Class Edit<%=GetTableName(SourceTable)%>
        Inherits <%=ModuleName%>ModuleBase
        Implements IActionable

        Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
            If ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit, "EDIT", ModInfo) Then
                Add<%=GetTableName(SourceTable)%>ItemButton.Enabled = True
            Else
                Add<%=GetTableName(SourceTable)%>ItemButton.Enabled = False
            End If
        End Sub

        Protected Sub Set<%=GetTableName(SourceTable)%>PortalId(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs) Handles <%=GetTableName(SourceTable)%>DataSource.Selecting
            <% if(SourceTable.PrimaryKey.MemberColumns.Contains("portalId")) { %>
			e.InputParameters("PortalId") = DotNetNuke.Entities.Portals.PortalController.GetCurrentPortalSettings().PortalId.ToString
			<% } %>
		 	<% if(SourceTable.PrimaryKey.MemberColumns.Contains("moduleId")) { %>
			e.InputParameters("ModuleId") = ModuleId.ToString
			<% } %>       
		End Sub

        Protected Sub Inserting<%=GetTableName(SourceTable)%>Item(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.FormViewInsertEventArgs) Handles Form<%=GetTableName(SourceTable)%>.ItemInserting
            <% if(SourceTable.Columns.Contains("portalId")) { %>
			e.Values.Item("PortalId") = DotNetNuke.Entities.Portals.PortalController.GetCurrentPortalSettings().PortalId.ToString()
			<% } %>
			<% if(SourceTable.Columns.Contains("moduleId")) { %>
			e.Values.Item("ModuleId") = ModuleId.ToString()
			<% } %>
			<% if(SourceTable.Columns.Contains(CreatedBy)) { %>
			e.Values.Item("<%=CreatedBy%>") = UserInfo.UserID
			<% } %>
			<% if(SourceTable.Columns.Contains(DateCreated)) { %>
			e.Values.Item("<%=DateCreated%>") = Date.Now
			<% } %>
			<% if(SourceTable.Columns.Contains(UpdatedBy)) { %>
			e.Values.Item("<%=UpdatedBy%>") = UserInfo.UserID
			<% } %>
			<% if(SourceTable.Columns.Contains(DateUpdated)) { %>
			e.Values.Item("<%=DateUpdated%>") = Date.Now
			<% } %>
        End Sub

        Protected Sub Add<%=GetTableName(SourceTable)%>ItemButton_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles Add<%=GetTableName(SourceTable)%>ItemButton.Click
            Me.Form<%=GetTableName(SourceTable)%>.Visible = True
        End Sub

        Protected Sub Insert<%=GetTableName(SourceTable)%>ItemButton_Click(ByVal sender As Object, ByVal e As System.EventArgs)
            Me.Form<%=GetTableName(SourceTable)%>.Visible = False
            Add<%=GetTableName(SourceTable)%>ItemButton.Text = "<%=GetTableName(SourceTable)%> Successfully Added - Click To Add Another"
        End Sub

        Protected Sub Insert<%=GetTableName(SourceTable)%>CancelButton_Click(ByVal sender As Object, ByVal e As System.EventArgs)
            Me.Form<%=GetTableName(SourceTable)%>.Visible = False
        End Sub

        Protected Sub Grid<%=GetTableName(SourceTable)%>_PageIndexChanging(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewPageEventArgs) Handles Grid<%=GetTableName(SourceTable)%>.PageIndexChanging
            Grid<%=GetTableName(SourceTable)%>.PageIndex = e.NewPageIndex
        End Sub
		
		Protected Sub Grid<%=GetTableName(SourceTable)%>_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles Grid<%=GetTableName(SourceTable)%>.RowDataBound

        End Sub
		
		Protected Sub Grid<%=GetTableName(SourceTable)%>_RowUpdating(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewUpdateEventArgs) Handles Grid<%=GetTableName(SourceTable)%>.RowUpdating
            <% if(SourceTable.Columns.Contains("portalId")) { %>
			e.NewValues.Item("PortalId") = DotNetNuke.Entities.Portals.PortalController.GetCurrentPortalSettings().PortalId.ToString()
			<% } %>
			<% if(SourceTable.Columns.Contains("moduleId")) { %>
			e.NewValues.Item("ModuleId") = ModuleId.ToString()
			<% } %>
			<% if(SourceTable.Columns.Contains(CreatedBy)) { %>
			e.NewValues.Item("<%=CreatedBy%>") = e.OldValues.Item("<%=CreatedBy%>")
			<% } %>
			<% if(SourceTable.Columns.Contains(DateCreated)) { %>
			e.NewValues.Item("<%=DateCreated%>") = e.OldValues.Item("<%=DateCreated%>")
			<% } %>
			<% if(SourceTable.Columns.Contains(UpdatedBy)) { %>
			e.NewValues.Item("<%=UpdatedBy%>") = UserInfo.UserID
			<% } %>
			<% if(SourceTable.Columns.Contains(DateUpdated)) { %>
			e.NewValues.Item("<%=DateUpdated%>") = Date.Now
			<% } %>
        End Sub
		
		#Region "Optional Interfaces"
        Public ReadOnly Property ModuleActions() As ModuleActionCollection Implements IActionable.ModuleActions
            Get
                Dim Actions As New ModuleActionCollection
                Try
                Catch exc As Exception
                    ProcessModuleLoadException(Me, exc)
                End Try
                Return Actions
            End Get
        End Property
		#End Region
		
    End Class

End Namespace
