<%-- 
Name: ViewModule.ascx.vb.cst
Author: Keith Stone
Description: Generates the DotNetNuke View[ModuleName].vb.ascx for VB
Revision: 2014.04.25
Note: For the latest version of this template, http://www.crewstone.com		
--%>
<%@ CodeTemplate Language="C#" Src="DNNMaster.CodeBehind.cs" Inherits="_Main" TargetLanguage="VB" Description="Generates the code-behind for the View[ModuleName].ascx web control." %>
<%@ Property Category="Auditing" Name="DateCreated" Type="System.String" Default="" Optional="True" Description="The name of the field that designates the date/time a row was created" %>
<%@ Property Category="Auditing" Name="CreatedBy" Type="System.String" Default="" Optional="True" Description="The name of the field that designates the DNN userid that created a row" %>
<%@ Property Category="Auditing" Name="DateUpdated" Type="System.String" Default="" Optional="True" Description="The name of the field that designates the date/time a row was updated" %>
<%@ Property Category="Auditing" Name="UpdatedBy" Type="System.String" Default="" Optional="True" Description="The name of the field that designates the DNN userid that updated a row" %>
<%@ Property Category="DataSource" Name="SourceTable" Type="SchemaExplorer.TableSchema" Description="Table that the object is based on." %>
<%@ Property Category="DataSource" Name="ObjectQualifier" Type="System.String" Default="" Optional="True" Description="Prefix for objects to be generated." %>
<%@ Property Category="Naming Convention" Name="CompanyName" Type="System.String" Default="YourCompany" Description="Used to generate the Namespace declaration." %>
<%@ Property Category="Naming Convention" Name="ModuleName" Type="System.String" Default="YourModule" Description="" %>
<%@ Property Category="Naming Convention" Name="Namespace" Type="System.String" Default="NameSpace" Description="Used to generate the Namespace declaration." %>
<%@ Property Category="Naming Convention" Name="FriendlyName" Type="System.String" Default="Your Module" Description="Descriptive module name" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
Option Strict On
Option Explicit On
'
' Module: <%=FriendlyName%>
' Copyright (c) <%= DateTime.Now.Year.ToString() %> <%=CompanyName%>
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
'
Imports DotNetNuke
Imports DotNetNuke.Common
Imports DotNetNuke.Entities.Modules.Actions
Imports DotNetNuke.Entities.Modules
Imports DotNetNuke.Services.Exceptions
Imports DotNetNuke.Services.Localization
Imports DotNetNuke.Security
Imports DotNetNuke.Security.Permissions
Imports System.Web.UI
Imports System.Collections.Generic
Imports System.Reflection

Namespace <%= Namespace %>.Modules.<%=ModuleName%>

    Partial Class View<%=GetTableName(SourceTable)%>
        Inherits <%=ModuleName%>ModuleBase
        Implements IActionable
        
#Region " Web Form Designer Generated Code "
        'This call is required by the Web Form Designer.
        <DebuggerStepThrough()> Private Sub InitializeComponent()
        End Sub

        Private Sub Page_Init(ByVal sender As System.Object, ByVal e As EventArgs) Handles MyBase.Init
            'CODEGEN: This method call is required by the Web Form Designer
            'Do not modify it using the code editor.
            InitializeComponent()
        End Sub
#End Region

        Private Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
		
			<% foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) { %>
		    ' Determine <%=column.Name%> to display
            If Not (Request.QueryString("<%=column.Name%>") Is Nothing) Then
            	_<%= GetParseStatement(column,"vb") %>
        	End If
			<% } %>

            If ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit, "EDIT", ModInfo) Then
                Add<%=GetTableName(SourceTable)%>ItemButton.Enabled = True
                                
                 If Not (Request.QueryString("Mode") Is Nothing) Then
                    If Request.QueryString("Mode").ToString = "Insert" Then
                        Me.Form<%=GetTableName(SourceTable)%>.ChangeMode(FormViewMode.Insert)
                        Me.Add<%=GetTableName(SourceTable)%>ItemButton.Visible = False
                    End If
					
                    If Request.QueryString("Mode").ToString = "Update" Then
                        Me.Form<%=GetTableName(SourceTable)%>.ChangeMode(FormViewMode.Edit)
                        Me.Add<%=GetTableName(SourceTable)%>ItemButton.Visible = False
                    End If
                End If
           	Else
                Add<%=GetTableName(SourceTable)%>ItemButton.Enabled = False
            End If
        End Sub

#Region "Private Members"

		<% foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) { %>
		<%= GetMemberVariableDeclarationStatement(column, "vb") %>
		<% } %>

#End Region



        Protected Sub Set<%=GetTableName(SourceTable)%>PortalId(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs) Handles <%=GetTableName(SourceTable)%>DataSource.Selecting
            <% if(SourceTable.PrimaryKey.MemberColumns.Contains("portalId")) { %>
			e.InputParameters("PortalId") = DotNetNuke.Entities.Portals.PortalController.GetCurrentPortalSettings().PortalId.ToString
			<% } %>
		 	<% if(SourceTable.PrimaryKey.MemberColumns.Contains("moduleId")) { %>
			e.InputParameters("ModuleId") = ModuleId.ToString
			<% } %>
        End Sub

        Protected Sub Form<%=GetTableName(SourceTable)%>_ItemInserting(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.FormViewInsertEventArgs) Handles Form<%=GetTableName(SourceTable)%>.ItemInserting
            <% if(SourceTable.Columns.Contains("portalId")) { %>
			e.Values.Item("PortalId") = DotNetNuke.Entities.Portals.PortalController.GetCurrentPortalSettings().PortalId.ToString()
			<% } %>
			<% if(SourceTable.Columns.Contains("moduleId")) { %>
			e.Values.Item("ModuleId") = ModuleId.ToString()
			<% } %>
			<% if(SourceTable.Columns.Contains(CreatedBy)) { %>
			e.Values.Item("<%=CreatedBy%>") = UserInfo.UserID
			<% } %>
			<% if(SourceTable.Columns.Contains(DateCreated)) { %>
			e.Values.Item("<%=DateCreated%>") = Date.Now
			<% } %>
			<% if(SourceTable.Columns.Contains(UpdatedBy)) { %>
			e.Values.Item("<%=UpdatedBy%>") = UserInfo.UserID
			<% } %>
			<% if(SourceTable.Columns.Contains(DateUpdated)) { %>
			e.Values.Item("<%=DateUpdated%>") = Date.Now
			<% } %>
        End Sub

        Protected Sub Form<%=GetTableName(SourceTable)%>_ItemInserted(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.FormViewInsertedEventArgs) Handles Form<%=GetTableName(SourceTable)%>.ItemInserted
            Me.Form<%=GetTableName(SourceTable)%>.ChangeMode(FormViewMode.ReadOnly)
            lblStatus.Text = Localization.GetString("InsertSuccess", LocalResourceFile)
            Me.Add<%=GetTableName(SourceTable)%>ItemButton.Visible = True
         End Sub

        Protected Sub Form<%=GetTableName(SourceTable)%>_ItemUpdating(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.FormViewUpdateEventArgs) Handles Form<%=GetTableName(SourceTable)%>.ItemUpdating
            <% if(SourceTable.Columns.Contains("portalId")) { %>
			e.NewValues.Item("PortalId") = DotNetNuke.Entities.Portals.PortalController.GetCurrentPortalSettings().PortalId.ToString()
			<% } %>
			<% if(SourceTable.Columns.Contains("moduleId")) { %>
			e.NewValues.Item("ModuleId") = ModuleId.ToString()
			<% } %>
			<% if(SourceTable.Columns.Contains(CreatedBy)) { %>
			e.NewValues.Item("<%=CreatedBy%>") = e.OldValues.Item("<%=CreatedBy%>")
			<% } %>
			<% if(SourceTable.Columns.Contains(DateCreated)) { %>
			e.NewValues.Item("<%=DateCreated%>") = e.OldValues.Item("<%=DateCreated%>")
			<% } %>
			<% if(SourceTable.Columns.Contains(UpdatedBy)) { %>
			e.NewValues.Item("<%=UpdatedBy%>") = UserInfo.UserID
			<% } %>
			<% if(SourceTable.Columns.Contains(DateUpdated)) { %>
			e.NewValues.Item("<%=DateUpdated%>") = Date.Now
			<% } %>
        End Sub

        Protected Sub Form<%=GetTableName(SourceTable)%>_ItemUpdated(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.FormViewUpdatedEventArgs) Handles Form<%=GetTableName(SourceTable)%>.ItemUpdated
            Me.Form<%=GetTableName(SourceTable)%>.ChangeMode(FormViewMode.ReadOnly)
            lblStatus.Text = Localization.GetString("UpdateSuccess", LocalResourceFile)
            Me.Add<%=GetTableName(SourceTable)%>ItemButton.Visible = True
        End Sub

        Protected Sub Add<%=GetTableName(SourceTable)%>ItemButton_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles Add<%=GetTableName(SourceTable)%>ItemButton.Click
            Me.Form<%=GetTableName(SourceTable)%>.ChangeMode(FormViewMode.Insert)
            Me.Add<%=GetTableName(SourceTable)%>ItemButton.Visible = False
        End Sub

        Protected Sub Insert<%=GetTableName(SourceTable)%>ItemButton_Click(ByVal sender As Object, ByVal e As System.EventArgs)
            lblStatus.Text = Localization.GetString("CompleteSave", LocalResourceFile)
            Me.Add<%=GetTableName(SourceTable)%>ItemButton.Visible = False
        End Sub

        Protected Sub Insert<%=GetTableName(SourceTable)%>CancelButton_Click(ByVal sender As Object, ByVal e As System.EventArgs)
            Me.Form<%=GetTableName(SourceTable)%>.ChangeMode(FormViewMode.ReadOnly)
            lblStatus.Text = Localization.GetString("InsertCancel", LocalResourceFile)
            Me.Add<%=GetTableName(SourceTable)%>ItemButton.Visible = True
        End Sub

		Protected Sub Update<%=GetTableName(SourceTable)%>ItemButton_Click(ByVal sender As Object, ByVal e As System.EventArgs)

        End Sub

        Protected Sub Edit<%=GetTableName(SourceTable)%>ItemButton_Click(ByVal sender As Object, ByVal e As System.EventArgs)
            Me.Form<%=GetTableName(SourceTable)%>.ChangeMode(FormViewMode.Edit)
            lblStatus.Text = Localization.GetString("CompleteSave", LocalResourceFile)
            Me.Add<%=GetTableName(SourceTable)%>ItemButton.Visible = True
        End Sub

        Protected Sub Update<%=GetTableName(SourceTable)%>CancelButton_Click(ByVal sender As Object, ByVal e As System.EventArgs)
            Me.Form<%=GetTableName(SourceTable)%>.ChangeMode(FormViewMode.ReadOnly)
            lblStatus.Text = Localization.GetString("UpdateCancel", LocalResourceFile)
        End Sub

        Protected Sub btnSearch_Click(ByVal sender As Object, ByVal e As System.Web.UI.ImageClickEventArgs) Handles btnSearch.Click

        End Sub

		#Region "Optional Interfaces"
        Public ReadOnly Property ModuleActions() As ModuleActionCollection Implements IActionable.ModuleActions
            Get
                Dim Actions As New ModuleActionCollection
                Try
                Catch exc As Exception
                    ProcessModuleLoadException(Me, exc)
                End Try
                Return Actions
            End Get
        End Property
		#End Region
		
    End Class

End Namespace
