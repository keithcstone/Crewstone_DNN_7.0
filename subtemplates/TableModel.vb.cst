<%-- 
Name: TableModel.vb.cst
Author: Keith Stone
Description: Generates the DNN Table Model Class for VB
Revision: 2014.03.11
Note: For the latest version of this template, http://www.crewstone.com		
--%>
<%@ CodeTemplate Language="C#" Src="DNNMaster.CodeBehind.cs" Inherits="_Main" TargetLanguage="VB" Description="Generates the DNN Table Model Interface Class for VB" %>
<%@ Property Category="DataSource" Name="SourceTable" Type="SchemaExplorer.TableSchema" Description="Table that the object is based on." %>
<%@ Property Category="DataSource" Name="ObjectQualifier" Type="System.String" Default="" Optional="True" Description="Prefix for objects to be generated." %>
<%@ Property Category="DataSource" Name="DataModel" Type="System.String" Default="DAL" Optional="True" Description="Generate for DAL or DAL2 data model." %>
<%@ Property Category="Naming Convention" Name="Namespace" Type="System.String" Default="NameSpace" Description="Used to generate the Namespace declaration." %>
<%@ Property Category="Naming Convention" Name="CompanyName" Type="System.String" Default="YourCompany" Description="Used to generate the copyright declaration." %>
<%@ Property Category="Naming Convention" Name="ModuleName" Type="System.String" Default="" Description="" %>
<%@ Property Category="Naming Convention" Name="FriendlyName" Type="System.String" Default="Your Module" Description="Descriptive module name" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
'
' Module: <%=FriendlyName%>
' Copyright (c) <%= DateTime.Now.Year.ToString() %> <%=CompanyName%>
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
'
Imports System
Imports System.Collections.Generic
Imports System.Linq
Imports System.Text
Imports System.Xml.Serialization
Imports DotNetNuke.Common.Utilities
Imports DotNetNuke.Entities.Modules

Namespace <%= Namespace %>.Modules.<%=ModuleName%>.Entities

<% if(DataModel.ToUpper().Equals("DAL2")) {%>
    'setup the primary key for <%=GetTableName(SourceTable)%>
	'configure caching using PetaPoco
	<% if(SourceTable.Columns.Contains("moduleId")) {%>
    'scope the objects to the ModuleId of a module on a page (or copy of a module on a page)
    <%  } else if (SourceTable.Columns.Contains("portalId")) { %>
    'scope the objects to the PortalId
    <% } %>	

	<TableName("<%=ModuleName%>_<%=GetTableName(SourceTable)%>")> _
	<%=GetPrimaryKeyDecoration(SourceTable,"vb")%>
	<Cacheable("<%=ModuleName%>_<%=GetTableName(SourceTable)%>_Items_", CacheItemPriority.[Default], 20)> _ 
    <% if(SourceTable.Columns.Contains("moduleId")) {%>
    <Scope("ModuleId")> _
    <%  } else if (SourceTable.Columns.Contains("portalId")) { %>
    <Scope("PortalId")> _
    <% } %>	
    Public Class <%=GetTableName(SourceTable)%>
        Implements I<%=GetTableName(SourceTable)%>Model
        
        <% foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) { %>
		<%= GetTypedModelDeclaration( column,"vb") %>
		<% } %>
		<% foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) { %>
		<%= GetTypedModelDeclaration( column,"vb") %>
		<% } %> 
<% } %>
<% if(DataModel.ToUpper().Equals("DAL") ) {%>
   ''' <summary>
    ''' The Info class for <%= GetTableName(SourceTable) %>
    ''' </summary>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
	  ''' Generated by CodeSmith on <%= DateTime.Now.ToLongDateString() %>
    ''' </history>
    ''' -----------------------------------------------------------------------------
    <Serializable(), XmlRoot("<%= GetTableName(SourceTable) %>")> _
	Public Class <%= GetClassNameInfo(SourceTable) %>
<% if (SourceTable.PrimaryKey.MemberColumns.Count == 1) { %>
		Implements IHydratable
<% } %>

#Region "Private Members"
		<% foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) { %>
		<%= GetMemberVariableDeclarationStatement(column, "vb") %>
		<% } %>
		<% foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) { %>
		<%= GetMemberVariableDeclarationStatement(column, "vb") %>
		<% } %>
#End Region

#Region "Constructors"
        ' initialization
        Public Sub New()
        End Sub
		
        Public Sub New(<%= GetPrimaryKeyParameters(SourceTable, true, "vb").Trim() %>, <%= GetNonPrimaryKeyParameters(SourceTable, true, false, true, "vb").Trim() %>)
		<% for (int i=0; i<SourceTable.Columns.Count; i++) {
			if (GetLookupTable(SourceTable.Columns[i]).Length > 0) { %>
            Me.<%=GetLookupValue(SourceTable.Columns[i], true)%> = <%=GetLookupValue(SourceTable.Columns[i], true)%>			
			<% } %>
            Me.<%=SourceTable.Columns[i].Name%> = <%=SourceTable.Columns[i].Name%>
        <%  } %>
        End Sub
#End Region

#Region "Public Properties"
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
		' <summary>
		' Gets and sets the <%= GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i]) %>
		<% if (SourceTable.PrimaryKey.MemberColumns[i].Description.Length > 0) { %>
		' <%= SourceTable.PrimaryKey.MemberColumns[i].Description %>
		<% } %>
		' </summary>
        <XmlIgnore()> _
		Public Property <%= GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i]) %>() As <%= GetVBVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %>
			Get
				Return <%= GetMemberVariableName(SourceTable.PrimaryKey.MemberColumns[i]) %>
			End Get
			Set(ByVal Value As <%= GetVBVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %>)
				<%= GetMemberVariableName(SourceTable.PrimaryKey.MemberColumns[i]) %> = Value
			End Set
		End Property
		<% if (GetLookupTable(SourceTable.PrimaryKey.MemberColumns[i]).Length > 0) { %>
		' <summary>
		' Lookup from table <%= GetLookupTable(SourceTable.PrimaryKey.MemberColumns[i]) %> using <%= GetLookupField(SourceTable.PrimaryKey.MemberColumns[i]) %>
		' </summary>
        <XmlAttribute("<%=GetLookupValue(SourceTable.PrimaryKey.MemberColumns[i], true) %>")> _
		Public Property <%=GetLookupValue(SourceTable.PrimaryKey.MemberColumns[i], true) %>() As String
			Get
				Return _<%=GetLookupValue(SourceTable.PrimaryKey.MemberColumns[i], true) %>
			End Get
			Set(ByVal Value As String)
				_<%=GetLookupValue(SourceTable.PrimaryKey.MemberColumns[i], true) %> = Value
			End Set
		End Property
		<% } %>
		<% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) Response.Write("\r\n"); %>	
		<% } %>
		
		<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
		' <summary>
		' Gets and sets the <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>
		<% if (SourceTable.NonPrimaryKeyColumns[i].Description.Length > 0) { %>
		' <%= SourceTable.NonPrimaryKeyColumns[i].Description %>
		<% } %>
		' </summary>
		<% if(SourceTable.NonPrimaryKeyColumns[i].Name.ToLower() == "portalid" || SourceTable.NonPrimaryKeyColumns[i].Name.ToLower() == "moduleid" || SourceTable.NonPrimaryKeyColumns[i].NativeType == "timestamp") { %>
        <XmlIgnore()> _
		<% } %>
        <XmlAttribute("<%=GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>")> _
		Public Property <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>() As <%= GetVBVariableType(SourceTable.NonPrimaryKeyColumns[i]) %> 
			Get
				Return <%= GetMemberVariableName(SourceTable.NonPrimaryKeyColumns[i]) %>
			End Get
			Set(ByVal Value As <%= GetVBVariableType(SourceTable.NonPrimaryKeyColumns[i]) %>)
				<%= GetMemberVariableName(SourceTable.NonPrimaryKeyColumns[i]) %> = Value
			End Set
		End Property
		<% if (GetVBVariableType(SourceTable.NonPrimaryKeyColumns[i]) != "String") { %>
		' <summary>
		' Read-only formatted text version of <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>
		<% if (SourceTable.NonPrimaryKeyColumns[i].Description.Length > 0) { %>
		' <%= SourceTable.NonPrimaryKeyColumns[i].Description %>
		<% } %>
		' </summary>
        <XmlIgnore()> _
		Public ReadOnly Property <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>Text() As String
			Get
				Return <%= GetMemberVariableName(SourceTable.NonPrimaryKeyColumns[i]) %><%= GetColumnToText(SourceTable.NonPrimaryKeyColumns[i],"vb") %>
			End Get
		End Property
		<% } %>
		<% if (GetLookupTable(SourceTable.NonPrimaryKeyColumns[i]).Length > 0) { %>
		' <summary>
		' Lookup from table <%= GetLookupTable(SourceTable.NonPrimaryKeyColumns[i]) %> using <%= GetLookupField(SourceTable.NonPrimaryKeyColumns[i]) %>
		' </summary>
		<% string lookupvalue = GetLookupValue(SourceTable.NonPrimaryKeyColumns[i], true); %>
        <XmlAttribute("<%=lookupvalue %>")> _
		Public Property <%=lookupvalue %>() As String
			Get
				Return _<%=lookupvalue %>
			End Get
			Set(ByVal Value As String)
				_<%=lookupvalue %> = Value
			End Set
		End Property
		<% } %>
		<% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) Response.Write("\r\n"); %>		
		<% } %>
#End Region

#Region "IHydratable Implementation"
<% if (SourceTable.PrimaryKey.MemberColumns.Count == 1) { %>
       <XmlIgnore()> _
       Public Property KeyID() As Integer Implements IHydratable.KeyID
            Get
             <% foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) { %>
		       Return <%=column.Name%> 
		       <% } %>
            End Get
            Set(ByVal value As Integer)
             <% foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) { %>
		       <%=column.Name%> = value
		       <% } %>
		       End Set
        End Property
 
        Public Sub Fill(ByVal dr As IDataReader) Implements IHydratable.Fill
  
			   <% foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) { %>
		       <%=column.Name%> = <%= GetConvertStatement(column) %>(Null.SetNull(dr.Item("<%=column.Name%>"), <%=column.Name%>))
		       <% } %>
		       <% foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) { 
				if(column.NativeType != "timestamp") {
					if (GetLookupTable(column).Length > 0) { %>
				<%=GetLookupValue(column, true)%> = Convert.ToString(Null.SetNull(dr.Item("<%=GetLookupValue(column, true)%>"), <%=GetLookupValue(column, true)%>))	
					<% } %>
		       <%=column.Name%> = <%= GetConvertStatement(column) %>(Null.SetNull(dr.Item("<%=column.Name%>"), <%=column.Name%>))
		       <% } } %>			
		End Sub
<% } %>
#End Region
<% } %>
	End Class
End Namespace