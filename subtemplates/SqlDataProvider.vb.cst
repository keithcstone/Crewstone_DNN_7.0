<%-- 
Name: SQLDataProvider.vb.cst
Author: Keith Stone
Description: Template for DotNetNuke VB.Net SQL Data Provider
Revision: 2014.05.04
Note: For the latest version of this template, http://www.crewstone.com		
--%>

<%@ CodeTemplate Language="C#" Src="DNNMaster.CodeBehind.cs" Inherits="_Main" TargetLanguage="VB" Description="Generates the SqlDataProvider DAL class." %>
<%@ Property Category="DataSource" Name="MultiSourceTable" Type="SchemaExplorer.TableSchemaCollection" Description="Table that the object is based on." %>
<%@ Property Category="DataSource" Name="ObjectQualifier" Type="System.String" Default="" Optional="True" Description="Prefix for objects to be generated." %>
<%@ Property Category="DataSource" Name="OtherDatabase" Type="System.String" Default="" Optional="True" Description="If a value is entered, the generated modules will execute against the specified database. Requires an additional provider entry in the DotNetNuke/data section of the web.config file. If blank, the generated modules will exectue against tables in the DNN default database." %>
<%@ Property Category="Naming Convention" Name="Namespace" Type="System.String" Default="YourCompany" Description="Used to generate the Namespace declaration." %>
<%@ Property Category="Naming Convention" Name="CompanyName" Type="System.String" Default="YourCompany" Description="Used to generate the Namespace declaration." %>
<%@ Property Category="Naming Convention" Name="ModuleName" Type="System.String" Default="YourModule" Description="" %>
<%@ Property Category="Naming Convention" Name="FriendlyName" Type="System.String" Default="Your Module" Description="Descriptive module name" %>
<%@ Property Category="Style" Name="InsertKeyword" Type="System.String" Default="Add" Description="Suffix to use for all generated INSERT stored procedures." %>
<%@ Property Category="Style" Name="UpdateKeyword" Type="System.String" Default="Update" Description="Suffix to use for all generated UPDATE stored procedures." %>
<%@ Property Category="Style" Name="DeleteKeyword" Type="System.String" Default="Delete" Description="Suffix to use for all generated DELETE stored procedures." %>
<%@ Property Category="Style" Name="SelectKeyword" Type="System.String" Default="Get" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Category="Style" Name="ListKeyword" Type="System.String" Default="List" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>

<%
	string customProvider = "_providerConfiguration.DefaultProvider";
	if(OtherDatabase != null && OtherDatabase.Length > 0)
		customProvider = "\"" + OtherDatabase + "\"";
%>
Option Explicit On
'
' Module: <%=FriendlyName%>
' Copyright (c) <%= DateTime.Now.Year.ToString() %> <%=CompanyName%>
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
'
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Microsoft.ApplicationBlocks.Data

Imports DotNetNuke
Imports DotNetNuke.Common.Utilities
Imports DotNetNuke.Framework.Providers

Namespace <%= Namespace %>.Modules.<%=ModuleName%>.Data

    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' SQL Server implementation of the concrete DataProvider class
    ''' </summary>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
 	''' Generated by CodeSmith on <%= DateTime.Now.ToLongDateString() %>
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Class SqlDataProvider

        Inherits DataProvider

#Region "Private Members"

        Private Const ProviderType As String = "data"
        Private Const ModuleQualifier As String = "<%=Namespace%>_"

        Private _providerConfiguration As Framework.Providers.ProviderConfiguration = _
                 Framework.Providers.ProviderConfiguration.GetProviderConfiguration(ProviderType)
        Private _connectionString As String
        Private _providerPath As String
        Private _objectQualifier As String
        Private _databaseOwner As String

#End Region

#Region "Constructors"

        Public Sub New()

            ' Read the configuration specific information for this provider
            Dim objProvider As Framework.Providers.Provider = CType(_providerConfiguration.Providers(<%=customProvider%>), Framework.Providers.Provider)

            ' Read the attributes for this provider
            If (Not objProvider.Attributes("connectionStringName") Is Nothing) AndAlso (Not objProvider.Attributes("connectionStringName").Equals(String.Empty)) AndAlso (Not ConfigurationManager.ConnectionStrings(objProvider.Attributes("connectionStringName")).ConnectionString.Equals(String.Empty)) Then
                _connectionString = ConfigurationManager.ConnectionStrings(objProvider.Attributes("connectionStringName")).ConnectionString
            Else
                _connectionString = objProvider.Attributes("connectionString")
            End If

            _providerPath = objProvider.Attributes("providerPath")

            _objectQualifier = objProvider.Attributes("objectQualifier")
            If _objectQualifier <> "" And _objectQualifier.EndsWith("_") = False Then
                _objectQualifier += "_"
            End If

            _databaseOwner = objProvider.Attributes("databaseOwner")
            If _databaseOwner <> "" And _databaseOwner.EndsWith(".") = False Then
                _databaseOwner += "."
            End If

        End Sub

#End Region

#Region "Properties"

        Public ReadOnly Property ConnectionString() As String
            Get
                Return _connectionString
            End Get
        End Property

        Public ReadOnly Property ProviderPath() As String
            Get
                Return _providerPath
            End Get
        End Property

        Public ReadOnly Property ObjectQualifier() As String
            Get
                Return _objectQualifier
            End Get
        End Property

        Public ReadOnly Property DatabaseOwner() As String
            Get
                Return _databaseOwner
            End Get
        End Property

#End Region

#Region "Private Methods"

        Private Function GetFullyQualifiedName(ByVal name As String) As String
            Return DatabaseOwner & ObjectQualifier & ModuleQualifier & name
        End Function

        Private Function GetNull(ByVal Field As Object) As Object
            Return DotNetNuke.Common.Utilities.Null.GetNull(Field, DBNull.Value)
        End Function

#End Region

#Region "Public Methods"

<%
	foreach(SchemaExplorer.TableSchema SourceTable in MultiSourceTable)
	{
		%>
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' Retrieves a single <%= GetTableName(SourceTable) %> by primary key
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public Overrides Function <%= GetMethodName(GetTableName(SourceTable), SelectKeyword) %>(<%= GetPrimaryKeyParameters(SourceTable, true, "vb").Trim() %>) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("<%= GetUnqualifiedStoredProcName(SourceTable, SelectKeyword)%>"), <%= GetPrimaryKeyParameters(SourceTable, false, "vb")%>), IDataReader)
        End Function

<%
string ColumnName = "";

for( int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++ )
{
	if(SourceTable.NonPrimaryKeyColumns[i].ExtendedProperties["CS_Description"].Value.ToString().ToLower().StartsWith("get"))
	{
		ColumnName = SourceTable.NonPrimaryKeyColumns[i].Name;
%> 
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' Retrieves a single <%= GetTableName(SourceTable) %> by <%= GetSelectByColumnNameParameter(SourceTable.NonPrimaryKeyColumns[i], false, true, "vb")%>
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public Overrides Function <%= GetMethodName(GetTableName(SourceTable), SelectKeyword, ColumnName) %>(<%= GetSelectByColumnNameParameter(SourceTable.NonPrimaryKeyColumns[i], true, true, "vb").Trim() %><%= GetModuleIdParameter(SourceTable, true, true, "vb") %>) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("<%= GetUnqualifiedStoredProcName(SourceTable, SelectKeyword, ColumnName)%>"), <%= GetSelectByColumnNameParameter(SourceTable.NonPrimaryKeyColumns[i], false, true, "vb")%><%= GetModuleIdParameter(SourceTable, false, true, "vb") %>), IDataReader)
        End Function

<%
	} // if
} // for
%>
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' Retrieves a list of <%= GetTableName(SourceTable) %> 
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public Overrides Function <%= GetMethodName(GetTableName(SourceTable), ListKeyword, true) %>(<%= GetModuleIdParameter(SourceTable, true, false, "vb").Trim() %>) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("<%= GetUnqualifiedStoredProcName(SourceTable, ListKeyword)%>")<%= GetModuleIdParameter(SourceTable, false, true, "vb") %>), IDataReader)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' Inserts a single <%= GetTableName(SourceTable) %> 
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public Overrides Function <%= GetMethodName(GetTableName(SourceTable), InsertKeyword) %>(<%= GetNonPrimaryKeyParameters(SourceTable, true, false, false, "vb").Trim() %>) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("<%= GetUnqualifiedStoredProcName(SourceTable, InsertKeyword) %>"), <%= GetNonPrimaryKeyParameters(SourceTable, false, true, false, "vb").Trim() %>), Integer)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' Updates a single <%= GetTableName(SourceTable) %> using primary key
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public Overrides Sub <%= GetMethodName(GetTableName(SourceTable), UpdateKeyword) %>(<%= GetPrimaryKeyParameters(SourceTable, true, "vb").Trim() %>, <%= GetNonPrimaryKeyParameters(SourceTable, true, false, false, "vb").Trim() %>)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("<%= GetUnqualifiedStoredProcName(SourceTable, UpdateKeyword) %>"), <%= GetPrimaryKeyParameters(SourceTable, false, "vb") %>, <%= GetNonPrimaryKeyParameters(SourceTable, false, true, false, "vb").Trim() %>)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' Deletes a single <%= GetTableName(SourceTable) %> using primary key
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public Overrides Sub <%= GetMethodName(GetTableName(SourceTable), DeleteKeyword) %>(<%= GetPrimaryKeyParameters(SourceTable, true, "vb").Trim() %>)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("<%= GetUnqualifiedStoredProcName(SourceTable, DeleteKeyword) %>"), <%= GetPrimaryKeyParameters(SourceTable, false, "vb") %>)
        End Sub
		
		<% for (int K = 0; K < SourceTable.ForeignKeys.Count; K++) { %>
	<% TableKeySchema fk = SourceTable.ForeignKeys[K]; %>
	    ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' Retrieves a list of <%= GetTableName(SourceTable) %> by <%=fk.ForeignKeyMemberColumns[0].Name %>
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public Overrides Function <%= GetMethodName(GetTableName(SourceTable), ListKeyword, fk.ForeignKeyMemberColumns[0].Name) %>(<%= GetPrimaryKeyParameters(fk.PrimaryKeyTable, true, "vb") %>) As IDataReader
		    Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("<%= GetUnqualifiedStoredProcName(SourceTable, SelectKeyword) %>By<%= GetTableName(fk.PrimaryKeyTable) %>"), <%= GetPrimaryKeyParameters(fk.PrimaryKeyTable, false, "vb") %>), IDataReader)
	    End Function 
		
	<% } %>
<%	
	}
%>
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' Purges all data for <%= ModuleName %> leaving table structures intact
        ''' </summary>
        ''' <remarks>
        ''' This is a VERY dangerous procedure, only used to clean out tables before a full import
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public Overrides Sub Purge<%=ModuleName%>(ByVal portalId As Integer)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("<%=ModuleName%>Purge"), portalId)
        End Sub
#End Region

    End Class

End Namespace
