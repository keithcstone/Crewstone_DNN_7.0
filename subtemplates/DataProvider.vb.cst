<%-- 
Name: DataProvider.vb.cst
Author: Keith Stone
Description: Template for DotNetNuke VB.Net Data Provider
Revision: 2014.05.04
Note: For the latest version of this template, http://www.crewstone.com		
--%>

<%@ CodeTemplate Language="C#" Src="DNNMaster.CodeBehind.cs" Inherits="_Main" TargetLanguage="VB" Description="Generates the DAL DataProvider class." %>
<%@ Property Category="DataSource" Name="MultiSourceTable" Type="SchemaExplorer.TableSchemaCollection" Description="Table that the object is based on." %>
<%@ Property Category="DataSource" Name="ObjectQualifier" Type="System.String" Default="" Optional="True" Description="Prefix for objects to be generated." %>
<%@ Property Category="Database Options" Name="IncludeInsert" Type="System.Boolean" Default="True" Description="If true insert statements will be generated." %>
<%@ Property Category="Database Options" Name="IncludeUpdate" Type="System.Boolean" Default="True" Description="If true update statements will be generated." %>
<%@ Property Category="Database Options" Name="IncludeDelete" Type="System.Boolean" Default="True" Description="If true delete statements will be generated." %>
<%@ Property Category="Database Options" Name="IncludeGet" Type="System.Boolean" Default="True" Description="If true get statements will be generated." %>
<%@ Property Category="Database Options" Name="IncludeList" Type="System.Boolean" Default="True" Description="If true getlist statements will be generated." %>
<%@ Property Category="Database Options" Name="IncludeForeignKeyProcs" Type="System.Boolean" Default="True" Description="If true get statements will be generated for every foreign key in the table." %>
<%@ Property Category="Database Options" Name="IncludePaging" Type="System.Boolean" Default="True" Description="If true paging/sorting statements will be generated." %>
<%@ Property Category="Style" Name="PagingKeyword" Type="System.String" Default="GetPage" Description="Suffix to use for all generated PAGING/SORTING stored procedures." %>
<%@ Property Category="Style" Name="InsertKeyword" Type="System.String" Default="Add" Description="Suffix to use for all generated INSERT stored procedures." %>
<%@ Property Category="Style" Name="UpdateKeyword" Type="System.String" Default="Update" Description="Suffix to use for all generated UPDATE stored procedures." %>
<%@ Property Category="Style" Name="DeleteKeyword" Type="System.String" Default="Delete" Description="Suffix to use for all generated DELETE stored procedures." %>
<%@ Property Category="Style" Name="SelectKeyword" Type="System.String" Default="Get" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Category="Style" Name="ListKeyword" Type="System.String" Default="List" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Category="Naming Convention" Name="CompanyName" Type="System.String" Default="YourCompany" Description="Used to generate the copyright declaration." %>
<%@ Property Category="Naming Convention" Name="ModuleName" Type="System.String" Default="YourModule" Description="" %>
<%@ Property Category="Naming Convention" Name="Namespace" Type="System.String" Default="YourCompany" Description="Used to generate the Namespace declaration." %>
<%@ Property Category="Naming Convention" Name="FriendlyName" Type="System.String" Default="Your Module" Description="Descriptive module name" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
Option Explicit On
'
' Module: <%=FriendlyName%>
' Copyright (c) <%= DateTime.Now.Year.ToString() %> <%=CompanyName%>
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
'
Imports System
Imports DotNetNuke
Imports System.Data

Namespace <%= Namespace %>.Modules.<%=ModuleName%>.Data

    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' An abstract class for the data access layer
    ''' </summary>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
	''' Generated by CodeSmith on <%= DateTime.Now.ToLongDateString() %>
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public MustInherit Class DataProvider

#Region "Shared/Static Methods"

        ' singleton reference to the instantiated object 
        Private Shared objProvider As DataProvider = Nothing

        ' constructor
        Shared Sub New()
            CreateProvider()
        End Sub

        ' dynamically create provider
        Private Shared Sub CreateProvider()
            objProvider = CType(Framework.Reflection.CreateObject("data", "<%= Namespace %>.Modules.<%=ModuleName%>.Data", ""), DataProvider)
        End Sub

        ' return the provider
        Public Shared Shadows Function Instance() As DataProvider
            Return objProvider
        End Function

#End Region

#Region "Abstract methods"
<%
	foreach(SchemaExplorer.TableSchema SourceTable in MultiSourceTable)
	{
		%>

	<% if (IncludeGet) { %>
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        '''  Get a single <%= GetTableName(SourceTable) %> item by primary key
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public MustOverride Function <%= GetMethodName(GetTableName(SourceTable), SelectKeyword) %>(<%= GetPrimaryKeyParameters(SourceTable, true, "vb").Trim()%>) As IDataReader

    <% } %>
    <% if (IncludeList) { %> <%-- List items --%>
	    ' Get a all <%= GetTableName(SourceTable) %> items
        Public MustOverride Function <%= GetMethodName(GetTableName(SourceTable), ListKeyword, true) %>(<%= GetModuleIdParameter(SourceTable, true, false, "vb") %>) As IDataReader

    <% } %>
    <% if (IncludeForeignKeyProcs) { %> <%-- Select for each Foreign Key --%>
        <% for (int K = 0; K < SourceTable.ForeignKeys.Count; K++) { %>
    	<% TableKeySchema fk = SourceTable.ForeignKeys[K]; %>
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        '''  Get all <%= GetTableName(SourceTable) %> by foreign key
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public MustOverride Function <%= GetMethodName(GetTableName(SourceTable), ListKeyword, fk.ForeignKeyMemberColumns[0].Name) %>(<%= GetPrimaryKeyParameters(fk.PrimaryKeyTable, true, "vb") %>) As IDataReader

	    <% } %>
    <% } %>
	<% if (IncludeInsert) { %> <%-- Insert Item --%>
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        '''  Insert a single <%= GetTableName(SourceTable) %> 
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
	    Public MustOverride Function <%= GetMethodName(GetTableName(SourceTable), InsertKeyword) %>(<%= GetNonPrimaryKeyParameters(SourceTable, true, false, false, "vb").Trim() %>) As Integer

    <% } %>
	<% if (IncludeUpdate) { %> <%-- Update Item --%>
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        '''  Update a single <%= GetTableName(SourceTable) %> item by primary key
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public MustOverride Sub <%= GetMethodName(GetTableName(SourceTable), UpdateKeyword) %>(<%= GetPrimaryKeyParameters(SourceTable, true, "vb").Trim() %>, <%= GetNonPrimaryKeyParameters(SourceTable, true, false, false, "vb").Trim() %>)

    <% } %>
	<% if (IncludeDelete) { %> <%-- Delete Item --%>
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        '''  Delete a single <%= GetTableName(SourceTable) %> item by primary key
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public MustOverride Sub <%= GetMethodName(GetTableName(SourceTable), DeleteKeyword) %>(<%= GetPrimaryKeyParameters(SourceTable, true, "vb").Trim() %>)
	
    <% } %>
<%----%>
<%	
	}
%>
#End Region
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' Purges all data for <%= ModuleName %> leaving table structures intact
        ''' </summary>
        ''' <remarks>
        ''' This is a VERY dangerous procedure, only used to clean out tables before a full import
        ''' </remarks>
        ''' <history>
        '''     Generated By CodeSmith On <%= DateTime.Now.ToLongDateString() %>
        ''' </history>
        ''' ----------------------------------------------------------------------------- 
        Public MustOverride Sub Purge<%=ModuleName%>(ByVal portalId As Integer)

    End Class

End Namespace
