<%-- 
Name: TableRepository.cs.cst
Author: Keith Stone
Description: Generates the DNN TableRepository Class for C#
Revision: 2014.03.06
Note: For the latest version of this template, http://www.crewstone.com		
--%>
<%@ CodeTemplate Language="C#" Src="DNNMaster.CodeBehind.cs" Inherits="_Main" TargetLanguage="C#" Description="Generates the DNN TableRepository Class for C#" %>
<%@ Property Category="Naming Convention" Name="ModuleName" Type="System.String" Default="YourModule" Description="Module Name" %>
<%@ Property Category="Naming Convention" Name="FriendlyName" Type="System.String" Default="Your Module" Description="Descriptive module name" %>
<%@ Property Category="Naming Convention" Name="Namespace" Type="System.String" Default="Namespace" Description="Used to generate the Namespace declaration, no spaces or punctuation" %>
<%@ Property Category="Naming Convention" Name="CompanyName" Type="System.String" Default="YourCompany" Description="Descriptive name to generate the copyright declaration and documentation." %>
<%@ Property Category="DataSource" Name="SourceTable" Type="SchemaExplorer.TableSchema" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
/*
' Module: <%=FriendlyName%>
' Copyright (c) <%= DateTime.Now.Year.ToString() %> <%=CompanyName%>
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
' 
*/
using System;
using System.Collections.Generic;
using <%= Namespace %>.Modules.<%=ModuleName%>.Entities;
using DotNetNuke.Common.Utilities;
using DotNetNuke.Data;

namespace <%= Namespace %>.Modules.<%=ModuleName%>.Components
{
    public class <%= GetTableName(SourceTable) %>Repository : I<%= GetTableName(SourceTable) %>Repository
    {
        public void ClearCache(<%= GetScopeParameters(SourceTable,true,"cs") %>)        
        {
            using (IDataContext ctx = DataContext.Instance())
            {
                var rep = ctx.GetRepository<<%= GetTableName(SourceTable) %>>();
                try
                {
                    // Setup fictitous <%= GetTableName(SourceTable) %> to delete (just to clear the scope cache)
                    var t = new <%= GetTableName(SourceTable) %> { <%= GetPrimaryKeyParameters(SourceTable,false,"cs") %> = -1, <%= GetScopeParameters(SourceTable,false,"cs") %> = <%= GetScopeParameters(SourceTable,false,"cs") %> };
                    Delete<%= GetTableName(SourceTable) %>(t);
                }
                catch { } // ignore
            }
        }

        public int Create<%= GetTableName(SourceTable) %>(I<%= GetTableName(SourceTable) %>Model t)
        {
            using (IDataContext ctx = DataContext.Instance())
            {
                var rep = ctx.GetRepository<<%= GetTableName(SourceTable) %>>();
                rep.Insert((<%= GetTableName(SourceTable) %>)t);
                return t.<%= GetPrimaryKeyParameters(SourceTable,false,"cs") %>;
            }
        }

        public void Delete<%= GetTableName(SourceTable) %>(<%= GetPrimaryKeyParameters(SourceTable,true,"cs") %>, <%= GetScopeParameters(SourceTable,true,"cs") %>)
        {
            var t = Get<%= GetTableName(SourceTable) %>(<%= GetPrimaryKeyParameters(SourceTable,false,"cs") %>, <%= GetScopeParameters(SourceTable,false,"cs") %>);
            Delete<%= GetTableName(SourceTable) %>(t);
        }

        public void Delete<%= GetTableName(SourceTable) %>(I<%= GetTableName(SourceTable) %>Model t)
        {
            using (IDataContext ctx = DataContext.Instance())
            {
                var rep = ctx.GetRepository<<%= GetTableName(SourceTable) %>>();
                rep.Delete((<%= GetTableName(SourceTable) %>)t);
            }
        }

        public IEnumerable<I<%= GetTableName(SourceTable) %>Model> Get<%= GetTableName(SourceTable) %>s(<%= GetScopeParameters(SourceTable,true,"cs") %>)
        {
            IEnumerable<<%= GetTableName(SourceTable) %>> t;
            using (IDataContext ctx = DataContext.Instance())
            {
                var rep = ctx.GetRepository<<%= GetTableName(SourceTable) %>>();
                t = rep.Get(<%= GetScopeParameters(SourceTable,false,"cs") %>);
            }
            return t;
        }

        public I<%= GetTableName(SourceTable) %>Model Get<%= GetTableName(SourceTable) %>(<%= GetPrimaryKeyParameters(SourceTable,true,"cs") %>, <%= GetScopeParameters(SourceTable,true,"cs") %>)
        {
            <%= GetTableName(SourceTable) %> t;
            using (IDataContext ctx = DataContext.Instance())
            {
                var rep = ctx.GetRepository<<%= GetTableName(SourceTable) %>>();
                t = rep.GetById(<%= GetPrimaryKeyParameters(SourceTable,false,"cs") %>, <%= GetScopeParameters(SourceTable,false,"cs") %>);
            }
            return t;
        }

        public IEnumerable<I<%= GetTableName(SourceTable) %>Model> Get<%= GetTableName(SourceTable) %>ByName(<%= GetScopeParameters(SourceTable,true,"cs") %>, string itemname)
        {
            IEnumerable<<%= GetTableName(SourceTable) %>> t;
            using (IDataContext ctx = DataContext.Instance())
            {
                var rep = ctx.GetRepository<<%= GetTableName(SourceTable) %>>();
                t = rep.Find("WHERE <%= GetScopeParameters(SourceTable,true,"cs") %> = @0 AND ItemName LIKE @1", <%= GetScopeParameters(SourceTable,false,"cs") %> , itemname);
            }
            return t;
        }

        public void Update<%= GetTableName(SourceTable) %>(I<%= GetTableName(SourceTable) %>Model t)
        {
            using (IDataContext ctx = DataContext.Instance())
            {
                var rep = ctx.GetRepository<<%= GetTableName(SourceTable) %>>();
                rep.Update((<%= GetTableName(SourceTable) %>)t);
            }
        }

    }
}
