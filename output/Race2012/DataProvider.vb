Option Explicit On

' Copyright (c) 2014 Crewstone Consulting ltd
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
'

Imports System
Imports DotNetNuke
Imports System.Data

Namespace Namespace.Modules.Race2012.Data

    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' An abstract class for the data access layer
    ''' </summary>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
	''' Generated by CodeSmith on Friday, January 17, 2014
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public MustInherit Class DataProvider

#Region "Shared/Static Methods"

        ' singleton reference to the instantiated object 
        Private Shared objProvider As DataProvider = Nothing

        ' constructor
        Shared Sub New()
            CreateProvider()
        End Sub

        ' dynamically create provider
        Private Shared Sub CreateProvider()
            objProvider = CType(Framework.Reflection.CreateObject("data", "Namespace.Modules.Race2012", ""), DataProvider)
        End Sub

        ' return the provider
        Public Shared Shadows Function Instance() As DataProvider
            Return objProvider
        End Function

#End Region

#Region "Abstract methods"

        ' Get a single Bounces item by primary key
        Public MustOverride Function GetBounces(ByVal eMail As String) As IDataReader

	    ' Get a all Bounces items
        Public MustOverride Function ListBouncess(ByVal portalId As Integer) As IDataReader

	    ' Insert a single Bounces item
	    Public MustOverride Function AddBounces(ByVal portalId As Integer) As Integer

	    ' Update a single Bounces item by primary key
	    Public MustOverride Sub UpdateBounces(ByVal eMail As String, ByVal portalId As Integer)

 	   ' Delete a single Bounces item by primary key
       Public MustOverride Sub DeleteBounces(ByVal eMail As String)
	


        ' Get a single ContactTypes item by primary key
        Public MustOverride Function GetContactTypes(ByVal contactType As Integer) As IDataReader

	    ' Get a all ContactTypes items
        Public MustOverride Function ListContactTypess(ByVal portalId As Integer) As IDataReader

	    ' Insert a single ContactTypes item
	    Public MustOverride Function AddContactTypes(ByVal portalId As Integer, ByVal abbreviation As String, ByVal description As String, ByVal defaultType As Boolean) As Integer

	    ' Update a single ContactTypes item by primary key
	    Public MustOverride Sub UpdateContactTypes(ByVal contactType As Integer, ByVal portalId As Integer, ByVal abbreviation As String, ByVal description As String, ByVal defaultType As Boolean)

 	   ' Delete a single ContactTypes item by primary key
       Public MustOverride Sub DeleteContactTypes(ByVal contactType As Integer)
	


        ' Get a single Divisions item by primary key
        Public MustOverride Function GetDivisions(ByVal division As String) As IDataReader

	    ' Get a all Divisions items
        Public MustOverride Function ListDivisionss(ByVal portalId As Integer) As IDataReader

	    ' Insert a single Divisions item
	    Public MustOverride Function AddDivisions(ByVal portalId As Integer, ByVal description As String, ByVal priority As Integer, ByVal overall As Boolean, ByVal masters As Boolean) As Integer

	    ' Update a single Divisions item by primary key
	    Public MustOverride Sub UpdateDivisions(ByVal division As String, ByVal portalId As Integer, ByVal description As String, ByVal priority As Integer, ByVal overall As Boolean, ByVal masters As Boolean)

 	   ' Delete a single Divisions item by primary key
       Public MustOverride Sub DeleteDivisions(ByVal division As String)
	


        ' Get a single DoNotEmail item by primary key
        Public MustOverride Function GetDoNotEmail(ByVal emailAddress As String) As IDataReader

	    ' Get a all DoNotEmail items
        Public MustOverride Function ListDoNotEmails(ByVal portalId As Integer) As IDataReader

	    ' Insert a single DoNotEmail item
	    Public MustOverride Function AddDoNotEmail(ByVal portalId As Integer, ByVal movedBy As String, ByVal optOutReason As String) As Integer

	    ' Update a single DoNotEmail item by primary key
	    Public MustOverride Sub UpdateDoNotEmail(ByVal emailAddress As String, ByVal portalId As Integer, ByVal movedBy As String, ByVal optOutReason As String)

 	   ' Delete a single DoNotEmail item by primary key
       Public MustOverride Sub DeleteDoNotEmail(ByVal emailAddress As String)
	


        ' Get a single Entrants item by primary key
        Public MustOverride Function GetEntrants(ByVal runnerId As Integer) As IDataReader

	    ' Get a all Entrants items
        Public MustOverride Function ListEntrantss(ByVal portalId As Integer) As IDataReader

	    ' Get all Entrants by foreign key
	    Public MustOverride Function GetEntrantsByContactType(ByVal contactType As Integer) As IDataReader

	    ' Get all Entrants by foreign key
	    Public MustOverride Function GetEntrantsByPrimaryNo(ByVal runnerId As Integer) As IDataReader

	    ' Insert a single Entrants item
	    Public MustOverride Function AddEntrants(ByVal portalId As Integer, ByVal contactType As Integer, ByVal fullName As String, ByVal firstName As String, ByVal middleName As String, ByVal lastName As String, ByVal suffix As String, ByVal nickname As String, ByVal birthDate As DateTime, ByVal age As short, ByVal weight As short, ByVal sex As String, ByVal tShirt As String, ByVal sweats As String, ByVal shorts As String, ByVal shoes As String, ByVal shoeStyle As String, ByVal club As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zIP As String, ByVal country As String, ByVal homePhone As String, ByVal mobilePhone As String, ByVal mobileCarrier As String, ByVal eMail As String, ByVal plainText As Boolean, ByVal uSATFNumber As String, ByVal memberType As String, ByVal memberNumber As Integer, ByVal memberCode As String, ByVal dateJoined As DateTime, ByVal lastRenewal As DateTime, ByVal paidThru As DateTime, ByVal waiver As Boolean, ByVal primaryNo As Integer, ByVal survivor As Boolean, ByVal mailingExpiration As DateTime, ByVal memo As String, ByVal marked As Boolean, ByVal keywords As String, ByVal company As String, ByVal title As String, ByVal workAddress As String, ByVal workCity As String, ByVal workState As String, ByVal workZip As String, ByVal workCountry As String, ByVal workPhone As String, ByVal workEmail As String, ByVal activeId As Integer, ByVal invalidEmail As Boolean, ByVal resultsEmailOnly As Boolean, ByVal invalidAddress As Boolean, ByVal userName As String, ByVal password As String, ByVal insertionDate As DateTime, ByVal updateDate As DateTime) As Integer

	    ' Update a single Entrants item by primary key
	    Public MustOverride Sub UpdateEntrants(ByVal runnerId As Integer, ByVal portalId As Integer, ByVal contactType As Integer, ByVal fullName As String, ByVal firstName As String, ByVal middleName As String, ByVal lastName As String, ByVal suffix As String, ByVal nickname As String, ByVal birthDate As DateTime, ByVal age As short, ByVal weight As short, ByVal sex As String, ByVal tShirt As String, ByVal sweats As String, ByVal shorts As String, ByVal shoes As String, ByVal shoeStyle As String, ByVal club As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zIP As String, ByVal country As String, ByVal homePhone As String, ByVal mobilePhone As String, ByVal mobileCarrier As String, ByVal eMail As String, ByVal plainText As Boolean, ByVal uSATFNumber As String, ByVal memberType As String, ByVal memberNumber As Integer, ByVal memberCode As String, ByVal dateJoined As DateTime, ByVal lastRenewal As DateTime, ByVal paidThru As DateTime, ByVal waiver As Boolean, ByVal primaryNo As Integer, ByVal survivor As Boolean, ByVal mailingExpiration As DateTime, ByVal memo As String, ByVal marked As Boolean, ByVal keywords As String, ByVal company As String, ByVal title As String, ByVal workAddress As String, ByVal workCity As String, ByVal workState As String, ByVal workZip As String, ByVal workCountry As String, ByVal workPhone As String, ByVal workEmail As String, ByVal activeId As Integer, ByVal invalidEmail As Boolean, ByVal resultsEmailOnly As Boolean, ByVal invalidAddress As Boolean, ByVal userName As String, ByVal password As String, ByVal insertionDate As DateTime, ByVal updateDate As DateTime)

 	   ' Delete a single Entrants item by primary key
       Public MustOverride Sub DeleteEntrants(ByVal runnerId As Integer)
	


        ' Get a single Events item by primary key
        Public MustOverride Function GetEvents(ByVal runnerId As Integer, ByVal raceId As Integer) As IDataReader

	    ' Get a all Events items
        Public MustOverride Function ListEventss(ByVal portalId As Integer) As IDataReader

	    ' Get all Events by foreign key
	    Public MustOverride Function GetEventsByRunnerId(ByVal runnerId As Integer) As IDataReader

	    ' Get all Events by foreign key
	    Public MustOverride Function GetEventsByRaceId(ByVal raceId As Integer) As IDataReader

	    ' Insert a single Events item
	    Public MustOverride Function AddEvents(ByVal portalId As Integer, ByVal bibNumber As Integer, ByVal division As String, ByVal divisionPlace As short, ByVal divisionTotal As short, ByVal sexPlace As Integer, ByVal sexTotal As Integer, ByVal gunTime As DateTime, ByVal netTime As DateTime, ByVal pace As DateTime, ByVal place As Integer, ByVal seed As DateTime, ByVal team As String, ByVal fee As decimal, ByVal entryDate As DateTime, ByVal clydesdale As Boolean, ByVal survivor As Boolean, ByVal nonCompetitive As Boolean, ByVal uSATF As Boolean, ByVal age As short, ByVal sex As String, ByVal weight As short, ByVal heat As short, ByVal waveOffset As DateTime, ByVal wAVATime As DateTime, ByVal performancePercent As Single, ByVal seriesPlace As short, ByVal seriesAge As short, ByVal seriesDivision As String, ByVal seriesPoints As short, ByVal confirmation As Boolean, ByVal results As Boolean, ByVal chipId As String, ByVal awardDivision As String, ByVal awardPlace As short, ByVal awardPriority As short) As Integer

	    ' Update a single Events item by primary key
	    Public MustOverride Sub UpdateEvents(ByVal runnerId As Integer, ByVal raceId As Integer, ByVal portalId As Integer, ByVal bibNumber As Integer, ByVal division As String, ByVal divisionPlace As short, ByVal divisionTotal As short, ByVal sexPlace As Integer, ByVal sexTotal As Integer, ByVal gunTime As DateTime, ByVal netTime As DateTime, ByVal pace As DateTime, ByVal place As Integer, ByVal seed As DateTime, ByVal team As String, ByVal fee As decimal, ByVal entryDate As DateTime, ByVal clydesdale As Boolean, ByVal survivor As Boolean, ByVal nonCompetitive As Boolean, ByVal uSATF As Boolean, ByVal age As short, ByVal sex As String, ByVal weight As short, ByVal heat As short, ByVal waveOffset As DateTime, ByVal wAVATime As DateTime, ByVal performancePercent As Single, ByVal seriesPlace As short, ByVal seriesAge As short, ByVal seriesDivision As String, ByVal seriesPoints As short, ByVal confirmation As Boolean, ByVal results As Boolean, ByVal chipId As String, ByVal awardDivision As String, ByVal awardPlace As short, ByVal awardPriority As short)

 	   ' Delete a single Events item by primary key
       Public MustOverride Sub DeleteEvents(ByVal runnerId As Integer, ByVal raceId As Integer)
	


        ' Get a single EventTypes item by primary key
        Public MustOverride Function GetEventTypes(ByVal eventTypeId As Integer) As IDataReader

	    ' Get a all EventTypes items
        Public MustOverride Function ListEventTypess(ByVal portalId As Integer) As IDataReader

	    ' Insert a single EventTypes item
	    Public MustOverride Function AddEventTypes(ByVal portalId As Integer, ByVal eventTypeName As String, ByVal defaultType As short) As Integer

	    ' Update a single EventTypes item by primary key
	    Public MustOverride Sub UpdateEventTypes(ByVal eventTypeId As Integer, ByVal portalId As Integer, ByVal eventTypeName As String, ByVal defaultType As short)

 	   ' Delete a single EventTypes item by primary key
       Public MustOverride Sub DeleteEventTypes(ByVal eventTypeId As Integer)
	


        ' Get a single MemberTypes item by primary key
        Public MustOverride Function GetMemberTypes(ByVal memberTypeID As Integer) As IDataReader

	    ' Get a all MemberTypes items
        Public MustOverride Function ListMemberTypess(ByVal portalId As Integer) As IDataReader

	    ' Insert a single MemberTypes item
	    Public MustOverride Function AddMemberTypes(ByVal portalId As Integer, ByVal memberType As String, ByVal memberDues As decimal) As Integer

	    ' Update a single MemberTypes item by primary key
	    Public MustOverride Sub UpdateMemberTypes(ByVal memberTypeID As Integer, ByVal portalId As Integer, ByVal memberType As String, ByVal memberDues As decimal)

 	   ' Delete a single MemberTypes item by primary key
       Public MustOverride Sub DeleteMemberTypes(ByVal memberTypeID As Integer)
	


        ' Get a single Organization item by primary key
        Public MustOverride Function GetOrganization(ByVal orgID As Integer) As IDataReader

	    ' Get a all Organization items
        Public MustOverride Function ListOrganizations(ByVal portalId As Integer) As IDataReader

	    ' Insert a single Organization item
	    Public MustOverride Function AddOrganization(ByVal portalId As Integer, ByVal clubName As String, ByVal address As String, ByVal city As String, ByVal stateOrProvince As String, ByVal postalCode As String, ByVal country As String, ByVal defaultInvoiceDescription As String, ByVal phoneNumber As String, ByVal faxNumber As String, ByVal eMail As String, ByVal nickname As String, ByVal mailingExpirePeriod As short, ByVal lastEmail As DateTime, ByVal lastLetters As DateTime) As Integer

	    ' Update a single Organization item by primary key
	    Public MustOverride Sub UpdateOrganization(ByVal orgID As Integer, ByVal portalId As Integer, ByVal clubName As String, ByVal address As String, ByVal city As String, ByVal stateOrProvince As String, ByVal postalCode As String, ByVal country As String, ByVal defaultInvoiceDescription As String, ByVal phoneNumber As String, ByVal faxNumber As String, ByVal eMail As String, ByVal nickname As String, ByVal mailingExpirePeriod As short, ByVal lastEmail As DateTime, ByVal lastLetters As DateTime)

 	   ' Delete a single Organization item by primary key
       Public MustOverride Sub DeleteOrganization(ByVal orgID As Integer)
	


        ' Get a single RaceDivisions item by primary key
        Public MustOverride Function GetRaceDivisions(ByVal raceId As Integer, ByVal priority As Integer) As IDataReader

	    ' Get a all RaceDivisions items
        Public MustOverride Function ListRaceDivisionss(ByVal portalId As Integer) As IDataReader

	    ' Get all RaceDivisions by foreign key
	    Public MustOverride Function GetRaceDivisionsByRaceId(ByVal raceId As Integer) As IDataReader

	    ' Insert a single RaceDivisions item
	    Public MustOverride Function AddRaceDivisions(ByVal portalId As Integer, ByVal sex As String, ByVal startAge As short, ByVal endAge As Integer, ByVal startWeight As Integer, ByVal endWeight As Integer, ByVal survivor As Boolean, ByVal division As String, ByVal depth As short, ByVal overall As Boolean, ByVal masters As Boolean, ByVal uSATF As Boolean) As Integer

	    ' Update a single RaceDivisions item by primary key
	    Public MustOverride Sub UpdateRaceDivisions(ByVal raceId As Integer, ByVal priority As Integer, ByVal portalId As Integer, ByVal sex As String, ByVal startAge As short, ByVal endAge As Integer, ByVal startWeight As Integer, ByVal endWeight As Integer, ByVal survivor As Boolean, ByVal division As String, ByVal depth As short, ByVal overall As Boolean, ByVal masters As Boolean, ByVal uSATF As Boolean)

 	   ' Delete a single RaceDivisions item by primary key
       Public MustOverride Sub DeleteRaceDivisions(ByVal raceId As Integer, ByVal priority As Integer)
	


        ' Get a single Races item by primary key
        Public MustOverride Function GetRaces(ByVal raceId As Integer) As IDataReader

	    ' Get a all Races items
        Public MustOverride Function ListRacess(ByVal portalId As Integer) As IDataReader

	    ' Get all Races by foreign key
	    Public MustOverride Function GetRacesByEventType(ByVal eventTypeId As Integer) As IDataReader

	    ' Insert a single Races item
	    Public MustOverride Function AddRaces(ByVal portalId As Integer, ByVal eventType As Integer, ByVal raceName As String, ByVal raceDate As DateTime, ByVal raceDistance As Single, ByVal raceLocation As String, ByVal raceCity As String, ByVal raceState As String, ByVal raceCountry As String, ByVal raceLogo As String, ByVal uSATFNumber As String, ByVal rodaleEventId As Integer, ByVal activeEventId As Integer, ByVal preregistrationDate As DateTime, ByVal preregistrationFee As decimal, ByVal raceDayFee As decimal, ByVal registrationURL As String, ByVal registrationLogo As String, ByVal description As String, ByVal emailText As String, ByVal resultsText As String, ByVal resultsURL As String, ByVal annual As short, ByVal keyword As String, ByVal lastBibNumber As double, ByVal contactName As String, ByVal contactAddress1 As String, ByVal contactAddress2 As String, ByVal contactCity As String, ByVal contactState As String, ByVal contactZIP As String, ByVal contactPhoneNumber As String, ByVal contactFAX As String, ByVal contactEMail As String, ByVal wEBSite As String, ByVal relatedRace As Integer, ByVal organization As Integer, ByVal volunteerContact As String, ByVal volunteerPhone As String, ByVal volunteerEmail As String, ByVal displayStartDate As DateTime, ByVal displayEndDate As DateTime, ByVal insertionDate As DateTime, ByVal modificationDate As DateTime) As Integer

	    ' Update a single Races item by primary key
	    Public MustOverride Sub UpdateRaces(ByVal raceId As Integer, ByVal portalId As Integer, ByVal eventType As Integer, ByVal raceName As String, ByVal raceDate As DateTime, ByVal raceDistance As Single, ByVal raceLocation As String, ByVal raceCity As String, ByVal raceState As String, ByVal raceCountry As String, ByVal raceLogo As String, ByVal uSATFNumber As String, ByVal rodaleEventId As Integer, ByVal activeEventId As Integer, ByVal preregistrationDate As DateTime, ByVal preregistrationFee As decimal, ByVal raceDayFee As decimal, ByVal registrationURL As String, ByVal registrationLogo As String, ByVal description As String, ByVal emailText As String, ByVal resultsText As String, ByVal resultsURL As String, ByVal annual As short, ByVal keyword As String, ByVal lastBibNumber As double, ByVal contactName As String, ByVal contactAddress1 As String, ByVal contactAddress2 As String, ByVal contactCity As String, ByVal contactState As String, ByVal contactZIP As String, ByVal contactPhoneNumber As String, ByVal contactFAX As String, ByVal contactEMail As String, ByVal wEBSite As String, ByVal relatedRace As Integer, ByVal organization As Integer, ByVal volunteerContact As String, ByVal volunteerPhone As String, ByVal volunteerEmail As String, ByVal displayStartDate As DateTime, ByVal displayEndDate As DateTime, ByVal insertionDate As DateTime, ByVal modificationDate As DateTime)

 	   ' Delete a single Races item by primary key
       Public MustOverride Sub DeleteRaces(ByVal raceId As Integer)
	


        ' Get a single ZIP item by primary key
        Public MustOverride Function GetZIP(ByVal fiveDigitZIP As String, ByVal sequence As short) As IDataReader

	    ' Get a all ZIP items
        Public MustOverride Function ListZIPs(ByVal portalId As Integer) As IDataReader

	    ' Insert a single ZIP item
	    Public MustOverride Function AddZIP(ByVal portalId As Integer, ByVal city As String, ByVal state As String, ByVal county As String, ByVal country As String) As Integer

	    ' Update a single ZIP item by primary key
	    Public MustOverride Sub UpdateZIP(ByVal fiveDigitZIP As String, ByVal sequence As short, ByVal portalId As Integer, ByVal city As String, ByVal state As String, ByVal county As String, ByVal country As String)

 	   ' Delete a single ZIP item by primary key
       Public MustOverride Sub DeleteZIP(ByVal fiveDigitZIP As String, ByVal sequence As short)
	

#End Region

        Public MustOverride Sub PurgeRace2012(ByVal portalId As Integer)

    End Class

End Namespace
