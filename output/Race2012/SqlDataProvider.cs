/*
' Copyright (c) 2014 Crewstone Consulting ltd
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
' 
*/
using System;
using System.Data;
using Microsoft.ApplicationBlocks.Data;

using DotNetNuke.Common.Utilities;
using DotNetNuke.Framework.Providers;

namespace Namespace.Modules.Race2012.Data
{
    /// ----------------------------------------------------------------------------- 
    /// <summary> 
    /// SQL Server concrete implementation of the DataProvider class 
    /// </summary> 
    /// <remarks> 
    /// </remarks> 
    /// <history> 
    /// Generated by CodeSmith on Friday, January 17, 2014
    /// </history> 
    /// ----------------------------------------------------------------------------- 
    public class SqlDataProvider : DataProvider
    {

    #region "Private Members"

        private const string ProviderType = "data";
        private const string ModuleQualifier = "Namespace_";

        private ProviderConfiguration _providerConfiguration = ProviderConfiguration.GetProviderConfiguration(ProviderType);
        private string _connectionString;
        private string _providerPath;
        private string _objectQualifier;
        private string _databaseOwner;

    #endregion

    #region "Constructors"

        public SqlDataProvider()
        {

            // Read the configuration specific information for this provider 
            Provider objProvider = (Provider)_providerConfiguration.Providers[_providerConfiguration.DefaultProvider];

            // Read the attributes for this provider 

            //Get Connection string from web.config 
            _connectionString = Config.GetConnectionString();

            if (_connectionString == "")
            {
                // Use connection string specified in provider 
                _connectionString = objProvider.Attributes["connectionString"];
            }

            _providerPath = objProvider.Attributes["providerPath"];

            _objectQualifier = objProvider.Attributes["objectQualifier"];
            if (_objectQualifier != "" & _objectQualifier.EndsWith("_") == false)
            {
                _objectQualifier += "_";
            }

            _databaseOwner = objProvider.Attributes["databaseOwner"];
            if (_databaseOwner != "" & _databaseOwner.EndsWith(".") == false)
            {
                _databaseOwner += ".";
            }

        }

    #endregion

    #region "Properties"

        public string ConnectionString
        {
            get { return _connectionString; }
        }

        public string ProviderPath
        {
            get { return _providerPath; }
        }

        public string ObjectQualifier
        {
            get { return _objectQualifier; }
        }

        public string DatabaseOwner
        {
            get { return _databaseOwner; }
        }

    #endregion

    #region "Private Methods"

        private string GetFullyQualifiedName(string name)
        {
            return DatabaseOwner + ObjectQualifier + ModuleQualifier + name;
        }

        private object GetNull(object Field)
        {
            return DotNetNuke.Common.Utilities.Null.GetNull(Field, DBNull.Value);
        }

    #endregion
	
	#region "Bounces Methods"

	public override IDataReader GetBounces(string eMail)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("BouncesGet"), eMail);
	}
	
    public override IDataReader ListBounces()
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("BouncesList") );
	}
	
    public override void AddBounces(int portalId)
	{
		SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("BouncesAdd"), GetNull(portalId)).ToString();
	}
	
	public override void UpdateBounces(string eMail, int portalId)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("BouncesUpdate"), eMail, GetNull(portalId));
	}

	public override void DeleteBounces(string eMail)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("BouncesDelete"), eMail);
	}

	#endregion
	#region "ContactTypes Methods"

	public override IDataReader GetContactTypes(int contactType)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("ContactTypesGet"), contactType);
	}
	
    public override IDataReader ListContactTypes()
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("ContactTypesList") );
	}
	
    public override void AddContactTypes(int portalId, string abbreviation, string description, bool defaultType)
	{
		SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("ContactTypesAdd"), GetNull(portalId), GetNull(abbreviation), GetNull(description), GetNull(defaultType)).ToString();
	}
	
	public override void UpdateContactTypes(int contactType, int portalId, string abbreviation, string description, bool defaultType)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("ContactTypesUpdate"), contactType, GetNull(portalId), GetNull(abbreviation), GetNull(description), GetNull(defaultType));
	}

	public override void DeleteContactTypes(int contactType)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("ContactTypesDelete"), contactType);
	}

	#endregion
	#region "Divisions Methods"

	public override IDataReader GetDivisions(string division)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("DivisionsGet"), division);
	}
	
    public override IDataReader ListDivisions()
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("DivisionsList") );
	}
	
    public override void AddDivisions(int portalId, string description, int priority, bool overall, bool masters)
	{
		SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("DivisionsAdd"), GetNull(portalId), GetNull(description), GetNull(priority), GetNull(overall), GetNull(masters)).ToString();
	}
	
	public override void UpdateDivisions(string division, int portalId, string description, int priority, bool overall, bool masters)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("DivisionsUpdate"), division, GetNull(portalId), GetNull(description), GetNull(priority), GetNull(overall), GetNull(masters));
	}

	public override void DeleteDivisions(string division)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("DivisionsDelete"), division);
	}

	#endregion
	#region "DoNotEmail Methods"

	public override IDataReader GetDoNotEmail(string emailAddress)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("DoNotEmailGet"), emailAddress);
	}
	
    public override IDataReader ListDoNotEmail()
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("DoNotEmailList") );
	}
	
    public override void AddDoNotEmail(int portalId, string movedBy, string optOutReason)
	{
		SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("DoNotEmailAdd"), GetNull(portalId), GetNull(movedBy), GetNull(optOutReason)).ToString();
	}
	
	public override void UpdateDoNotEmail(string emailAddress, int portalId, string movedBy, string optOutReason)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("DoNotEmailUpdate"), emailAddress, GetNull(portalId), GetNull(movedBy), GetNull(optOutReason));
	}

	public override void DeleteDoNotEmail(string emailAddress)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("DoNotEmailDelete"), emailAddress);
	}

	#endregion
	#region "Entrants Methods"

	public override IDataReader GetEntrants(int runnerId)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("EntrantsGet"), runnerId);
	}
	
    public override IDataReader ListEntrants()
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("EntrantsList") );
	}
	
    public override IDataReader GetEntrantsByContactTypes(int contactType)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("EntrantsGetByContactTypes"), contactType);
	}
	
    public override IDataReader GetEntrantsByEntrants(int runnerId)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("EntrantsGetByEntrants"), runnerId);
	}
	
    public override void AddEntrants(int portalId, int contactType, string fullName, string firstName, string middleName, string lastName, string suffix, string nickname, DateTime birthDate, short age, short weight, string sex, string tShirt, string sweats, string shorts, string shoes, string shoeStyle, string club, string address, string city, string state, string zIP, string country, string homePhone, string mobilePhone, string mobileCarrier, string eMail, bool plainText, string uSATFNumber, string memberType, int memberNumber, string memberCode, DateTime dateJoined, DateTime lastRenewal, DateTime paidThru, bool waiver, int primaryNo, bool survivor, DateTime mailingExpiration, string memo, bool marked, string keywords, string company, string title, string workAddress, string workCity, string workState, string workZip, string workCountry, string workPhone, string workEmail, int activeId, bool invalidEmail, bool resultsEmailOnly, bool invalidAddress, string userName, string password, DateTime insertionDate, DateTime updateDate)
	{
		SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("EntrantsAdd"), GetNull(portalId), GetNull(contactType), GetNull(fullName), GetNull(firstName), GetNull(middleName), GetNull(lastName), GetNull(suffix), GetNull(nickname), GetNull(birthDate), GetNull(age), GetNull(weight), GetNull(sex), GetNull(tShirt), GetNull(sweats), GetNull(shorts), GetNull(shoes), GetNull(shoeStyle), GetNull(club), GetNull(address), GetNull(city), GetNull(state), GetNull(zIP), GetNull(country), GetNull(homePhone), GetNull(mobilePhone), GetNull(mobileCarrier), GetNull(eMail), GetNull(plainText), GetNull(uSATFNumber), GetNull(memberType), GetNull(memberNumber), GetNull(memberCode), GetNull(dateJoined), GetNull(lastRenewal), GetNull(paidThru), GetNull(waiver), GetNull(primaryNo), GetNull(survivor), GetNull(mailingExpiration), GetNull(memo), GetNull(marked), GetNull(keywords), GetNull(company), GetNull(title), GetNull(workAddress), GetNull(workCity), GetNull(workState), GetNull(workZip), GetNull(workCountry), GetNull(workPhone), GetNull(workEmail), GetNull(activeId), GetNull(invalidEmail), GetNull(resultsEmailOnly), GetNull(invalidAddress), GetNull(userName), GetNull(password), GetNull(insertionDate), GetNull(updateDate)).ToString();
	}
	
	public override void UpdateEntrants(int runnerId, int portalId, int contactType, string fullName, string firstName, string middleName, string lastName, string suffix, string nickname, DateTime birthDate, short age, short weight, string sex, string tShirt, string sweats, string shorts, string shoes, string shoeStyle, string club, string address, string city, string state, string zIP, string country, string homePhone, string mobilePhone, string mobileCarrier, string eMail, bool plainText, string uSATFNumber, string memberType, int memberNumber, string memberCode, DateTime dateJoined, DateTime lastRenewal, DateTime paidThru, bool waiver, int primaryNo, bool survivor, DateTime mailingExpiration, string memo, bool marked, string keywords, string company, string title, string workAddress, string workCity, string workState, string workZip, string workCountry, string workPhone, string workEmail, int activeId, bool invalidEmail, bool resultsEmailOnly, bool invalidAddress, string userName, string password, DateTime insertionDate, DateTime updateDate)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("EntrantsUpdate"), runnerId, GetNull(portalId), GetNull(contactType), GetNull(fullName), GetNull(firstName), GetNull(middleName), GetNull(lastName), GetNull(suffix), GetNull(nickname), GetNull(birthDate), GetNull(age), GetNull(weight), GetNull(sex), GetNull(tShirt), GetNull(sweats), GetNull(shorts), GetNull(shoes), GetNull(shoeStyle), GetNull(club), GetNull(address), GetNull(city), GetNull(state), GetNull(zIP), GetNull(country), GetNull(homePhone), GetNull(mobilePhone), GetNull(mobileCarrier), GetNull(eMail), GetNull(plainText), GetNull(uSATFNumber), GetNull(memberType), GetNull(memberNumber), GetNull(memberCode), GetNull(dateJoined), GetNull(lastRenewal), GetNull(paidThru), GetNull(waiver), GetNull(primaryNo), GetNull(survivor), GetNull(mailingExpiration), GetNull(memo), GetNull(marked), GetNull(keywords), GetNull(company), GetNull(title), GetNull(workAddress), GetNull(workCity), GetNull(workState), GetNull(workZip), GetNull(workCountry), GetNull(workPhone), GetNull(workEmail), GetNull(activeId), GetNull(invalidEmail), GetNull(resultsEmailOnly), GetNull(invalidAddress), GetNull(userName), GetNull(password), GetNull(insertionDate), GetNull(updateDate));
	}

	public override void DeleteEntrants(int runnerId)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("EntrantsDelete"), runnerId);
	}

	#endregion
	#region "Events Methods"

	public override IDataReader GetEvents(int runnerId, int raceId)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("EventsGet"), runnerId, raceId);
	}
	
    public override IDataReader ListEvents()
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("EventsList") );
	}
	
    public override IDataReader GetEventsByEntrants(int runnerId)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("EventsGetByEntrants"), runnerId);
	}
	
    public override IDataReader GetEventsByRaces(int raceId)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("EventsGetByRaces"), raceId);
	}
	
    public override void AddEvents(int portalId, int bibNumber, string division, short divisionPlace, short divisionTotal, int sexPlace, int sexTotal, DateTime gunTime, DateTime netTime, DateTime pace, int place, DateTime seed, string team, decimal fee, DateTime entryDate, bool clydesdale, bool survivor, bool nonCompetitive, bool uSATF, short age, string sex, short weight, short heat, DateTime waveOffset, DateTime wAVATime, float performancePercent, short seriesPlace, short seriesAge, string seriesDivision, short seriesPoints, bool confirmation, bool results, string chipId, string awardDivision, short awardPlace, short awardPriority)
	{
		SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("EventsAdd"), GetNull(portalId), GetNull(bibNumber), GetNull(division), GetNull(divisionPlace), GetNull(divisionTotal), GetNull(sexPlace), GetNull(sexTotal), GetNull(gunTime), GetNull(netTime), GetNull(pace), GetNull(place), GetNull(seed), GetNull(team), GetNull(fee), GetNull(entryDate), GetNull(clydesdale), GetNull(survivor), GetNull(nonCompetitive), GetNull(uSATF), GetNull(age), GetNull(sex), GetNull(weight), GetNull(heat), GetNull(waveOffset), GetNull(wAVATime), GetNull(performancePercent), GetNull(seriesPlace), GetNull(seriesAge), GetNull(seriesDivision), GetNull(seriesPoints), GetNull(confirmation), GetNull(results), GetNull(chipId), GetNull(awardDivision), GetNull(awardPlace), GetNull(awardPriority)).ToString();
	}
	
	public override void UpdateEvents(int runnerId, int raceId, int portalId, int bibNumber, string division, short divisionPlace, short divisionTotal, int sexPlace, int sexTotal, DateTime gunTime, DateTime netTime, DateTime pace, int place, DateTime seed, string team, decimal fee, DateTime entryDate, bool clydesdale, bool survivor, bool nonCompetitive, bool uSATF, short age, string sex, short weight, short heat, DateTime waveOffset, DateTime wAVATime, float performancePercent, short seriesPlace, short seriesAge, string seriesDivision, short seriesPoints, bool confirmation, bool results, string chipId, string awardDivision, short awardPlace, short awardPriority)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("EventsUpdate"), runnerId, raceId, GetNull(portalId), GetNull(bibNumber), GetNull(division), GetNull(divisionPlace), GetNull(divisionTotal), GetNull(sexPlace), GetNull(sexTotal), GetNull(gunTime), GetNull(netTime), GetNull(pace), GetNull(place), GetNull(seed), GetNull(team), GetNull(fee), GetNull(entryDate), GetNull(clydesdale), GetNull(survivor), GetNull(nonCompetitive), GetNull(uSATF), GetNull(age), GetNull(sex), GetNull(weight), GetNull(heat), GetNull(waveOffset), GetNull(wAVATime), GetNull(performancePercent), GetNull(seriesPlace), GetNull(seriesAge), GetNull(seriesDivision), GetNull(seriesPoints), GetNull(confirmation), GetNull(results), GetNull(chipId), GetNull(awardDivision), GetNull(awardPlace), GetNull(awardPriority));
	}

	public override void DeleteEvents(int runnerId, int raceId)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("EventsDelete"), runnerId, raceId);
	}

	#endregion
	#region "EventTypes Methods"

	public override IDataReader GetEventTypes(int eventTypeId)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("EventTypesGet"), eventTypeId);
	}
	
    public override IDataReader ListEventTypes()
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("EventTypesList") );
	}
	
    public override void AddEventTypes(int portalId, string eventTypeName, short defaultType)
	{
		SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("EventTypesAdd"), GetNull(portalId), GetNull(eventTypeName), GetNull(defaultType)).ToString();
	}
	
	public override void UpdateEventTypes(int eventTypeId, int portalId, string eventTypeName, short defaultType)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("EventTypesUpdate"), eventTypeId, GetNull(portalId), GetNull(eventTypeName), GetNull(defaultType));
	}

	public override void DeleteEventTypes(int eventTypeId)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("EventTypesDelete"), eventTypeId);
	}

	#endregion
	#region "MemberTypes Methods"

	public override IDataReader GetMemberTypes(int memberTypeID)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("MemberTypesGet"), memberTypeID);
	}
	
    public override IDataReader ListMemberTypes()
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("MemberTypesList") );
	}
	
    public override void AddMemberTypes(int portalId, string memberType, decimal memberDues)
	{
		SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("MemberTypesAdd"), GetNull(portalId), memberType, GetNull(memberDues)).ToString();
	}
	
	public override void UpdateMemberTypes(int memberTypeID, int portalId, string memberType, decimal memberDues)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("MemberTypesUpdate"), memberTypeID, GetNull(portalId), memberType, GetNull(memberDues));
	}

	public override void DeleteMemberTypes(int memberTypeID)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("MemberTypesDelete"), memberTypeID);
	}

	#endregion
	#region "Organization Methods"

	public override IDataReader GetOrganization(int orgID)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("OrganizationGet"), orgID);
	}
	
    public override IDataReader ListOrganization()
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("OrganizationList") );
	}
	
    public override void AddOrganization(int portalId, string clubName, string address, string city, string stateOrProvince, string postalCode, string country, string defaultInvoiceDescription, string phoneNumber, string faxNumber, string eMail, string nickname, short mailingExpirePeriod, DateTime lastEmail, DateTime lastLetters)
	{
		SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("OrganizationAdd"), GetNull(portalId), GetNull(clubName), GetNull(address), GetNull(city), GetNull(stateOrProvince), GetNull(postalCode), GetNull(country), GetNull(defaultInvoiceDescription), GetNull(phoneNumber), GetNull(faxNumber), GetNull(eMail), GetNull(nickname), GetNull(mailingExpirePeriod), GetNull(lastEmail), GetNull(lastLetters)).ToString();
	}
	
	public override void UpdateOrganization(int orgID, int portalId, string clubName, string address, string city, string stateOrProvince, string postalCode, string country, string defaultInvoiceDescription, string phoneNumber, string faxNumber, string eMail, string nickname, short mailingExpirePeriod, DateTime lastEmail, DateTime lastLetters)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("OrganizationUpdate"), orgID, GetNull(portalId), GetNull(clubName), GetNull(address), GetNull(city), GetNull(stateOrProvince), GetNull(postalCode), GetNull(country), GetNull(defaultInvoiceDescription), GetNull(phoneNumber), GetNull(faxNumber), GetNull(eMail), GetNull(nickname), GetNull(mailingExpirePeriod), GetNull(lastEmail), GetNull(lastLetters));
	}

	public override void DeleteOrganization(int orgID)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("OrganizationDelete"), orgID);
	}

	#endregion
	#region "RaceDivisions Methods"

	public override IDataReader GetRaceDivisions(int raceId, int priority)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("RaceDivisionsGet"), raceId, priority);
	}
	
    public override IDataReader ListRaceDivisions()
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("RaceDivisionsList") );
	}
	
    public override IDataReader GetRaceDivisionsByRaces(int raceId)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("RaceDivisionsGetByRaces"), raceId);
	}
	
    public override void AddRaceDivisions(int portalId, string sex, short startAge, int endAge, int startWeight, int endWeight, bool survivor, string division, short depth, bool overall, bool masters, bool uSATF)
	{
		SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("RaceDivisionsAdd"), GetNull(portalId), GetNull(sex), GetNull(startAge), GetNull(endAge), GetNull(startWeight), GetNull(endWeight), GetNull(survivor), GetNull(division), GetNull(depth), GetNull(overall), GetNull(masters), GetNull(uSATF)).ToString();
	}
	
	public override void UpdateRaceDivisions(int raceId, int priority, int portalId, string sex, short startAge, int endAge, int startWeight, int endWeight, bool survivor, string division, short depth, bool overall, bool masters, bool uSATF)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("RaceDivisionsUpdate"), raceId, priority, GetNull(portalId), GetNull(sex), GetNull(startAge), GetNull(endAge), GetNull(startWeight), GetNull(endWeight), GetNull(survivor), GetNull(division), GetNull(depth), GetNull(overall), GetNull(masters), GetNull(uSATF));
	}

	public override void DeleteRaceDivisions(int raceId, int priority)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("RaceDivisionsDelete"), raceId, priority);
	}

	#endregion
	#region "Races Methods"

	public override IDataReader GetRaces(int raceId)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("RacesGet"), raceId);
	}
	
    public override IDataReader ListRaces()
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("RacesList") );
	}
	
    public override IDataReader GetRacesByEventTypes(int eventTypeId)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("RacesGetByEventTypes"), eventTypeId);
	}
	
    public override void AddRaces(int portalId, int eventType, string raceName, DateTime raceDate, float raceDistance, string raceLocation, string raceCity, string raceState, string raceCountry, string raceLogo, string uSATFNumber, int rodaleEventId, int activeEventId, DateTime preregistrationDate, decimal preregistrationFee, decimal raceDayFee, string registrationURL, string registrationLogo, string description, string emailText, string resultsText, string resultsURL, short annual, string keyword, double lastBibNumber, string contactName, string contactAddress1, string contactAddress2, string contactCity, string contactState, string contactZIP, string contactPhoneNumber, string contactFAX, string contactEMail, string wEBSite, int relatedRace, int organization, string volunteerContact, string volunteerPhone, string volunteerEmail, DateTime displayStartDate, DateTime displayEndDate, DateTime insertionDate, DateTime modificationDate)
	{
		SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("RacesAdd"), GetNull(portalId), GetNull(eventType), GetNull(raceName), GetNull(raceDate), GetNull(raceDistance), GetNull(raceLocation), GetNull(raceCity), GetNull(raceState), GetNull(raceCountry), GetNull(raceLogo), GetNull(uSATFNumber), GetNull(rodaleEventId), GetNull(activeEventId), GetNull(preregistrationDate), GetNull(preregistrationFee), GetNull(raceDayFee), GetNull(registrationURL), GetNull(registrationLogo), GetNull(description), GetNull(emailText), GetNull(resultsText), GetNull(resultsURL), GetNull(annual), GetNull(keyword), GetNull(lastBibNumber), GetNull(contactName), GetNull(contactAddress1), GetNull(contactAddress2), GetNull(contactCity), GetNull(contactState), GetNull(contactZIP), GetNull(contactPhoneNumber), GetNull(contactFAX), GetNull(contactEMail), GetNull(wEBSite), GetNull(relatedRace), GetNull(organization), GetNull(volunteerContact), GetNull(volunteerPhone), GetNull(volunteerEmail), GetNull(displayStartDate), GetNull(displayEndDate), GetNull(insertionDate), GetNull(modificationDate)).ToString();
	}
	
	public override void UpdateRaces(int raceId, int portalId, int eventType, string raceName, DateTime raceDate, float raceDistance, string raceLocation, string raceCity, string raceState, string raceCountry, string raceLogo, string uSATFNumber, int rodaleEventId, int activeEventId, DateTime preregistrationDate, decimal preregistrationFee, decimal raceDayFee, string registrationURL, string registrationLogo, string description, string emailText, string resultsText, string resultsURL, short annual, string keyword, double lastBibNumber, string contactName, string contactAddress1, string contactAddress2, string contactCity, string contactState, string contactZIP, string contactPhoneNumber, string contactFAX, string contactEMail, string wEBSite, int relatedRace, int organization, string volunteerContact, string volunteerPhone, string volunteerEmail, DateTime displayStartDate, DateTime displayEndDate, DateTime insertionDate, DateTime modificationDate)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("RacesUpdate"), raceId, GetNull(portalId), GetNull(eventType), GetNull(raceName), GetNull(raceDate), GetNull(raceDistance), GetNull(raceLocation), GetNull(raceCity), GetNull(raceState), GetNull(raceCountry), GetNull(raceLogo), GetNull(uSATFNumber), GetNull(rodaleEventId), GetNull(activeEventId), GetNull(preregistrationDate), GetNull(preregistrationFee), GetNull(raceDayFee), GetNull(registrationURL), GetNull(registrationLogo), GetNull(description), GetNull(emailText), GetNull(resultsText), GetNull(resultsURL), GetNull(annual), GetNull(keyword), GetNull(lastBibNumber), GetNull(contactName), GetNull(contactAddress1), GetNull(contactAddress2), GetNull(contactCity), GetNull(contactState), GetNull(contactZIP), GetNull(contactPhoneNumber), GetNull(contactFAX), GetNull(contactEMail), GetNull(wEBSite), GetNull(relatedRace), GetNull(organization), GetNull(volunteerContact), GetNull(volunteerPhone), GetNull(volunteerEmail), GetNull(displayStartDate), GetNull(displayEndDate), GetNull(insertionDate), GetNull(modificationDate));
	}

	public override void DeleteRaces(int raceId)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("RacesDelete"), raceId);
	}

	#endregion
	#region "ZIP Methods"

	public override IDataReader GetZIP(string fiveDigitZIP, short sequence)
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("ZIPGet"), fiveDigitZIP, sequence);
	}
	
    public override IDataReader ListZIP()
	{
		return SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("ZIPList") );
	}
	
    public override void AddZIP(int portalId, string city, string state, string county, string country)
	{
		SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("ZIPAdd"), GetNull(portalId), GetNull(city), GetNull(state), GetNull(county), GetNull(country)).ToString();
	}
	
	public override void UpdateZIP(string fiveDigitZIP, short sequence, int portalId, string city, string state, string county, string country)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("ZIPUpdate"), fiveDigitZIP, sequence, GetNull(portalId), GetNull(city), GetNull(state), GetNull(county), GetNull(country));
	}

	public override void DeleteZIP(string fiveDigitZIP, short sequence)
	{
		SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("ZIPDelete"), fiveDigitZIP, sequence);
	}

	#endregion
	}
}
