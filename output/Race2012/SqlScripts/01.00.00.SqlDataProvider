/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/



/* =====================================================================================
 *   TABLE: tblBounces
 * ===================================================================================== */


/** Create Table **/
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}tblBounces]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}tblBounces]
		(
			[PortalId] Int  ,
			[EMail] NVarChar NOT NULL  
		)
		

		
		ALTER TABLE {databaseOwner}[{objectQualifier}tblBounces] 
			ADD CONSTRAINT [aaaaatblBOUNCES_PK] PRIMARY KEY CLUSTERED  (  [EMail] )
		
		

		
		-- Uncomment following line to create index on ModuleID
		-- CREATE NONCLUSTERED INDEX [IX_{objectQualifier}YourCompany_test2] ON {databaseOwner}[{objectQualifier}YourCompany_test2] ([ModuleID])




		/******************************** Update Default Values of columns  *****************************/
	
	
		
		/********************************** Update Description of columns  *******************************/

	END
GO


/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblBouncesGet    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblBouncesGet') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblBouncesGet
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblBouncesList    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblBouncesList') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblBouncesList
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblBouncesAdd    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblBouncesAdd') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblBouncesAdd
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblBouncesUpdate    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblBouncesUpdate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblBouncesUpdate
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblBouncesDelete    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblBouncesDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblBouncesDelete
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblBouncesGetPage    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblBouncesGetPage') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblBouncesGetPage
GO
	

/* -------------------------------------------------------------------------------------
/   tblBouncesGet
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblBouncesGet
	@EMail nvarchar(32)
	
AS

SELECT
	[{objectQualifier}tblBounces].[PortalId],
	[{objectQualifier}tblBounces].[EMail]
FROM [{objectQualifier}tblBounces]
WHERE
	[{objectQualifier}tblBounces].[EMail] = @EMail
	
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblBouncesList 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblBouncesList
  
 @PortalId int 
AS

SELECT
	[{objectQualifier}tblBounces].[PortalId],
	[{objectQualifier}tblBounces].[EMail]
FROM [{objectQualifier}tblBounces]

 WHERE [{objectQualifier}tblBounces].[PortalId]=@PortalId 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


/* -------------------------------------------------------------------------------------
/   tblBouncesAdd
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblBouncesAdd
	@PortalId int
	,@EMail nvarchar(32)
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

-- THIS STORED PROCEDURE NEEDS TO BE MANUALLY COMPLETED
-- MULITPLE PRIMARY KEY MEMBERS OR NON-GUID/INT PRIMARY KEY

INSERT INTO {objectQualifier}tblBounces (
	[PortalId]
	,[EMail]
) VALUES (
	@PortalId
	,@EMail
)

select SCOPE_IDENTITY()
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblBouncesUpdate
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}tblBouncesUpdate
	@EMail nvarchar(32), 
	@PortalId int 

AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

UPDATE {objectQualifier}tblBounces SET
	   [PortalId] = @PortalId
WHERE
    
	[{objectQualifier}tblBounces].[EMail] = @EMail
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblBouncesDelete
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}tblBouncesDelete
	@EMail nvarchar(32)
    
	AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

DELETE FROM {objectQualifier}tblBounces
WHERE 
	[{objectQualifier}tblBounces].[EMail] = @EMail
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblBouncesGetPage
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblBouncesGetPage
	@SortCol NVARCHAR(30),
	@RequiredPage INT,
	@RecordsPerPage INT,
	@TotalRows INT OUTPUT
AS
DECLARE @tabTempSort TABLE(
	RowNum INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		EMail nvarchar(32)
)
	
INSERT @tabTempSort 
(
	EMail
)
SELECT	
	EMail
FROM 
	{objectQualifier}tblBounces
ORDER BY 
	CASE WHEN @SortCol = 'PortalId_D'  THEN PortalId else null END desc,
	CASE WHEN @SortCol = 'PortalId'  THEN PortalId else null END asc,
 	CASE WHEN @SortCol = 'EMail_D'  THEN EMail else null END desc,
	CASE WHEN @SortCol = 'EMail'  THEN EMail else null END asc

SELECT 
	t1.PortalId,
 	t1.EMail
FROM 
	{objectQualifier}tblBounces t1
INNER JOIN 
	@tabTempSort t2 
ON
	t1.EMail = t2.EMail
WHERE 
	RowNum BETWEEN (@RequiredPage - 1) * @RecordsPerPage + 1 
	AND @RequiredPage * @RecordsPerPage 

SELECT @TotalRows = COUNT(*) FROM @tabTempSort
GO	

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* =====================================================================================
 *   TABLE: tblContactTypes
 * ===================================================================================== */


/** Create Table **/
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}tblContactTypes]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}tblContactTypes]
		(
			[PortalId] Int  ,
			[ContactType] Int NOT NULL  ,
			[Abbreviation] NVarChar  ,
			[Description] NVarChar  ,
			[DefaultType] Bit  
		)
		

		
		ALTER TABLE {databaseOwner}[{objectQualifier}tblContactTypes] 
			ADD CONSTRAINT [aaaaaClubContactTypes_PK] PRIMARY KEY CLUSTERED  (  [ContactType] )
		
		

		
		-- Uncomment following line to create index on ModuleID
		-- CREATE NONCLUSTERED INDEX [IX_{objectQualifier}YourCompany_test2] ON {databaseOwner}[{objectQualifier}YourCompany_test2] ([ModuleID])




		/******************************** Update Default Values of columns  *****************************/
		ALTER TABLE {databaseOwner}[{objectQualifier}tblContactTypes] WITH NOCHECK ADD 	
			CONSTRAINT [DF_tblContactTypes_PortalId] DEFAULT ((0)) FOR [PortalId],
			CONSTRAINT [DF_tblContactTypes_ContactType] DEFAULT ((0)) FOR [ContactType],
			CONSTRAINT [DF_tblContactTypes_DefaultType] DEFAULT ((0)) FOR [DefaultType]
		
	
	
		
		/********************************** Update Description of columns  *******************************/

	END
GO


/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblContactTypesGet    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblContactTypesGet') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblContactTypesGet
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblContactTypesList    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblContactTypesList') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblContactTypesList
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblContactTypesAdd    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblContactTypesAdd') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblContactTypesAdd
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblContactTypesUpdate    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblContactTypesUpdate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblContactTypesUpdate
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblContactTypesDelete    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblContactTypesDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblContactTypesDelete
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblContactTypesGetPage    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblContactTypesGetPage') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblContactTypesGetPage
GO
	

/* -------------------------------------------------------------------------------------
/   tblContactTypesGet
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblContactTypesGet
	@ContactType int
	
AS

SELECT
	[{objectQualifier}tblContactTypes].[PortalId],
	[{objectQualifier}tblContactTypes].[ContactType],
	[{objectQualifier}tblContactTypes].[Abbreviation],
	[{objectQualifier}tblContactTypes].[Description],
	[{objectQualifier}tblContactTypes].[DefaultType]
FROM [{objectQualifier}tblContactTypes]
WHERE
	[{objectQualifier}tblContactTypes].[ContactType] = @ContactType
	
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblContactTypesList 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblContactTypesList
  
 @PortalId int 
AS

SELECT
	[{objectQualifier}tblContactTypes].[PortalId],
	[{objectQualifier}tblContactTypes].[ContactType],
	[{objectQualifier}tblContactTypes].[Abbreviation],
	[{objectQualifier}tblContactTypes].[Description],
	[{objectQualifier}tblContactTypes].[DefaultType]
FROM [{objectQualifier}tblContactTypes]

 WHERE [{objectQualifier}tblContactTypes].[PortalId]=@PortalId 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


/* -------------------------------------------------------------------------------------
/   tblContactTypesAdd
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblContactTypesAdd
	@PortalId int
	,@Abbreviation nvarchar(2)
	,@Description nvarchar(50)
	,@DefaultType bit
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

INSERT INTO {objectQualifier}tblContactTypes (
	[PortalId]
	,[Abbreviation]
	,[Description]
	,[DefaultType]
) VALUES (
	@PortalId
	,@Abbreviation
	,@Description
	,@DefaultType
)

select SCOPE_IDENTITY()
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblContactTypesUpdate
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}tblContactTypesUpdate
	@ContactType int, 
	@PortalId int, 
	@Abbreviation nvarchar(2), 
	@Description nvarchar(50), 
	@DefaultType bit 

AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

UPDATE {objectQualifier}tblContactTypes SET
	   [PortalId] = @PortalId
	   ,[Abbreviation] = @Abbreviation
	   ,[Description] = @Description
	   ,[DefaultType] = @DefaultType
WHERE
    
	[{objectQualifier}tblContactTypes].[ContactType] = @ContactType
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblContactTypesDelete
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}tblContactTypesDelete
	@ContactType int
    
	AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

DELETE FROM {objectQualifier}tblContactTypes
WHERE 
	[{objectQualifier}tblContactTypes].[ContactType] = @ContactType
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblContactTypesGetPage
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblContactTypesGetPage
	@SortCol NVARCHAR(30),
	@RequiredPage INT,
	@RecordsPerPage INT,
	@TotalRows INT OUTPUT
AS
DECLARE @tabTempSort TABLE(
	RowNum INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		ContactType int
)
	
INSERT @tabTempSort 
(
	ContactType
)
SELECT	
	ContactType
FROM 
	{objectQualifier}tblContactTypes
ORDER BY 
	CASE WHEN @SortCol = 'PortalId_D'  THEN PortalId else null END desc,
	CASE WHEN @SortCol = 'PortalId'  THEN PortalId else null END asc,
 	CASE WHEN @SortCol = 'ContactType_D'  THEN ContactType else null END desc,
	CASE WHEN @SortCol = 'ContactType'  THEN ContactType else null END asc,
 	CASE WHEN @SortCol = 'Abbreviation_D'  THEN Abbreviation else null END desc,
	CASE WHEN @SortCol = 'Abbreviation'  THEN Abbreviation else null END asc,
 	CASE WHEN @SortCol = 'Description_D'  THEN Description else null END desc,
	CASE WHEN @SortCol = 'Description'  THEN Description else null END asc,
 	CASE WHEN @SortCol = 'DefaultType_D'  THEN DefaultType else null END desc,
	CASE WHEN @SortCol = 'DefaultType'  THEN DefaultType else null END asc

SELECT 
	t1.PortalId,
 	t1.ContactType,
 	t1.Abbreviation,
 	t1.Description,
 	t1.DefaultType
FROM 
	{objectQualifier}tblContactTypes t1
INNER JOIN 
	@tabTempSort t2 
ON
	t1.ContactType = t2.ContactType
WHERE 
	RowNum BETWEEN (@RequiredPage - 1) * @RecordsPerPage + 1 
	AND @RequiredPage * @RecordsPerPage 

SELECT @TotalRows = COUNT(*) FROM @tabTempSort
GO	

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* =====================================================================================
 *   TABLE: tblDivisions
 * ===================================================================================== */


/** Create Table **/
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}tblDivisions]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}tblDivisions]
		(
			[PortalId] Int  ,
			[Division] NVarChar NOT NULL  ,
			[Description] NVarChar  ,
			[Priority] Int  ,
			[Overall] Bit  ,
			[Masters] Bit  
		)
		

		
		ALTER TABLE {databaseOwner}[{objectQualifier}tblDivisions] 
			ADD CONSTRAINT [aaaaatblDivisions_PK] PRIMARY KEY CLUSTERED  (  [Division] )
		
		

		
		-- Uncomment following line to create index on ModuleID
		-- CREATE NONCLUSTERED INDEX [IX_{objectQualifier}YourCompany_test2] ON {databaseOwner}[{objectQualifier}YourCompany_test2] ([ModuleID])




		/******************************** Update Default Values of columns  *****************************/
		ALTER TABLE {databaseOwner}[{objectQualifier}tblDivisions] WITH NOCHECK ADD 	
			CONSTRAINT [DF_tblDivisions_Priority] DEFAULT ((0)) FOR [Priority],
			CONSTRAINT [DF_tblDivisions_Overall] DEFAULT ((0)) FOR [Overall],
			CONSTRAINT [DF_tblDivisions_Masters] DEFAULT ((0)) FOR [Masters]
		
	
	
		
		/********************************** Update Description of columns  *******************************/

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblDivisions]', N'COLUMN',N'Division'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblDivisions]', @level2type=N'COLUMN',@level2name=N'Division'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblDivisions]', N'COLUMN',N'Description'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblDivisions]', @level2type=N'COLUMN',@level2name=N'Description'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblDivisions]', N'COLUMN',N'Priority'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Default Priority' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblDivisions]', @level2type=N'COLUMN',@level2name=N'Priority'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblDivisions]', N'COLUMN',N'Overall'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Open or Overall category' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblDivisions]', @level2type=N'COLUMN',@level2name=N'Overall'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblDivisions]', N'COLUMN',N'Masters'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Masters Category' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblDivisions]', @level2type=N'COLUMN',@level2name=N'Masters'
        GO

	END
GO


/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblDivisionsGet    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblDivisionsGet') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblDivisionsGet
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblDivisionsList    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblDivisionsList') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblDivisionsList
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblDivisionsAdd    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblDivisionsAdd') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblDivisionsAdd
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblDivisionsUpdate    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblDivisionsUpdate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblDivisionsUpdate
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblDivisionsDelete    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblDivisionsDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblDivisionsDelete
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblDivisionsGetPage    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblDivisionsGetPage') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblDivisionsGetPage
GO
	

/* -------------------------------------------------------------------------------------
/   tblDivisionsGet
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblDivisionsGet
	@Division nvarchar(6)
	
AS

SELECT
	[{objectQualifier}tblDivisions].[PortalId],
	[{objectQualifier}tblDivisions].[Division],
	[{objectQualifier}tblDivisions].[Description],
	[{objectQualifier}tblDivisions].[Priority],
	[{objectQualifier}tblDivisions].[Overall],
	[{objectQualifier}tblDivisions].[Masters]
FROM [{objectQualifier}tblDivisions]
WHERE
	[{objectQualifier}tblDivisions].[Division] = @Division
	
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblDivisionsList 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblDivisionsList
  
 @PortalId int 
AS

SELECT
	[{objectQualifier}tblDivisions].[PortalId],
	[{objectQualifier}tblDivisions].[Division],
	[{objectQualifier}tblDivisions].[Description],
	[{objectQualifier}tblDivisions].[Priority],
	[{objectQualifier}tblDivisions].[Overall],
	[{objectQualifier}tblDivisions].[Masters]
FROM [{objectQualifier}tblDivisions]

 WHERE [{objectQualifier}tblDivisions].[PortalId]=@PortalId 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


/* -------------------------------------------------------------------------------------
/   tblDivisionsAdd
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblDivisionsAdd
	@PortalId int
	,@Division nvarchar(6)
	,@Description nvarchar(50)
	,@Priority int
	,@Overall bit
	,@Masters bit
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

-- THIS STORED PROCEDURE NEEDS TO BE MANUALLY COMPLETED
-- MULITPLE PRIMARY KEY MEMBERS OR NON-GUID/INT PRIMARY KEY

INSERT INTO {objectQualifier}tblDivisions (
	[PortalId]
	,[Division]
	,[Description]
	,[Priority]
	,[Overall]
	,[Masters]
) VALUES (
	@PortalId
	,@Division
	,@Description
	,@Priority
	,@Overall
	,@Masters
)

select SCOPE_IDENTITY()
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblDivisionsUpdate
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}tblDivisionsUpdate
	@Division nvarchar(6), -- Code
	@PortalId int, 
	@Description nvarchar(50), -- Description
	@Priority int, -- Default Priority
	@Overall bit, -- Open or Overall category
	@Masters bit -- Masters Category

AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

UPDATE {objectQualifier}tblDivisions SET
	   [PortalId] = @PortalId
	   ,[Description] = @Description
	   ,[Priority] = @Priority
	   ,[Overall] = @Overall
	   ,[Masters] = @Masters
WHERE
    
	[{objectQualifier}tblDivisions].[Division] = @Division
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblDivisionsDelete
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}tblDivisionsDelete
	@Division nvarchar(6)
    
	AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

DELETE FROM {objectQualifier}tblDivisions
WHERE 
	[{objectQualifier}tblDivisions].[Division] = @Division
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblDivisionsGetPage
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblDivisionsGetPage
	@SortCol NVARCHAR(30),
	@RequiredPage INT,
	@RecordsPerPage INT,
	@TotalRows INT OUTPUT
AS
DECLARE @tabTempSort TABLE(
	RowNum INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		Division nvarchar(6)
)
	
INSERT @tabTempSort 
(
	Division
)
SELECT	
	Division
FROM 
	{objectQualifier}tblDivisions
ORDER BY 
	CASE WHEN @SortCol = 'PortalId_D'  THEN PortalId else null END desc,
	CASE WHEN @SortCol = 'PortalId'  THEN PortalId else null END asc,
 	CASE WHEN @SortCol = 'Division_D'  THEN Division else null END desc,
	CASE WHEN @SortCol = 'Division'  THEN Division else null END asc,
 	CASE WHEN @SortCol = 'Description_D'  THEN Description else null END desc,
	CASE WHEN @SortCol = 'Description'  THEN Description else null END asc,
 	CASE WHEN @SortCol = 'Priority_D'  THEN Priority else null END desc,
	CASE WHEN @SortCol = 'Priority'  THEN Priority else null END asc,
 	CASE WHEN @SortCol = 'Overall_D'  THEN Overall else null END desc,
	CASE WHEN @SortCol = 'Overall'  THEN Overall else null END asc,
 	CASE WHEN @SortCol = 'Masters_D'  THEN Masters else null END desc,
	CASE WHEN @SortCol = 'Masters'  THEN Masters else null END asc

SELECT 
	t1.PortalId,
 	t1.Division,
 	t1.Description,
 	t1.Priority,
 	t1.Overall,
 	t1.Masters
FROM 
	{objectQualifier}tblDivisions t1
INNER JOIN 
	@tabTempSort t2 
ON
	t1.Division = t2.Division
WHERE 
	RowNum BETWEEN (@RequiredPage - 1) * @RecordsPerPage + 1 
	AND @RequiredPage * @RecordsPerPage 

SELECT @TotalRows = COUNT(*) FROM @tabTempSort
GO	

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* =====================================================================================
 *   TABLE: tblDoNotEmail
 * ===================================================================================== */


/** Create Table **/
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}tblDoNotEmail]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}tblDoNotEmail]
		(
			[PortalId] Int  ,
			[EmailAddress] NVarChar NOT NULL  ,
			[MovedBy] NVarChar  ,
			[OptOutReason] NVarChar  
		)
		

		
		ALTER TABLE {databaseOwner}[{objectQualifier}tblDoNotEmail] 
			ADD CONSTRAINT [PK_tblDoNotEmail] PRIMARY KEY CLUSTERED  (  [EmailAddress] )
		
		

		
		-- Uncomment following line to create index on ModuleID
		-- CREATE NONCLUSTERED INDEX [IX_{objectQualifier}YourCompany_test2] ON {databaseOwner}[{objectQualifier}YourCompany_test2] ([ModuleID])




		/******************************** Update Default Values of columns  *****************************/
	
	
		
		/********************************** Update Description of columns  *******************************/

	END
GO


/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblDoNotEmailGet    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblDoNotEmailGet') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblDoNotEmailGet
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblDoNotEmailList    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblDoNotEmailList') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblDoNotEmailList
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblDoNotEmailAdd    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblDoNotEmailAdd') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblDoNotEmailAdd
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblDoNotEmailUpdate    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblDoNotEmailUpdate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblDoNotEmailUpdate
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblDoNotEmailDelete    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblDoNotEmailDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblDoNotEmailDelete
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblDoNotEmailGetPage    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblDoNotEmailGetPage') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblDoNotEmailGetPage
GO
	

/* -------------------------------------------------------------------------------------
/   tblDoNotEmailGet
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblDoNotEmailGet
	@EmailAddress nvarchar(255)
	
AS

SELECT
	[{objectQualifier}tblDoNotEmail].[PortalId],
	[{objectQualifier}tblDoNotEmail].[EmailAddress],
	[{objectQualifier}tblDoNotEmail].[MovedBy],
	[{objectQualifier}tblDoNotEmail].[OptOutReason]
FROM [{objectQualifier}tblDoNotEmail]
WHERE
	[{objectQualifier}tblDoNotEmail].[EmailAddress] = @EmailAddress
	
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblDoNotEmailList 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblDoNotEmailList
  
 @PortalId int 
AS

SELECT
	[{objectQualifier}tblDoNotEmail].[PortalId],
	[{objectQualifier}tblDoNotEmail].[EmailAddress],
	[{objectQualifier}tblDoNotEmail].[MovedBy],
	[{objectQualifier}tblDoNotEmail].[OptOutReason]
FROM [{objectQualifier}tblDoNotEmail]

 WHERE [{objectQualifier}tblDoNotEmail].[PortalId]=@PortalId 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


/* -------------------------------------------------------------------------------------
/   tblDoNotEmailAdd
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblDoNotEmailAdd
	@PortalId int
	,@EmailAddress nvarchar(255)
	,@MovedBy nvarchar(255)
	,@OptOutReason nvarchar(255)
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

-- THIS STORED PROCEDURE NEEDS TO BE MANUALLY COMPLETED
-- MULITPLE PRIMARY KEY MEMBERS OR NON-GUID/INT PRIMARY KEY

INSERT INTO {objectQualifier}tblDoNotEmail (
	[PortalId]
	,[EmailAddress]
	,[MovedBy]
	,[OptOutReason]
) VALUES (
	@PortalId
	,@EmailAddress
	,@MovedBy
	,@OptOutReason
)

select SCOPE_IDENTITY()
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblDoNotEmailUpdate
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}tblDoNotEmailUpdate
	@EmailAddress nvarchar(255), 
	@PortalId int, 
	@MovedBy nvarchar(255), 
	@OptOutReason nvarchar(255) 

AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

UPDATE {objectQualifier}tblDoNotEmail SET
	   [PortalId] = @PortalId
	   ,[MovedBy] = @MovedBy
	   ,[OptOutReason] = @OptOutReason
WHERE
    
	[{objectQualifier}tblDoNotEmail].[EmailAddress] = @EmailAddress
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblDoNotEmailDelete
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}tblDoNotEmailDelete
	@EmailAddress nvarchar(255)
    
	AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

DELETE FROM {objectQualifier}tblDoNotEmail
WHERE 
	[{objectQualifier}tblDoNotEmail].[EmailAddress] = @EmailAddress
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblDoNotEmailGetPage
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblDoNotEmailGetPage
	@SortCol NVARCHAR(30),
	@RequiredPage INT,
	@RecordsPerPage INT,
	@TotalRows INT OUTPUT
AS
DECLARE @tabTempSort TABLE(
	RowNum INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		EmailAddress nvarchar(255)
)
	
INSERT @tabTempSort 
(
	EmailAddress
)
SELECT	
	EmailAddress
FROM 
	{objectQualifier}tblDoNotEmail
ORDER BY 
	CASE WHEN @SortCol = 'PortalId_D'  THEN PortalId else null END desc,
	CASE WHEN @SortCol = 'PortalId'  THEN PortalId else null END asc,
 	CASE WHEN @SortCol = 'EmailAddress_D'  THEN EmailAddress else null END desc,
	CASE WHEN @SortCol = 'EmailAddress'  THEN EmailAddress else null END asc,
 	CASE WHEN @SortCol = 'MovedBy_D'  THEN MovedBy else null END desc,
	CASE WHEN @SortCol = 'MovedBy'  THEN MovedBy else null END asc,
 	CASE WHEN @SortCol = 'OptOutReason_D'  THEN OptOutReason else null END desc,
	CASE WHEN @SortCol = 'OptOutReason'  THEN OptOutReason else null END asc

SELECT 
	t1.PortalId,
 	t1.EmailAddress,
 	t1.MovedBy,
 	t1.OptOutReason
FROM 
	{objectQualifier}tblDoNotEmail t1
INNER JOIN 
	@tabTempSort t2 
ON
	t1.EmailAddress = t2.EmailAddress
WHERE 
	RowNum BETWEEN (@RequiredPage - 1) * @RecordsPerPage + 1 
	AND @RequiredPage * @RecordsPerPage 

SELECT @TotalRows = COUNT(*) FROM @tabTempSort
GO	

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* =====================================================================================
 *   TABLE: tblEntrants
 * ===================================================================================== */


/** Create Table **/
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}tblEntrants]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}tblEntrants]
		(
			[PortalId] Int  ,
			[RunnerId] Int IDENTITY(1, 1) NOT NULL  ,
			[ContactType] Int  ,
			[FullName] NVarChar  ,
			[FirstName] NVarChar  ,
			[MiddleName] NVarChar  ,
			[LastName] NVarChar  ,
			[Suffix] NVarChar  ,
			[Nickname] NVarChar  ,
			[BirthDate] DateTime  ,
			[Age] SmallInt  ,
			[Weight] SmallInt  ,
			[Sex] NVarChar  ,
			[TShirt] NVarChar  ,
			[Sweats] NVarChar  ,
			[Shorts] NVarChar  ,
			[Shoes] NVarChar  ,
			[ShoeStyle] NVarChar  ,
			[Club] NVarChar  ,
			[Address] NVarChar  ,
			[City] NVarChar  ,
			[State] NVarChar  ,
			[ZIP] NVarChar  ,
			[Country] NVarChar  ,
			[HomePhone] NVarChar  ,
			[MobilePhone] NVarChar  ,
			[MobileCarrier] NVarChar  ,
			[EMail] NVarChar  ,
			[PlainText] Bit  ,
			[USATFNumber] NVarChar  ,
			[MemberType] NVarChar  ,
			[MemberNumber] Int  ,
			[MemberCode] NVarChar  ,
			[DateJoined] DateTime  ,
			[LastRenewal] DateTime  ,
			[PaidThru] DateTime  ,
			[Waiver] Bit  ,
			[PrimaryNo] Int  ,
			[Survivor] Bit  ,
			[MailingExpiration] DateTime  ,
			[Memo] NText  ,
			[Marked] Bit  ,
			[Keywords] NVarChar  ,
			[Company] NVarChar  ,
			[Title] NVarChar  ,
			[WorkAddress] NVarChar  ,
			[WorkCity] NVarChar  ,
			[WorkState] NVarChar  ,
			[WorkZip] NVarChar  ,
			[WorkCountry] NVarChar  ,
			[WorkPhone] NVarChar  ,
			[WorkEmail] NVarChar  ,
			[ActiveId] Int  ,
			[InvalidEmail] Bit  ,
			[ResultsEmailOnly] Bit  ,
			[InvalidAddress] Bit  ,
			[UserName] NVarChar  ,
			[Password] NVarChar  ,
			[InsertionDate] DateTime  ,
			[UpdateDate] DateTime  
		)
		

		
		ALTER TABLE {databaseOwner}[{objectQualifier}tblEntrants] 
			ADD CONSTRAINT [aaaaaTblEntrants_PK] PRIMARY KEY CLUSTERED  (  [RunnerId] )
		
		

		
		-- Uncomment following line to create index on ModuleID
		-- CREATE NONCLUSTERED INDEX [IX_{objectQualifier}YourCompany_test2] ON {databaseOwner}[{objectQualifier}YourCompany_test2] ([ModuleID])




		/******************************** Update Default Values of columns  *****************************/
		ALTER TABLE {databaseOwner}[{objectQualifier}tblEntrants] WITH NOCHECK ADD 	
			CONSTRAINT [DF_tblEntrants_ContactType] DEFAULT ((0)) FOR [ContactType],
			CONSTRAINT [DF_tblEntrants_Weight] DEFAULT ((0)) FOR [Weight],
			CONSTRAINT [DF_tblEntrants_Sex] DEFAULT ('M') FOR [Sex],
			CONSTRAINT [DF_tblEntrants_TShirt] DEFAULT ('L') FOR [TShirt],
			CONSTRAINT [DF_tblEntrants_Sweats] DEFAULT ('L') FOR [Sweats],
			CONSTRAINT [DF_tblEntrants_Shorts] DEFAULT ('L') FOR [Shorts],
			CONSTRAINT [DF_tblEntrants_Country] DEFAULT ('USA') FOR [Country],
			CONSTRAINT [DF_tblEntrants_PlainText] DEFAULT ((0)) FOR [PlainText],
			CONSTRAINT [DF_tblEntrants_MemberNumber] DEFAULT ((0)) FOR [MemberNumber],
			CONSTRAINT [DF_tblEntrants_Waiver] DEFAULT ((0)) FOR [Waiver],
			CONSTRAINT [DF_tblEntrants_Survivor] DEFAULT ((0)) FOR [Survivor],
			CONSTRAINT [DF_tblEntrants_Marked] DEFAULT ((0)) FOR [Marked],
			CONSTRAINT [DF_tblEntrants_WorkCountry] DEFAULT ('USA') FOR [WorkCountry],
			CONSTRAINT [DF_tblEntrants_ActiveId] DEFAULT ((0)) FOR [ActiveId],
			CONSTRAINT [DF_tblEntrants_InvalidEmail] DEFAULT ((0)) FOR [InvalidEmail],
			CONSTRAINT [DF_tblEntrants_ResultsEmailOnly] DEFAULT ((0)) FOR [ResultsEmailOnly],
			CONSTRAINT [DF_tblEntrants_InvalidAddress] DEFAULT ((0)) FOR [InvalidAddress],
			CONSTRAINT [DF_tblEntrants_InsertionDate] DEFAULT (getdate()) FOR [InsertionDate]
		
	
	
		
		/********************************** Update Description of columns  *******************************/

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'RunnerId'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique Runner Identifier' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'RunnerId'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'ContactType'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contact Type Individual, Club, Team, Organization' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'ContactType'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'FullName'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Full Name' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'FullName'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'FirstName'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'First Name' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'FirstName'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'MiddleName'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Middle Name' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'MiddleName'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'LastName'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Last Name' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'LastName'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Suffix'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Suffix, such as Jr, Sr, or III' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Suffix'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Nickname'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Nickname' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Nickname'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'BirthDate'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date of Birth' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'BirthDate'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Age'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Age' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Age'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Weight'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Weight (for Clydesdale Scoring)' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Weight'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Sex'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sex (M or F)' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Sex'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'TShirt'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'TShirt Size' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'TShirt'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Sweats'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sweat Suit Size' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Sweats'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Shorts'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Shorts Size' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Shorts'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Shoes'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Shoe Size' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Shoes'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Club'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Running Club' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Club'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Address'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Mailing Address' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Address'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'City'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Mailing City' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'City'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'State'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Mailing State' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'State'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'ZIP'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Mailing ZIP Code' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'ZIP'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Country'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Country' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Country'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'HomePhone'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Home Phone Number' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'HomePhone'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'MobilePhone'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Mobile Phone Number' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'MobilePhone'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'MobileCarrier'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Mobile Phone Carrier (i.e. AT&T, etc)' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'MobileCarrier'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'EMail'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Email Address' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'EMail'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'PlainText'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Plain Text Emails Only' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'PlainText'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'USATFNumber'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'USATF Membership Number' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'USATFNumber'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'MemberType'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Membership Type' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'MemberType'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'MemberNumber'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Membership number' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'MemberNumber'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'MemberCode'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Membership Code' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'MemberCode'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'DateJoined'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date Membership Began' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'DateJoined'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'LastRenewal'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date of Last Renewal' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'LastRenewal'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'PaidThru'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Year Membership Dues are Paid Thru' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'PaidThru'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Waiver'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Has this person signed a club waiver?' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Waiver'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'PrimaryNo'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Primary Member Id' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'PrimaryNo'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Survivor'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Cancer Surviror' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Survivor'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'MailingExpiration'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date when regular mailings should cease' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'MailingExpiration'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Memo'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Memo'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Marked'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Marking flag for selections' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Marked'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Keywords'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Keyword Identifiers' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Keywords'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Company'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Place of Employment' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Company'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Title'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Job Title' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Title'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'WorkAddress'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Work Address' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'WorkAddress'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'WorkCity'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Work City' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'WorkCity'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'WorkState'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Work State' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'WorkState'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'WorkZip'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Work ZIP Code' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'WorkZip'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'WorkCountry'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Work Country' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'WorkCountry'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'WorkPhone'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Work Phone Number' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'WorkPhone'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'WorkEmail'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Work Email Address' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'WorkEmail'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'ActiveId'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique On-Line Registration Identifier' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'ActiveId'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'UserName'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DNN User Name' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'UserName'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'Password'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'DNN Password' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'Password'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'InsertionDate'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date record was added to database' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'InsertionDate'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblEntrants]', N'COLUMN',N'UpdateDate'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date record was last updated' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblEntrants]', @level2type=N'COLUMN',@level2name=N'UpdateDate'
        GO

	END
GO


/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEntrantsGet    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEntrantsGet') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEntrantsGet
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEntrantsList    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEntrantsList') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEntrantsList
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEntrantsGetByContactTypes    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEntrantsGetByContactTypes') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEntrantsGetByContactTypes
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEntrantsGetByEntrants    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEntrantsGetByEntrants') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEntrantsGetByEntrants
GO
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEntrantsGetDependancies') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEntrantsGetDependancies 
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEntrantsAdd    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEntrantsAdd') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEntrantsAdd
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEntrantsUpdate    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEntrantsUpdate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEntrantsUpdate
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEntrantsDelete    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEntrantsDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEntrantsDelete
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEntrantsGetPage    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEntrantsGetPage') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEntrantsGetPage
GO
	

/* -------------------------------------------------------------------------------------
/   tblEntrantsGet
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEntrantsGet
	@RunnerId int
	
AS

SELECT
	[{objectQualifier}tblEntrants].[PortalId],
	[{objectQualifier}tblEntrants].[RunnerId],
	[{objectQualifier}tblEntrants].[ContactType],
	[{objectQualifier}tblEntrants].[FullName],
	[{objectQualifier}tblEntrants].[FirstName],
	[{objectQualifier}tblEntrants].[MiddleName],
	[{objectQualifier}tblEntrants].[LastName],
	[{objectQualifier}tblEntrants].[Suffix],
	[{objectQualifier}tblEntrants].[Nickname],
	[{objectQualifier}tblEntrants].[BirthDate],
	[{objectQualifier}tblEntrants].[Age],
	[{objectQualifier}tblEntrants].[Weight],
	[{objectQualifier}tblEntrants].[Sex],
	[{objectQualifier}tblEntrants].[TShirt],
	[{objectQualifier}tblEntrants].[Sweats],
	[{objectQualifier}tblEntrants].[Shorts],
	[{objectQualifier}tblEntrants].[Shoes],
	[{objectQualifier}tblEntrants].[ShoeStyle],
	[{objectQualifier}tblEntrants].[Club],
	[{objectQualifier}tblEntrants].[Address],
	[{objectQualifier}tblEntrants].[City],
	[{objectQualifier}tblEntrants].[State],
	[{objectQualifier}tblEntrants].[ZIP],
	[{objectQualifier}tblEntrants].[Country],
	[{objectQualifier}tblEntrants].[HomePhone],
	[{objectQualifier}tblEntrants].[MobilePhone],
	[{objectQualifier}tblEntrants].[MobileCarrier],
	[{objectQualifier}tblEntrants].[EMail],
	[{objectQualifier}tblEntrants].[PlainText],
	[{objectQualifier}tblEntrants].[USATFNumber],
	[{objectQualifier}tblEntrants].[MemberType],
	[{objectQualifier}tblEntrants].[MemberNumber],
	[{objectQualifier}tblEntrants].[MemberCode],
	[{objectQualifier}tblEntrants].[DateJoined],
	[{objectQualifier}tblEntrants].[LastRenewal],
	[{objectQualifier}tblEntrants].[PaidThru],
	[{objectQualifier}tblEntrants].[Waiver],
	[{objectQualifier}tblEntrants].[PrimaryNo],
	[{objectQualifier}tblEntrants].[Survivor],
	[{objectQualifier}tblEntrants].[MailingExpiration],
	[{objectQualifier}tblEntrants].[Memo],
	[{objectQualifier}tblEntrants].[Marked],
	[{objectQualifier}tblEntrants].[Keywords],
	[{objectQualifier}tblEntrants].[Company],
	[{objectQualifier}tblEntrants].[Title],
	[{objectQualifier}tblEntrants].[WorkAddress],
	[{objectQualifier}tblEntrants].[WorkCity],
	[{objectQualifier}tblEntrants].[WorkState],
	[{objectQualifier}tblEntrants].[WorkZip],
	[{objectQualifier}tblEntrants].[WorkCountry],
	[{objectQualifier}tblEntrants].[WorkPhone],
	[{objectQualifier}tblEntrants].[WorkEmail],
	[{objectQualifier}tblEntrants].[ActiveId],
	[{objectQualifier}tblEntrants].[InvalidEmail],
	[{objectQualifier}tblEntrants].[ResultsEmailOnly],
	[{objectQualifier}tblEntrants].[InvalidAddress],
	[{objectQualifier}tblEntrants].[UserName],
	[{objectQualifier}tblEntrants].[Password],
	[{objectQualifier}tblEntrants].[InsertionDate],
	[{objectQualifier}tblEntrants].[UpdateDate]
FROM [{objectQualifier}tblEntrants]
WHERE
	[{objectQualifier}tblEntrants].[RunnerId] = @RunnerId
	
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEntrantsList 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEntrantsList
  
 @PortalId int 
AS

SELECT
	[{objectQualifier}tblEntrants].[PortalId],
	[{objectQualifier}tblEntrants].[RunnerId],
	[{objectQualifier}tblEntrants].[ContactType],
	[{objectQualifier}tblEntrants].[FullName],
	[{objectQualifier}tblEntrants].[FirstName],
	[{objectQualifier}tblEntrants].[MiddleName],
	[{objectQualifier}tblEntrants].[LastName],
	[{objectQualifier}tblEntrants].[Suffix],
	[{objectQualifier}tblEntrants].[Nickname],
	[{objectQualifier}tblEntrants].[BirthDate],
	[{objectQualifier}tblEntrants].[Age],
	[{objectQualifier}tblEntrants].[Weight],
	[{objectQualifier}tblEntrants].[Sex],
	[{objectQualifier}tblEntrants].[TShirt],
	[{objectQualifier}tblEntrants].[Sweats],
	[{objectQualifier}tblEntrants].[Shorts],
	[{objectQualifier}tblEntrants].[Shoes],
	[{objectQualifier}tblEntrants].[ShoeStyle],
	[{objectQualifier}tblEntrants].[Club],
	[{objectQualifier}tblEntrants].[Address],
	[{objectQualifier}tblEntrants].[City],
	[{objectQualifier}tblEntrants].[State],
	[{objectQualifier}tblEntrants].[ZIP],
	[{objectQualifier}tblEntrants].[Country],
	[{objectQualifier}tblEntrants].[HomePhone],
	[{objectQualifier}tblEntrants].[MobilePhone],
	[{objectQualifier}tblEntrants].[MobileCarrier],
	[{objectQualifier}tblEntrants].[EMail],
	[{objectQualifier}tblEntrants].[PlainText],
	[{objectQualifier}tblEntrants].[USATFNumber],
	[{objectQualifier}tblEntrants].[MemberType],
	[{objectQualifier}tblEntrants].[MemberNumber],
	[{objectQualifier}tblEntrants].[MemberCode],
	[{objectQualifier}tblEntrants].[DateJoined],
	[{objectQualifier}tblEntrants].[LastRenewal],
	[{objectQualifier}tblEntrants].[PaidThru],
	[{objectQualifier}tblEntrants].[Waiver],
	[{objectQualifier}tblEntrants].[PrimaryNo],
	[{objectQualifier}tblEntrants].[Survivor],
	[{objectQualifier}tblEntrants].[MailingExpiration],
	[{objectQualifier}tblEntrants].[Memo],
	[{objectQualifier}tblEntrants].[Marked],
	[{objectQualifier}tblEntrants].[Keywords],
	[{objectQualifier}tblEntrants].[Company],
	[{objectQualifier}tblEntrants].[Title],
	[{objectQualifier}tblEntrants].[WorkAddress],
	[{objectQualifier}tblEntrants].[WorkCity],
	[{objectQualifier}tblEntrants].[WorkState],
	[{objectQualifier}tblEntrants].[WorkZip],
	[{objectQualifier}tblEntrants].[WorkCountry],
	[{objectQualifier}tblEntrants].[WorkPhone],
	[{objectQualifier}tblEntrants].[WorkEmail],
	[{objectQualifier}tblEntrants].[ActiveId],
	[{objectQualifier}tblEntrants].[InvalidEmail],
	[{objectQualifier}tblEntrants].[ResultsEmailOnly],
	[{objectQualifier}tblEntrants].[InvalidAddress],
	[{objectQualifier}tblEntrants].[UserName],
	[{objectQualifier}tblEntrants].[Password],
	[{objectQualifier}tblEntrants].[InsertionDate],
	[{objectQualifier}tblEntrants].[UpdateDate]
FROM [{objectQualifier}tblEntrants]

 WHERE [{objectQualifier}tblEntrants].[PortalId]=@PortalId 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEntrantsGetByContactTypes
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEntrantsGetByContactTypes
	@ContactType int
AS

SELECT
	[{objectQualifier}tblEntrants].[PortalId],
	[{objectQualifier}tblEntrants].[RunnerId],
	[{objectQualifier}tblEntrants].[ContactType],
	[{objectQualifier}tblEntrants].[FullName],
	[{objectQualifier}tblEntrants].[FirstName],
	[{objectQualifier}tblEntrants].[MiddleName],
	[{objectQualifier}tblEntrants].[LastName],
	[{objectQualifier}tblEntrants].[Suffix],
	[{objectQualifier}tblEntrants].[Nickname],
	[{objectQualifier}tblEntrants].[BirthDate],
	[{objectQualifier}tblEntrants].[Age],
	[{objectQualifier}tblEntrants].[Weight],
	[{objectQualifier}tblEntrants].[Sex],
	[{objectQualifier}tblEntrants].[TShirt],
	[{objectQualifier}tblEntrants].[Sweats],
	[{objectQualifier}tblEntrants].[Shorts],
	[{objectQualifier}tblEntrants].[Shoes],
	[{objectQualifier}tblEntrants].[ShoeStyle],
	[{objectQualifier}tblEntrants].[Club],
	[{objectQualifier}tblEntrants].[Address],
	[{objectQualifier}tblEntrants].[City],
	[{objectQualifier}tblEntrants].[State],
	[{objectQualifier}tblEntrants].[ZIP],
	[{objectQualifier}tblEntrants].[Country],
	[{objectQualifier}tblEntrants].[HomePhone],
	[{objectQualifier}tblEntrants].[MobilePhone],
	[{objectQualifier}tblEntrants].[MobileCarrier],
	[{objectQualifier}tblEntrants].[EMail],
	[{objectQualifier}tblEntrants].[PlainText],
	[{objectQualifier}tblEntrants].[USATFNumber],
	[{objectQualifier}tblEntrants].[MemberType],
	[{objectQualifier}tblEntrants].[MemberNumber],
	[{objectQualifier}tblEntrants].[MemberCode],
	[{objectQualifier}tblEntrants].[DateJoined],
	[{objectQualifier}tblEntrants].[LastRenewal],
	[{objectQualifier}tblEntrants].[PaidThru],
	[{objectQualifier}tblEntrants].[Waiver],
	[{objectQualifier}tblEntrants].[PrimaryNo],
	[{objectQualifier}tblEntrants].[Survivor],
	[{objectQualifier}tblEntrants].[MailingExpiration],
	[{objectQualifier}tblEntrants].[Memo],
	[{objectQualifier}tblEntrants].[Marked],
	[{objectQualifier}tblEntrants].[Keywords],
	[{objectQualifier}tblEntrants].[Company],
	[{objectQualifier}tblEntrants].[Title],
	[{objectQualifier}tblEntrants].[WorkAddress],
	[{objectQualifier}tblEntrants].[WorkCity],
	[{objectQualifier}tblEntrants].[WorkState],
	[{objectQualifier}tblEntrants].[WorkZip],
	[{objectQualifier}tblEntrants].[WorkCountry],
	[{objectQualifier}tblEntrants].[WorkPhone],
	[{objectQualifier}tblEntrants].[WorkEmail],
	[{objectQualifier}tblEntrants].[ActiveId],
	[{objectQualifier}tblEntrants].[InvalidEmail],
	[{objectQualifier}tblEntrants].[ResultsEmailOnly],
	[{objectQualifier}tblEntrants].[InvalidAddress],
	[{objectQualifier}tblEntrants].[UserName],
	[{objectQualifier}tblEntrants].[Password],
	[{objectQualifier}tblEntrants].[InsertionDate],
	[{objectQualifier}tblEntrants].[UpdateDate]
FROM [{objectQualifier}tblEntrants]
WHERE
	[tblEntrants].[ContactType]=@ContactType
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
/* -------------------------------------------------------------------------------------
/   tblEntrantsGetByEntrants
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEntrantsGetByEntrants
	@PrimaryNo int
AS

SELECT
	[{objectQualifier}tblEntrants].[PortalId],
	[{objectQualifier}tblEntrants].[RunnerId],
	[{objectQualifier}tblEntrants].[ContactType],
	[{objectQualifier}tblEntrants].[FullName],
	[{objectQualifier}tblEntrants].[FirstName],
	[{objectQualifier}tblEntrants].[MiddleName],
	[{objectQualifier}tblEntrants].[LastName],
	[{objectQualifier}tblEntrants].[Suffix],
	[{objectQualifier}tblEntrants].[Nickname],
	[{objectQualifier}tblEntrants].[BirthDate],
	[{objectQualifier}tblEntrants].[Age],
	[{objectQualifier}tblEntrants].[Weight],
	[{objectQualifier}tblEntrants].[Sex],
	[{objectQualifier}tblEntrants].[TShirt],
	[{objectQualifier}tblEntrants].[Sweats],
	[{objectQualifier}tblEntrants].[Shorts],
	[{objectQualifier}tblEntrants].[Shoes],
	[{objectQualifier}tblEntrants].[ShoeStyle],
	[{objectQualifier}tblEntrants].[Club],
	[{objectQualifier}tblEntrants].[Address],
	[{objectQualifier}tblEntrants].[City],
	[{objectQualifier}tblEntrants].[State],
	[{objectQualifier}tblEntrants].[ZIP],
	[{objectQualifier}tblEntrants].[Country],
	[{objectQualifier}tblEntrants].[HomePhone],
	[{objectQualifier}tblEntrants].[MobilePhone],
	[{objectQualifier}tblEntrants].[MobileCarrier],
	[{objectQualifier}tblEntrants].[EMail],
	[{objectQualifier}tblEntrants].[PlainText],
	[{objectQualifier}tblEntrants].[USATFNumber],
	[{objectQualifier}tblEntrants].[MemberType],
	[{objectQualifier}tblEntrants].[MemberNumber],
	[{objectQualifier}tblEntrants].[MemberCode],
	[{objectQualifier}tblEntrants].[DateJoined],
	[{objectQualifier}tblEntrants].[LastRenewal],
	[{objectQualifier}tblEntrants].[PaidThru],
	[{objectQualifier}tblEntrants].[Waiver],
	[{objectQualifier}tblEntrants].[PrimaryNo],
	[{objectQualifier}tblEntrants].[Survivor],
	[{objectQualifier}tblEntrants].[MailingExpiration],
	[{objectQualifier}tblEntrants].[Memo],
	[{objectQualifier}tblEntrants].[Marked],
	[{objectQualifier}tblEntrants].[Keywords],
	[{objectQualifier}tblEntrants].[Company],
	[{objectQualifier}tblEntrants].[Title],
	[{objectQualifier}tblEntrants].[WorkAddress],
	[{objectQualifier}tblEntrants].[WorkCity],
	[{objectQualifier}tblEntrants].[WorkState],
	[{objectQualifier}tblEntrants].[WorkZip],
	[{objectQualifier}tblEntrants].[WorkCountry],
	[{objectQualifier}tblEntrants].[WorkPhone],
	[{objectQualifier}tblEntrants].[WorkEmail],
	[{objectQualifier}tblEntrants].[ActiveId],
	[{objectQualifier}tblEntrants].[InvalidEmail],
	[{objectQualifier}tblEntrants].[ResultsEmailOnly],
	[{objectQualifier}tblEntrants].[InvalidAddress],
	[{objectQualifier}tblEntrants].[UserName],
	[{objectQualifier}tblEntrants].[Password],
	[{objectQualifier}tblEntrants].[InsertionDate],
	[{objectQualifier}tblEntrants].[UpdateDate]
FROM [{objectQualifier}tblEntrants]
WHERE
	[tblEntrants].[PrimaryNo]=@PrimaryNo
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
	/* -------------------------------------------------------------------------------------
/   tblEntrantsGetDependancies
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEntrantsGetDependancies
	@RunnerId int
	
AS

SELECT Count(*) 
FROM [{objectQualifier}ContactTypes]
WHERE
	[tblEntrants].[ContactType]=@ContactType

SELECT Count(*) 
FROM [{objectQualifier}Entrants]
WHERE
	[tblEntrants].[PrimaryNo]=@PrimaryNo
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEntrantsAdd
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEntrantsAdd
	@PortalId int
	,@ContactType int
	,@FullName nvarchar(50)
	,@FirstName nvarchar(16)
	,@MiddleName nvarchar(12)
	,@LastName nvarchar(20)
	,@Suffix nvarchar(6)
	,@Nickname nvarchar(24)
	,@BirthDate datetime
	,@Age smallint
	,@Weight smallint
	,@Sex nvarchar(1)
	,@TShirt nvarchar(1)
	,@Sweats nvarchar(1)
	,@Shorts nvarchar(1)
	,@Shoes nvarchar(5)
	,@ShoeStyle nvarchar(50)
	,@Club nvarchar(36)
	,@Address nvarchar(57)
	,@City nvarchar(24)
	,@State nvarchar(2)
	,@ZIP nvarchar(10)
	,@Country nvarchar(24)
	,@HomePhone nvarchar(14)
	,@MobilePhone nvarchar(14)
	,@MobileCarrier nvarchar(2)
	,@EMail nvarchar(50)
	,@PlainText bit
	,@USATFNumber nvarchar(10)
	,@MemberType nvarchar(8)
	,@MemberNumber int
	,@MemberCode nvarchar(50)
	,@DateJoined datetime
	,@LastRenewal datetime
	,@PaidThru datetime
	,@Waiver bit
	,@PrimaryNo int
	,@Survivor bit
	,@MailingExpiration datetime
	,@Memo ntext
	,@Marked bit
	,@Keywords nvarchar(84)
	,@Company nvarchar(50)
	,@Title nvarchar(50)
	,@WorkAddress nvarchar(50)
	,@WorkCity nvarchar(24)
	,@WorkState nvarchar(2)
	,@WorkZip nvarchar(10)
	,@WorkCountry nvarchar(24)
	,@WorkPhone nvarchar(20)
	,@WorkEmail nvarchar(50)
	,@ActiveId int
	,@InvalidEmail bit
	,@ResultsEmailOnly bit
	,@InvalidAddress bit
	,@UserName nvarchar(50)
	,@Password nvarchar(50)
	,@InsertionDate datetime
	,@UpdateDate datetime
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

INSERT INTO {objectQualifier}tblEntrants (
	[PortalId]
	,[ContactType]
	,[FullName]
	,[FirstName]
	,[MiddleName]
	,[LastName]
	,[Suffix]
	,[Nickname]
	,[BirthDate]
	,[Age]
	,[Weight]
	,[Sex]
	,[TShirt]
	,[Sweats]
	,[Shorts]
	,[Shoes]
	,[ShoeStyle]
	,[Club]
	,[Address]
	,[City]
	,[State]
	,[ZIP]
	,[Country]
	,[HomePhone]
	,[MobilePhone]
	,[MobileCarrier]
	,[EMail]
	,[PlainText]
	,[USATFNumber]
	,[MemberType]
	,[MemberNumber]
	,[MemberCode]
	,[DateJoined]
	,[LastRenewal]
	,[PaidThru]
	,[Waiver]
	,[PrimaryNo]
	,[Survivor]
	,[MailingExpiration]
	,[Memo]
	,[Marked]
	,[Keywords]
	,[Company]
	,[Title]
	,[WorkAddress]
	,[WorkCity]
	,[WorkState]
	,[WorkZip]
	,[WorkCountry]
	,[WorkPhone]
	,[WorkEmail]
	,[ActiveId]
	,[InvalidEmail]
	,[ResultsEmailOnly]
	,[InvalidAddress]
	,[UserName]
	,[Password]
	,[InsertionDate]
	,[UpdateDate]
) VALUES (
	@PortalId
	,@ContactType
	,@FullName
	,@FirstName
	,@MiddleName
	,@LastName
	,@Suffix
	,@Nickname
	,@BirthDate
	,@Age
	,@Weight
	,@Sex
	,@TShirt
	,@Sweats
	,@Shorts
	,@Shoes
	,@ShoeStyle
	,@Club
	,@Address
	,@City
	,@State
	,@ZIP
	,@Country
	,@HomePhone
	,@MobilePhone
	,@MobileCarrier
	,@EMail
	,@PlainText
	,@USATFNumber
	,@MemberType
	,@MemberNumber
	,@MemberCode
	,@DateJoined
	,@LastRenewal
	,@PaidThru
	,@Waiver
	,@PrimaryNo
	,@Survivor
	,@MailingExpiration
	,@Memo
	,@Marked
	,@Keywords
	,@Company
	,@Title
	,@WorkAddress
	,@WorkCity
	,@WorkState
	,@WorkZip
	,@WorkCountry
	,@WorkPhone
	,@WorkEmail
	,@ActiveId
	,@InvalidEmail
	,@ResultsEmailOnly
	,@InvalidAddress
	,@UserName
	,@Password
	,@InsertionDate
	,@UpdateDate
)

select SCOPE_IDENTITY()
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEntrantsUpdate
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEntrantsUpdate
	@RunnerId int, -- Unique Runner Identifier
	@PortalId int, 
	@ContactType int, -- Contact Type Individual, Club, Team, Organization
	@FullName nvarchar(50), -- Full Name
	@FirstName nvarchar(16), -- First Name
	@MiddleName nvarchar(12), -- Middle Name
	@LastName nvarchar(20), -- Last Name
	@Suffix nvarchar(6), -- Suffix, such as Jr, Sr, or III
	@Nickname nvarchar(24), -- Nickname
	@BirthDate datetime, -- Date of Birth
	@Age smallint, -- Age
	@Weight smallint, -- Weight (for Clydesdale Scoring)
	@Sex nvarchar(1), -- Sex (M or F)
	@TShirt nvarchar(1), -- TShirt Size
	@Sweats nvarchar(1), -- Sweat Suit Size
	@Shorts nvarchar(1), -- Shorts Size
	@Shoes nvarchar(5), -- Shoe Size
	@ShoeStyle nvarchar(50), 
	@Club nvarchar(36), -- Running Club
	@Address nvarchar(57), -- Mailing Address
	@City nvarchar(24), -- Mailing City
	@State nvarchar(2), -- Mailing State
	@ZIP nvarchar(10), -- Mailing ZIP Code
	@Country nvarchar(24), -- Country
	@HomePhone nvarchar(14), -- Home Phone Number
	@MobilePhone nvarchar(14), -- Mobile Phone Number
	@MobileCarrier nvarchar(2), -- Mobile Phone Carrier (i.e. AT&T, etc)
	@EMail nvarchar(50), -- Email Address
	@PlainText bit, -- Plain Text Emails Only
	@USATFNumber nvarchar(10), -- USATF Membership Number
	@MemberType nvarchar(8), -- Membership Type
	@MemberNumber int, -- Membership number
	@MemberCode nvarchar(50), -- Membership Code
	@DateJoined datetime, -- Date Membership Began
	@LastRenewal datetime, -- Date of Last Renewal
	@PaidThru datetime, -- Year Membership Dues are Paid Thru
	@Waiver bit, -- Has this person signed a club waiver?
	@PrimaryNo int, -- Primary Member Id
	@Survivor bit, -- Cancer Surviror
	@MailingExpiration datetime, -- Date when regular mailings should cease
	@Memo ntext, -- Notes
	@Marked bit, -- Marking flag for selections
	@Keywords nvarchar(84), -- Keyword Identifiers
	@Company nvarchar(50), -- Place of Employment
	@Title nvarchar(50), -- Job Title
	@WorkAddress nvarchar(50), -- Work Address
	@WorkCity nvarchar(24), -- Work City
	@WorkState nvarchar(2), -- Work State
	@WorkZip nvarchar(10), -- Work ZIP Code
	@WorkCountry nvarchar(24), -- Work Country
	@WorkPhone nvarchar(20), -- Work Phone Number
	@WorkEmail nvarchar(50), -- Work Email Address
	@ActiveId int, -- Unique On-Line Registration Identifier
	@InvalidEmail bit, 
	@ResultsEmailOnly bit, 
	@InvalidAddress bit, 
	@UserName nvarchar(50), -- DNN User Name
	@Password nvarchar(50), -- DNN Password
	@InsertionDate datetime, -- Date record was added to database
	@UpdateDate datetime -- Date record was last updated

AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

UPDATE {objectQualifier}tblEntrants SET
	   [PortalId] = @PortalId
	   ,[ContactType] = @ContactType
	   ,[FullName] = @FullName
	   ,[FirstName] = @FirstName
	   ,[MiddleName] = @MiddleName
	   ,[LastName] = @LastName
	   ,[Suffix] = @Suffix
	   ,[Nickname] = @Nickname
	   ,[BirthDate] = @BirthDate
	   ,[Age] = @Age
	   ,[Weight] = @Weight
	   ,[Sex] = @Sex
	   ,[TShirt] = @TShirt
	   ,[Sweats] = @Sweats
	   ,[Shorts] = @Shorts
	   ,[Shoes] = @Shoes
	   ,[ShoeStyle] = @ShoeStyle
	   ,[Club] = @Club
	   ,[Address] = @Address
	   ,[City] = @City
	   ,[State] = @State
	   ,[ZIP] = @ZIP
	   ,[Country] = @Country
	   ,[HomePhone] = @HomePhone
	   ,[MobilePhone] = @MobilePhone
	   ,[MobileCarrier] = @MobileCarrier
	   ,[EMail] = @EMail
	   ,[PlainText] = @PlainText
	   ,[USATFNumber] = @USATFNumber
	   ,[MemberType] = @MemberType
	   ,[MemberNumber] = @MemberNumber
	   ,[MemberCode] = @MemberCode
	   ,[DateJoined] = @DateJoined
	   ,[LastRenewal] = @LastRenewal
	   ,[PaidThru] = @PaidThru
	   ,[Waiver] = @Waiver
	   ,[PrimaryNo] = @PrimaryNo
	   ,[Survivor] = @Survivor
	   ,[MailingExpiration] = @MailingExpiration
	   ,[Memo] = @Memo
	   ,[Marked] = @Marked
	   ,[Keywords] = @Keywords
	   ,[Company] = @Company
	   ,[Title] = @Title
	   ,[WorkAddress] = @WorkAddress
	   ,[WorkCity] = @WorkCity
	   ,[WorkState] = @WorkState
	   ,[WorkZip] = @WorkZip
	   ,[WorkCountry] = @WorkCountry
	   ,[WorkPhone] = @WorkPhone
	   ,[WorkEmail] = @WorkEmail
	   ,[ActiveId] = @ActiveId
	   ,[InvalidEmail] = @InvalidEmail
	   ,[ResultsEmailOnly] = @ResultsEmailOnly
	   ,[InvalidAddress] = @InvalidAddress
	   ,[UserName] = @UserName
	   ,[Password] = @Password
	   ,[InsertionDate] = @InsertionDate
	   ,[UpdateDate] = @UpdateDate
WHERE
    
	[{objectQualifier}tblEntrants].[RunnerId] = @RunnerId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEntrantsDelete
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEntrantsDelete
	@RunnerId int
    
	AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

DELETE FROM {objectQualifier}tblEntrants
WHERE 
	[{objectQualifier}tblEntrants].[RunnerId] = @RunnerId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEntrantsGetPage
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEntrantsGetPage
	@SortCol NVARCHAR(30),
	@RequiredPage INT,
	@RecordsPerPage INT,
	@TotalRows INT OUTPUT
AS
DECLARE @tabTempSort TABLE(
	RowNum INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		RunnerId int
)
	
INSERT @tabTempSort 
(
	RunnerId
)
SELECT	
	RunnerId
FROM 
	{objectQualifier}tblEntrants
ORDER BY 
	CASE WHEN @SortCol = 'PortalId_D'  THEN PortalId else null END desc,
	CASE WHEN @SortCol = 'PortalId'  THEN PortalId else null END asc,
 	CASE WHEN @SortCol = 'RunnerId_D'  THEN RunnerId else null END desc,
	CASE WHEN @SortCol = 'RunnerId'  THEN RunnerId else null END asc,
 	CASE WHEN @SortCol = 'ContactType_D'  THEN ContactType else null END desc,
	CASE WHEN @SortCol = 'ContactType'  THEN ContactType else null END asc,
 	CASE WHEN @SortCol = 'FullName_D'  THEN FullName else null END desc,
	CASE WHEN @SortCol = 'FullName'  THEN FullName else null END asc,
 	CASE WHEN @SortCol = 'FirstName_D'  THEN FirstName else null END desc,
	CASE WHEN @SortCol = 'FirstName'  THEN FirstName else null END asc,
 	CASE WHEN @SortCol = 'MiddleName_D'  THEN MiddleName else null END desc,
	CASE WHEN @SortCol = 'MiddleName'  THEN MiddleName else null END asc,
 	CASE WHEN @SortCol = 'LastName_D'  THEN LastName else null END desc,
	CASE WHEN @SortCol = 'LastName'  THEN LastName else null END asc,
 	CASE WHEN @SortCol = 'Suffix_D'  THEN Suffix else null END desc,
	CASE WHEN @SortCol = 'Suffix'  THEN Suffix else null END asc,
 	CASE WHEN @SortCol = 'Nickname_D'  THEN Nickname else null END desc,
	CASE WHEN @SortCol = 'Nickname'  THEN Nickname else null END asc,
 	CASE WHEN @SortCol = 'BirthDate_D'  THEN BirthDate else null END desc,
	CASE WHEN @SortCol = 'BirthDate'  THEN BirthDate else null END asc,
 	CASE WHEN @SortCol = 'Age_D'  THEN Age else null END desc,
	CASE WHEN @SortCol = 'Age'  THEN Age else null END asc,
 	CASE WHEN @SortCol = 'Weight_D'  THEN Weight else null END desc,
	CASE WHEN @SortCol = 'Weight'  THEN Weight else null END asc,
 	CASE WHEN @SortCol = 'Sex_D'  THEN Sex else null END desc,
	CASE WHEN @SortCol = 'Sex'  THEN Sex else null END asc,
 	CASE WHEN @SortCol = 'TShirt_D'  THEN TShirt else null END desc,
	CASE WHEN @SortCol = 'TShirt'  THEN TShirt else null END asc,
 	CASE WHEN @SortCol = 'Sweats_D'  THEN Sweats else null END desc,
	CASE WHEN @SortCol = 'Sweats'  THEN Sweats else null END asc,
 	CASE WHEN @SortCol = 'Shorts_D'  THEN Shorts else null END desc,
	CASE WHEN @SortCol = 'Shorts'  THEN Shorts else null END asc,
 	CASE WHEN @SortCol = 'Shoes_D'  THEN Shoes else null END desc,
	CASE WHEN @SortCol = 'Shoes'  THEN Shoes else null END asc,
 	CASE WHEN @SortCol = 'ShoeStyle_D'  THEN ShoeStyle else null END desc,
	CASE WHEN @SortCol = 'ShoeStyle'  THEN ShoeStyle else null END asc,
 	CASE WHEN @SortCol = 'Club_D'  THEN Club else null END desc,
	CASE WHEN @SortCol = 'Club'  THEN Club else null END asc,
 	CASE WHEN @SortCol = 'Address_D'  THEN Address else null END desc,
	CASE WHEN @SortCol = 'Address'  THEN Address else null END asc,
 	CASE WHEN @SortCol = 'City_D'  THEN City else null END desc,
	CASE WHEN @SortCol = 'City'  THEN City else null END asc,
 	CASE WHEN @SortCol = 'State_D'  THEN State else null END desc,
	CASE WHEN @SortCol = 'State'  THEN State else null END asc,
 	CASE WHEN @SortCol = 'ZIP_D'  THEN ZIP else null END desc,
	CASE WHEN @SortCol = 'ZIP'  THEN ZIP else null END asc,
 	CASE WHEN @SortCol = 'Country_D'  THEN Country else null END desc,
	CASE WHEN @SortCol = 'Country'  THEN Country else null END asc,
 	CASE WHEN @SortCol = 'HomePhone_D'  THEN HomePhone else null END desc,
	CASE WHEN @SortCol = 'HomePhone'  THEN HomePhone else null END asc,
 	CASE WHEN @SortCol = 'MobilePhone_D'  THEN MobilePhone else null END desc,
	CASE WHEN @SortCol = 'MobilePhone'  THEN MobilePhone else null END asc,
 	CASE WHEN @SortCol = 'MobileCarrier_D'  THEN MobileCarrier else null END desc,
	CASE WHEN @SortCol = 'MobileCarrier'  THEN MobileCarrier else null END asc,
 	CASE WHEN @SortCol = 'EMail_D'  THEN EMail else null END desc,
	CASE WHEN @SortCol = 'EMail'  THEN EMail else null END asc,
 	CASE WHEN @SortCol = 'PlainText_D'  THEN PlainText else null END desc,
	CASE WHEN @SortCol = 'PlainText'  THEN PlainText else null END asc,
 	CASE WHEN @SortCol = 'USATFNumber_D'  THEN USATFNumber else null END desc,
	CASE WHEN @SortCol = 'USATFNumber'  THEN USATFNumber else null END asc,
 	CASE WHEN @SortCol = 'MemberType_D'  THEN MemberType else null END desc,
	CASE WHEN @SortCol = 'MemberType'  THEN MemberType else null END asc,
 	CASE WHEN @SortCol = 'MemberNumber_D'  THEN MemberNumber else null END desc,
	CASE WHEN @SortCol = 'MemberNumber'  THEN MemberNumber else null END asc,
 	CASE WHEN @SortCol = 'MemberCode_D'  THEN MemberCode else null END desc,
	CASE WHEN @SortCol = 'MemberCode'  THEN MemberCode else null END asc,
 	CASE WHEN @SortCol = 'DateJoined_D'  THEN DateJoined else null END desc,
	CASE WHEN @SortCol = 'DateJoined'  THEN DateJoined else null END asc,
 	CASE WHEN @SortCol = 'LastRenewal_D'  THEN LastRenewal else null END desc,
	CASE WHEN @SortCol = 'LastRenewal'  THEN LastRenewal else null END asc,
 	CASE WHEN @SortCol = 'PaidThru_D'  THEN PaidThru else null END desc,
	CASE WHEN @SortCol = 'PaidThru'  THEN PaidThru else null END asc,
 	CASE WHEN @SortCol = 'Waiver_D'  THEN Waiver else null END desc,
	CASE WHEN @SortCol = 'Waiver'  THEN Waiver else null END asc,
 	CASE WHEN @SortCol = 'PrimaryNo_D'  THEN PrimaryNo else null END desc,
	CASE WHEN @SortCol = 'PrimaryNo'  THEN PrimaryNo else null END asc,
 	CASE WHEN @SortCol = 'Survivor_D'  THEN Survivor else null END desc,
	CASE WHEN @SortCol = 'Survivor'  THEN Survivor else null END asc,
 	CASE WHEN @SortCol = 'MailingExpiration_D'  THEN MailingExpiration else null END desc,
	CASE WHEN @SortCol = 'MailingExpiration'  THEN MailingExpiration else null END asc,
 	CASE WHEN @SortCol = 'Marked_D'  THEN Marked else null END desc,
	CASE WHEN @SortCol = 'Marked'  THEN Marked else null END asc,
 	CASE WHEN @SortCol = 'Keywords_D'  THEN Keywords else null END desc,
	CASE WHEN @SortCol = 'Keywords'  THEN Keywords else null END asc,
 	CASE WHEN @SortCol = 'Company_D'  THEN Company else null END desc,
	CASE WHEN @SortCol = 'Company'  THEN Company else null END asc,
 	CASE WHEN @SortCol = 'Title_D'  THEN Title else null END desc,
	CASE WHEN @SortCol = 'Title'  THEN Title else null END asc,
 	CASE WHEN @SortCol = 'WorkAddress_D'  THEN WorkAddress else null END desc,
	CASE WHEN @SortCol = 'WorkAddress'  THEN WorkAddress else null END asc,
 	CASE WHEN @SortCol = 'WorkCity_D'  THEN WorkCity else null END desc,
	CASE WHEN @SortCol = 'WorkCity'  THEN WorkCity else null END asc,
 	CASE WHEN @SortCol = 'WorkState_D'  THEN WorkState else null END desc,
	CASE WHEN @SortCol = 'WorkState'  THEN WorkState else null END asc,
 	CASE WHEN @SortCol = 'WorkZip_D'  THEN WorkZip else null END desc,
	CASE WHEN @SortCol = 'WorkZip'  THEN WorkZip else null END asc,
 	CASE WHEN @SortCol = 'WorkCountry_D'  THEN WorkCountry else null END desc,
	CASE WHEN @SortCol = 'WorkCountry'  THEN WorkCountry else null END asc,
 	CASE WHEN @SortCol = 'WorkPhone_D'  THEN WorkPhone else null END desc,
	CASE WHEN @SortCol = 'WorkPhone'  THEN WorkPhone else null END asc,
 	CASE WHEN @SortCol = 'WorkEmail_D'  THEN WorkEmail else null END desc,
	CASE WHEN @SortCol = 'WorkEmail'  THEN WorkEmail else null END asc,
 	CASE WHEN @SortCol = 'ActiveId_D'  THEN ActiveId else null END desc,
	CASE WHEN @SortCol = 'ActiveId'  THEN ActiveId else null END asc,
 	CASE WHEN @SortCol = 'InvalidEmail_D'  THEN InvalidEmail else null END desc,
	CASE WHEN @SortCol = 'InvalidEmail'  THEN InvalidEmail else null END asc,
 	CASE WHEN @SortCol = 'ResultsEmailOnly_D'  THEN ResultsEmailOnly else null END desc,
	CASE WHEN @SortCol = 'ResultsEmailOnly'  THEN ResultsEmailOnly else null END asc,
 	CASE WHEN @SortCol = 'InvalidAddress_D'  THEN InvalidAddress else null END desc,
	CASE WHEN @SortCol = 'InvalidAddress'  THEN InvalidAddress else null END asc,
 	CASE WHEN @SortCol = 'UserName_D'  THEN UserName else null END desc,
	CASE WHEN @SortCol = 'UserName'  THEN UserName else null END asc,
 	CASE WHEN @SortCol = 'Password_D'  THEN Password else null END desc,
	CASE WHEN @SortCol = 'Password'  THEN Password else null END asc,
 	CASE WHEN @SortCol = 'InsertionDate_D'  THEN InsertionDate else null END desc,
	CASE WHEN @SortCol = 'InsertionDate'  THEN InsertionDate else null END asc,
 	CASE WHEN @SortCol = 'UpdateDate_D'  THEN UpdateDate else null END desc,
	CASE WHEN @SortCol = 'UpdateDate'  THEN UpdateDate else null END asc

SELECT 
	t1.PortalId,
 	t1.RunnerId,
 	t1.ContactType,
 	t1.FullName,
 	t1.FirstName,
 	t1.MiddleName,
 	t1.LastName,
 	t1.Suffix,
 	t1.Nickname,
 	t1.BirthDate,
 	t1.Age,
 	t1.Weight,
 	t1.Sex,
 	t1.TShirt,
 	t1.Sweats,
 	t1.Shorts,
 	t1.Shoes,
 	t1.ShoeStyle,
 	t1.Club,
 	t1.Address,
 	t1.City,
 	t1.State,
 	t1.ZIP,
 	t1.Country,
 	t1.HomePhone,
 	t1.MobilePhone,
 	t1.MobileCarrier,
 	t1.EMail,
 	t1.PlainText,
 	t1.USATFNumber,
 	t1.MemberType,
 	t1.MemberNumber,
 	t1.MemberCode,
 	t1.DateJoined,
 	t1.LastRenewal,
 	t1.PaidThru,
 	t1.Waiver,
 	t1.PrimaryNo,
 	t1.Survivor,
 	t1.MailingExpiration,
 	t1.Memo,
 	t1.Marked,
 	t1.Keywords,
 	t1.Company,
 	t1.Title,
 	t1.WorkAddress,
 	t1.WorkCity,
 	t1.WorkState,
 	t1.WorkZip,
 	t1.WorkCountry,
 	t1.WorkPhone,
 	t1.WorkEmail,
 	t1.ActiveId,
 	t1.InvalidEmail,
 	t1.ResultsEmailOnly,
 	t1.InvalidAddress,
 	t1.UserName,
 	t1.Password,
 	t1.InsertionDate,
 	t1.UpdateDate
FROM 
	{objectQualifier}tblEntrants t1
INNER JOIN 
	@tabTempSort t2 
ON
	t1.RunnerId = t2.RunnerId
WHERE 
	RowNum BETWEEN (@RequiredPage - 1) * @RecordsPerPage + 1 
	AND @RequiredPage * @RecordsPerPage 

SELECT @TotalRows = COUNT(*) FROM @tabTempSort
GO	

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* =====================================================================================
 *   TABLE: tblEvents
 * ===================================================================================== */


/** Create Table **/
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}tblEvents]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}tblEvents]
		(
			[PortalId] Int  ,
			[RunnerId] Int NOT NULL  ,
			[RaceId] Int NOT NULL  ,
			[BibNumber] Int  ,
			[Division] NVarChar  ,
			[DivisionPlace] SmallInt  ,
			[DivisionTotal] SmallInt  ,
			[SexPlace] Int  ,
			[SexTotal] Int  ,
			[GunTime] DateTime  ,
			[NetTime] DateTime  ,
			[Pace] DateTime  ,
			[Place] Int  ,
			[Seed] DateTime  ,
			[Team] NVarChar  ,
			[Fee] Money  ,
			[EntryDate] DateTime  ,
			[Clydesdale] Bit  ,
			[Survivor] Bit  ,
			[NonCompetitive] Bit  ,
			[USATF] Bit  ,
			[Age] SmallInt  ,
			[Sex] NVarChar  ,
			[Weight] SmallInt  ,
			[Heat] SmallInt  ,
			[WaveOffset] DateTime  ,
			[WAVATime] DateTime  ,
			[PerformancePercent] Real  ,
			[SeriesPlace] SmallInt  ,
			[SeriesAge] SmallInt  ,
			[SeriesDivision] NVarChar  ,
			[SeriesPoints] SmallInt  ,
			[Confirmation] Bit  ,
			[Results] Bit  ,
			[ChipId] NVarChar  ,
			[AwardDivision] NVarChar  ,
			[AwardPlace] SmallInt  ,
			[AwardPriority] SmallInt  
		)
		

		
		ALTER TABLE {databaseOwner}[{objectQualifier}tblEvents] 
			ADD CONSTRAINT [aaaaaTblEvents_PK] PRIMARY KEY CLUSTERED  (  [RunnerId], [RaceId] )
		
		

		
		-- Uncomment following line to create index on ModuleID
		-- CREATE NONCLUSTERED INDEX [IX_{objectQualifier}YourCompany_test2] ON {databaseOwner}[{objectQualifier}YourCompany_test2] ([ModuleID])




		/******************************** Update Default Values of columns  *****************************/
		ALTER TABLE {databaseOwner}[{objectQualifier}tblEvents] WITH NOCHECK ADD 	
			CONSTRAINT [DF_tblEvents_SexPlace] DEFAULT ((0)) FOR [SexPlace],
			CONSTRAINT [DF_tblEvents_SexTotal] DEFAULT ((0)) FOR [SexTotal],
			CONSTRAINT [DF_tblEvents_Clydesdale] DEFAULT ((0)) FOR [Clydesdale],
			CONSTRAINT [DF_tblEvents_Survivor] DEFAULT ((0)) FOR [Survivor],
			CONSTRAINT [DF_tblEvents_NonCompetitive] DEFAULT ((0)) FOR [NonCompetitive],
			CONSTRAINT [DF_tblEvents_USATF] DEFAULT ((0)) FOR [USATF],
			CONSTRAINT [DF_tblEvents_PerformancePercent] DEFAULT ((0)) FOR [PerformancePercent],
			CONSTRAINT [DF_tblEvents_SeriesPlace] DEFAULT ((0)) FOR [SeriesPlace],
			CONSTRAINT [DF_tblEvents_SeriesAge] DEFAULT ((0)) FOR [SeriesAge],
			CONSTRAINT [DF_tblEvents_SeriesPoints] DEFAULT ((0)) FOR [SeriesPoints],
			CONSTRAINT [DF_tblEvents_Confirmation] DEFAULT ((0)) FOR [Confirmation],
			CONSTRAINT [DF_tblEvents_Results] DEFAULT ((0)) FOR [Results]
		
	
	
		
		/********************************** Update Description of columns  *******************************/

	END
GO


/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventsGet    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventsGet') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventsGet
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventsList    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventsList') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventsList
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventsGetByEntrants    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventsGetByEntrants') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventsGetByEntrants
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventsGetByRaces    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventsGetByRaces') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventsGetByRaces
GO
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventsGetDependancies') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventsGetDependancies 
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventsAdd    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventsAdd') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventsAdd
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventsUpdate    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventsUpdate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventsUpdate
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventsDelete    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventsDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventsDelete
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventsGetPage    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventsGetPage') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventsGetPage
GO
	

/* -------------------------------------------------------------------------------------
/   tblEventsGet
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventsGet
	@RunnerId int,
	@RaceId int
	
AS

SELECT
	[{objectQualifier}tblEvents].[PortalId],
	[{objectQualifier}tblEvents].[RunnerId],
	[{objectQualifier}tblEvents].[RaceId],
	[{objectQualifier}tblEvents].[BibNumber],
	[{objectQualifier}tblEvents].[Division],
	[{objectQualifier}tblEvents].[DivisionPlace],
	[{objectQualifier}tblEvents].[DivisionTotal],
	[{objectQualifier}tblEvents].[SexPlace],
	[{objectQualifier}tblEvents].[SexTotal],
	[{objectQualifier}tblEvents].[GunTime],
	[{objectQualifier}tblEvents].[NetTime],
	[{objectQualifier}tblEvents].[Pace],
	[{objectQualifier}tblEvents].[Place],
	[{objectQualifier}tblEvents].[Seed],
	[{objectQualifier}tblEvents].[Team],
	[{objectQualifier}tblEvents].[Fee],
	[{objectQualifier}tblEvents].[EntryDate],
	[{objectQualifier}tblEvents].[Clydesdale],
	[{objectQualifier}tblEvents].[Survivor],
	[{objectQualifier}tblEvents].[NonCompetitive],
	[{objectQualifier}tblEvents].[USATF],
	[{objectQualifier}tblEvents].[Age],
	[{objectQualifier}tblEvents].[Sex],
	[{objectQualifier}tblEvents].[Weight],
	[{objectQualifier}tblEvents].[Heat],
	[{objectQualifier}tblEvents].[WaveOffset],
	[{objectQualifier}tblEvents].[WAVATime],
	[{objectQualifier}tblEvents].[PerformancePercent],
	[{objectQualifier}tblEvents].[SeriesPlace],
	[{objectQualifier}tblEvents].[SeriesAge],
	[{objectQualifier}tblEvents].[SeriesDivision],
	[{objectQualifier}tblEvents].[SeriesPoints],
	[{objectQualifier}tblEvents].[Confirmation],
	[{objectQualifier}tblEvents].[Results],
	[{objectQualifier}tblEvents].[ChipId],
	[{objectQualifier}tblEvents].[AwardDivision],
	[{objectQualifier}tblEvents].[AwardPlace],
	[{objectQualifier}tblEvents].[AwardPriority]
FROM [{objectQualifier}tblEvents]
WHERE
	[{objectQualifier}tblEvents].[RunnerId] = @RunnerId
	AND [{objectQualifier}tblEvents].[RaceId] = @RaceId
	
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEventsList 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventsList
  
 @PortalId int 
AS

SELECT
	[{objectQualifier}tblEvents].[PortalId],
	[{objectQualifier}tblEvents].[RunnerId],
	[{objectQualifier}tblEvents].[RaceId],
	[{objectQualifier}tblEvents].[BibNumber],
	[{objectQualifier}tblEvents].[Division],
	[{objectQualifier}tblEvents].[DivisionPlace],
	[{objectQualifier}tblEvents].[DivisionTotal],
	[{objectQualifier}tblEvents].[SexPlace],
	[{objectQualifier}tblEvents].[SexTotal],
	[{objectQualifier}tblEvents].[GunTime],
	[{objectQualifier}tblEvents].[NetTime],
	[{objectQualifier}tblEvents].[Pace],
	[{objectQualifier}tblEvents].[Place],
	[{objectQualifier}tblEvents].[Seed],
	[{objectQualifier}tblEvents].[Team],
	[{objectQualifier}tblEvents].[Fee],
	[{objectQualifier}tblEvents].[EntryDate],
	[{objectQualifier}tblEvents].[Clydesdale],
	[{objectQualifier}tblEvents].[Survivor],
	[{objectQualifier}tblEvents].[NonCompetitive],
	[{objectQualifier}tblEvents].[USATF],
	[{objectQualifier}tblEvents].[Age],
	[{objectQualifier}tblEvents].[Sex],
	[{objectQualifier}tblEvents].[Weight],
	[{objectQualifier}tblEvents].[Heat],
	[{objectQualifier}tblEvents].[WaveOffset],
	[{objectQualifier}tblEvents].[WAVATime],
	[{objectQualifier}tblEvents].[PerformancePercent],
	[{objectQualifier}tblEvents].[SeriesPlace],
	[{objectQualifier}tblEvents].[SeriesAge],
	[{objectQualifier}tblEvents].[SeriesDivision],
	[{objectQualifier}tblEvents].[SeriesPoints],
	[{objectQualifier}tblEvents].[Confirmation],
	[{objectQualifier}tblEvents].[Results],
	[{objectQualifier}tblEvents].[ChipId],
	[{objectQualifier}tblEvents].[AwardDivision],
	[{objectQualifier}tblEvents].[AwardPlace],
	[{objectQualifier}tblEvents].[AwardPriority]
FROM [{objectQualifier}tblEvents]

 WHERE [{objectQualifier}tblEvents].[PortalId]=@PortalId 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEventsGetByEntrants
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventsGetByEntrants
	@RunnerId int
AS

SELECT
	[{objectQualifier}tblEvents].[PortalId],
	[{objectQualifier}tblEvents].[RunnerId],
	[{objectQualifier}tblEvents].[RaceId],
	[{objectQualifier}tblEvents].[BibNumber],
	[{objectQualifier}tblEvents].[Division],
	[{objectQualifier}tblEvents].[DivisionPlace],
	[{objectQualifier}tblEvents].[DivisionTotal],
	[{objectQualifier}tblEvents].[SexPlace],
	[{objectQualifier}tblEvents].[SexTotal],
	[{objectQualifier}tblEvents].[GunTime],
	[{objectQualifier}tblEvents].[NetTime],
	[{objectQualifier}tblEvents].[Pace],
	[{objectQualifier}tblEvents].[Place],
	[{objectQualifier}tblEvents].[Seed],
	[{objectQualifier}tblEvents].[Team],
	[{objectQualifier}tblEvents].[Fee],
	[{objectQualifier}tblEvents].[EntryDate],
	[{objectQualifier}tblEvents].[Clydesdale],
	[{objectQualifier}tblEvents].[Survivor],
	[{objectQualifier}tblEvents].[NonCompetitive],
	[{objectQualifier}tblEvents].[USATF],
	[{objectQualifier}tblEvents].[Age],
	[{objectQualifier}tblEvents].[Sex],
	[{objectQualifier}tblEvents].[Weight],
	[{objectQualifier}tblEvents].[Heat],
	[{objectQualifier}tblEvents].[WaveOffset],
	[{objectQualifier}tblEvents].[WAVATime],
	[{objectQualifier}tblEvents].[PerformancePercent],
	[{objectQualifier}tblEvents].[SeriesPlace],
	[{objectQualifier}tblEvents].[SeriesAge],
	[{objectQualifier}tblEvents].[SeriesDivision],
	[{objectQualifier}tblEvents].[SeriesPoints],
	[{objectQualifier}tblEvents].[Confirmation],
	[{objectQualifier}tblEvents].[Results],
	[{objectQualifier}tblEvents].[ChipId],
	[{objectQualifier}tblEvents].[AwardDivision],
	[{objectQualifier}tblEvents].[AwardPlace],
	[{objectQualifier}tblEvents].[AwardPriority]
FROM [{objectQualifier}tblEvents]
WHERE
	[tblEvents].[RunnerId]=@RunnerId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
/* -------------------------------------------------------------------------------------
/   tblEventsGetByRaces
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventsGetByRaces
	@RaceId int
AS

SELECT
	[{objectQualifier}tblEvents].[PortalId],
	[{objectQualifier}tblEvents].[RunnerId],
	[{objectQualifier}tblEvents].[RaceId],
	[{objectQualifier}tblEvents].[BibNumber],
	[{objectQualifier}tblEvents].[Division],
	[{objectQualifier}tblEvents].[DivisionPlace],
	[{objectQualifier}tblEvents].[DivisionTotal],
	[{objectQualifier}tblEvents].[SexPlace],
	[{objectQualifier}tblEvents].[SexTotal],
	[{objectQualifier}tblEvents].[GunTime],
	[{objectQualifier}tblEvents].[NetTime],
	[{objectQualifier}tblEvents].[Pace],
	[{objectQualifier}tblEvents].[Place],
	[{objectQualifier}tblEvents].[Seed],
	[{objectQualifier}tblEvents].[Team],
	[{objectQualifier}tblEvents].[Fee],
	[{objectQualifier}tblEvents].[EntryDate],
	[{objectQualifier}tblEvents].[Clydesdale],
	[{objectQualifier}tblEvents].[Survivor],
	[{objectQualifier}tblEvents].[NonCompetitive],
	[{objectQualifier}tblEvents].[USATF],
	[{objectQualifier}tblEvents].[Age],
	[{objectQualifier}tblEvents].[Sex],
	[{objectQualifier}tblEvents].[Weight],
	[{objectQualifier}tblEvents].[Heat],
	[{objectQualifier}tblEvents].[WaveOffset],
	[{objectQualifier}tblEvents].[WAVATime],
	[{objectQualifier}tblEvents].[PerformancePercent],
	[{objectQualifier}tblEvents].[SeriesPlace],
	[{objectQualifier}tblEvents].[SeriesAge],
	[{objectQualifier}tblEvents].[SeriesDivision],
	[{objectQualifier}tblEvents].[SeriesPoints],
	[{objectQualifier}tblEvents].[Confirmation],
	[{objectQualifier}tblEvents].[Results],
	[{objectQualifier}tblEvents].[ChipId],
	[{objectQualifier}tblEvents].[AwardDivision],
	[{objectQualifier}tblEvents].[AwardPlace],
	[{objectQualifier}tblEvents].[AwardPriority]
FROM [{objectQualifier}tblEvents]
WHERE
	[tblEvents].[RaceId]=@RaceId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
	/* -------------------------------------------------------------------------------------
/   tblEventsGetDependancies
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventsGetDependancies
	@RunnerId int,
	@RaceId int
	
AS

SELECT Count(*) 
FROM [{objectQualifier}Entrants]
WHERE
	[tblEvents].[RunnerId]=@RunnerId

SELECT Count(*) 
FROM [{objectQualifier}Races]
WHERE
	[tblEvents].[RaceId]=@RaceId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEventsAdd
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventsAdd
	@PortalId int
	,@RunnerId int
	,@RaceId int
	,@BibNumber int
	,@Division nvarchar(6)
	,@DivisionPlace smallint
	,@DivisionTotal smallint
	,@SexPlace int
	,@SexTotal int
	,@GunTime datetime
	,@NetTime datetime
	,@Pace datetime
	,@Place int
	,@Seed datetime
	,@Team nvarchar(32)
	,@Fee money
	,@EntryDate datetime
	,@Clydesdale bit
	,@Survivor bit
	,@NonCompetitive bit
	,@USATF bit
	,@Age smallint
	,@Sex nvarchar(1)
	,@Weight smallint
	,@Heat smallint
	,@WaveOffset datetime
	,@WAVATime datetime
	,@PerformancePercent real
	,@SeriesPlace smallint
	,@SeriesAge smallint
	,@SeriesDivision nvarchar(6)
	,@SeriesPoints smallint
	,@Confirmation bit
	,@Results bit
	,@ChipId nvarchar(9)
	,@AwardDivision nvarchar(5)
	,@AwardPlace smallint
	,@AwardPriority smallint
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

-- THIS STORED PROCEDURE NEEDS TO BE MANUALLY COMPLETED
-- MULITPLE PRIMARY KEY MEMBERS OR NON-GUID/INT PRIMARY KEY

INSERT INTO {objectQualifier}tblEvents (
	[PortalId]
	,[RunnerId]
	,[RaceId]
	,[BibNumber]
	,[Division]
	,[DivisionPlace]
	,[DivisionTotal]
	,[SexPlace]
	,[SexTotal]
	,[GunTime]
	,[NetTime]
	,[Pace]
	,[Place]
	,[Seed]
	,[Team]
	,[Fee]
	,[EntryDate]
	,[Clydesdale]
	,[Survivor]
	,[NonCompetitive]
	,[USATF]
	,[Age]
	,[Sex]
	,[Weight]
	,[Heat]
	,[WaveOffset]
	,[WAVATime]
	,[PerformancePercent]
	,[SeriesPlace]
	,[SeriesAge]
	,[SeriesDivision]
	,[SeriesPoints]
	,[Confirmation]
	,[Results]
	,[ChipId]
	,[AwardDivision]
	,[AwardPlace]
	,[AwardPriority]
) VALUES (
	@PortalId
	,@RunnerId
	,@RaceId
	,@BibNumber
	,@Division
	,@DivisionPlace
	,@DivisionTotal
	,@SexPlace
	,@SexTotal
	,@GunTime
	,@NetTime
	,@Pace
	,@Place
	,@Seed
	,@Team
	,@Fee
	,@EntryDate
	,@Clydesdale
	,@Survivor
	,@NonCompetitive
	,@USATF
	,@Age
	,@Sex
	,@Weight
	,@Heat
	,@WaveOffset
	,@WAVATime
	,@PerformancePercent
	,@SeriesPlace
	,@SeriesAge
	,@SeriesDivision
	,@SeriesPoints
	,@Confirmation
	,@Results
	,@ChipId
	,@AwardDivision
	,@AwardPlace
	,@AwardPriority
)

select SCOPE_IDENTITY()
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEventsUpdate
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventsUpdate
	@RunnerId int, 
	@RaceId int, 
	@PortalId int, 
	@BibNumber int, 
	@Division nvarchar(6), 
	@DivisionPlace smallint, 
	@DivisionTotal smallint, 
	@SexPlace int, 
	@SexTotal int, 
	@GunTime datetime, 
	@NetTime datetime, 
	@Pace datetime, 
	@Place int, 
	@Seed datetime, 
	@Team nvarchar(32), 
	@Fee money, 
	@EntryDate datetime, 
	@Clydesdale bit, 
	@Survivor bit, 
	@NonCompetitive bit, 
	@USATF bit, 
	@Age smallint, 
	@Sex nvarchar(1), 
	@Weight smallint, 
	@Heat smallint, 
	@WaveOffset datetime, 
	@WAVATime datetime, 
	@PerformancePercent real, 
	@SeriesPlace smallint, 
	@SeriesAge smallint, 
	@SeriesDivision nvarchar(6), 
	@SeriesPoints smallint, 
	@Confirmation bit, 
	@Results bit, 
	@ChipId nvarchar(9), 
	@AwardDivision nvarchar(5), 
	@AwardPlace smallint, 
	@AwardPriority smallint 

AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

UPDATE {objectQualifier}tblEvents SET
	   [PortalId] = @PortalId
	   ,[BibNumber] = @BibNumber
	   ,[Division] = @Division
	   ,[DivisionPlace] = @DivisionPlace
	   ,[DivisionTotal] = @DivisionTotal
	   ,[SexPlace] = @SexPlace
	   ,[SexTotal] = @SexTotal
	   ,[GunTime] = @GunTime
	   ,[NetTime] = @NetTime
	   ,[Pace] = @Pace
	   ,[Place] = @Place
	   ,[Seed] = @Seed
	   ,[Team] = @Team
	   ,[Fee] = @Fee
	   ,[EntryDate] = @EntryDate
	   ,[Clydesdale] = @Clydesdale
	   ,[Survivor] = @Survivor
	   ,[NonCompetitive] = @NonCompetitive
	   ,[USATF] = @USATF
	   ,[Age] = @Age
	   ,[Sex] = @Sex
	   ,[Weight] = @Weight
	   ,[Heat] = @Heat
	   ,[WaveOffset] = @WaveOffset
	   ,[WAVATime] = @WAVATime
	   ,[PerformancePercent] = @PerformancePercent
	   ,[SeriesPlace] = @SeriesPlace
	   ,[SeriesAge] = @SeriesAge
	   ,[SeriesDivision] = @SeriesDivision
	   ,[SeriesPoints] = @SeriesPoints
	   ,[Confirmation] = @Confirmation
	   ,[Results] = @Results
	   ,[ChipId] = @ChipId
	   ,[AwardDivision] = @AwardDivision
	   ,[AwardPlace] = @AwardPlace
	   ,[AwardPriority] = @AwardPriority
WHERE
    
	[{objectQualifier}tblEvents].[RunnerId] = @RunnerId
	AND [{objectQualifier}tblEvents].[RaceId] = @RaceId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEventsDelete
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventsDelete
	@RunnerId int,
	@RaceId int
    
	AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

DELETE FROM {objectQualifier}tblEvents
WHERE 
	[{objectQualifier}tblEvents].[RunnerId] = @RunnerId
	AND [{objectQualifier}tblEvents].[RaceId] = @RaceId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEventsGetPage
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventsGetPage
	@SortCol NVARCHAR(30),
	@RequiredPage INT,
	@RecordsPerPage INT,
	@TotalRows INT OUTPUT
AS
DECLARE @tabTempSort TABLE(
	RowNum INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		RunnerId int,
	RaceId int
)
	
INSERT @tabTempSort 
(
	RunnerId,
 	RaceId
)
SELECT	
	RunnerId,
 	RaceId
FROM 
	{objectQualifier}tblEvents
ORDER BY 
	CASE WHEN @SortCol = 'PortalId_D'  THEN PortalId else null END desc,
	CASE WHEN @SortCol = 'PortalId'  THEN PortalId else null END asc,
 	CASE WHEN @SortCol = 'RunnerId_D'  THEN RunnerId else null END desc,
	CASE WHEN @SortCol = 'RunnerId'  THEN RunnerId else null END asc,
 	CASE WHEN @SortCol = 'RaceId_D'  THEN RaceId else null END desc,
	CASE WHEN @SortCol = 'RaceId'  THEN RaceId else null END asc,
 	CASE WHEN @SortCol = 'BibNumber_D'  THEN BibNumber else null END desc,
	CASE WHEN @SortCol = 'BibNumber'  THEN BibNumber else null END asc,
 	CASE WHEN @SortCol = 'Division_D'  THEN Division else null END desc,
	CASE WHEN @SortCol = 'Division'  THEN Division else null END asc,
 	CASE WHEN @SortCol = 'DivisionPlace_D'  THEN DivisionPlace else null END desc,
	CASE WHEN @SortCol = 'DivisionPlace'  THEN DivisionPlace else null END asc,
 	CASE WHEN @SortCol = 'DivisionTotal_D'  THEN DivisionTotal else null END desc,
	CASE WHEN @SortCol = 'DivisionTotal'  THEN DivisionTotal else null END asc,
 	CASE WHEN @SortCol = 'SexPlace_D'  THEN SexPlace else null END desc,
	CASE WHEN @SortCol = 'SexPlace'  THEN SexPlace else null END asc,
 	CASE WHEN @SortCol = 'SexTotal_D'  THEN SexTotal else null END desc,
	CASE WHEN @SortCol = 'SexTotal'  THEN SexTotal else null END asc,
 	CASE WHEN @SortCol = 'GunTime_D'  THEN GunTime else null END desc,
	CASE WHEN @SortCol = 'GunTime'  THEN GunTime else null END asc,
 	CASE WHEN @SortCol = 'NetTime_D'  THEN NetTime else null END desc,
	CASE WHEN @SortCol = 'NetTime'  THEN NetTime else null END asc,
 	CASE WHEN @SortCol = 'Pace_D'  THEN Pace else null END desc,
	CASE WHEN @SortCol = 'Pace'  THEN Pace else null END asc,
 	CASE WHEN @SortCol = 'Place_D'  THEN Place else null END desc,
	CASE WHEN @SortCol = 'Place'  THEN Place else null END asc,
 	CASE WHEN @SortCol = 'Seed_D'  THEN Seed else null END desc,
	CASE WHEN @SortCol = 'Seed'  THEN Seed else null END asc,
 	CASE WHEN @SortCol = 'Team_D'  THEN Team else null END desc,
	CASE WHEN @SortCol = 'Team'  THEN Team else null END asc,
 	CASE WHEN @SortCol = 'Fee_D'  THEN Fee else null END desc,
	CASE WHEN @SortCol = 'Fee'  THEN Fee else null END asc,
 	CASE WHEN @SortCol = 'EntryDate_D'  THEN EntryDate else null END desc,
	CASE WHEN @SortCol = 'EntryDate'  THEN EntryDate else null END asc,
 	CASE WHEN @SortCol = 'Clydesdale_D'  THEN Clydesdale else null END desc,
	CASE WHEN @SortCol = 'Clydesdale'  THEN Clydesdale else null END asc,
 	CASE WHEN @SortCol = 'Survivor_D'  THEN Survivor else null END desc,
	CASE WHEN @SortCol = 'Survivor'  THEN Survivor else null END asc,
 	CASE WHEN @SortCol = 'NonCompetitive_D'  THEN NonCompetitive else null END desc,
	CASE WHEN @SortCol = 'NonCompetitive'  THEN NonCompetitive else null END asc,
 	CASE WHEN @SortCol = 'USATF_D'  THEN USATF else null END desc,
	CASE WHEN @SortCol = 'USATF'  THEN USATF else null END asc,
 	CASE WHEN @SortCol = 'Age_D'  THEN Age else null END desc,
	CASE WHEN @SortCol = 'Age'  THEN Age else null END asc,
 	CASE WHEN @SortCol = 'Sex_D'  THEN Sex else null END desc,
	CASE WHEN @SortCol = 'Sex'  THEN Sex else null END asc,
 	CASE WHEN @SortCol = 'Weight_D'  THEN Weight else null END desc,
	CASE WHEN @SortCol = 'Weight'  THEN Weight else null END asc,
 	CASE WHEN @SortCol = 'Heat_D'  THEN Heat else null END desc,
	CASE WHEN @SortCol = 'Heat'  THEN Heat else null END asc,
 	CASE WHEN @SortCol = 'WaveOffset_D'  THEN WaveOffset else null END desc,
	CASE WHEN @SortCol = 'WaveOffset'  THEN WaveOffset else null END asc,
 	CASE WHEN @SortCol = 'WAVATime_D'  THEN WAVATime else null END desc,
	CASE WHEN @SortCol = 'WAVATime'  THEN WAVATime else null END asc,
 	CASE WHEN @SortCol = 'PerformancePercent_D'  THEN PerformancePercent else null END desc,
	CASE WHEN @SortCol = 'PerformancePercent'  THEN PerformancePercent else null END asc,
 	CASE WHEN @SortCol = 'SeriesPlace_D'  THEN SeriesPlace else null END desc,
	CASE WHEN @SortCol = 'SeriesPlace'  THEN SeriesPlace else null END asc,
 	CASE WHEN @SortCol = 'SeriesAge_D'  THEN SeriesAge else null END desc,
	CASE WHEN @SortCol = 'SeriesAge'  THEN SeriesAge else null END asc,
 	CASE WHEN @SortCol = 'SeriesDivision_D'  THEN SeriesDivision else null END desc,
	CASE WHEN @SortCol = 'SeriesDivision'  THEN SeriesDivision else null END asc,
 	CASE WHEN @SortCol = 'SeriesPoints_D'  THEN SeriesPoints else null END desc,
	CASE WHEN @SortCol = 'SeriesPoints'  THEN SeriesPoints else null END asc,
 	CASE WHEN @SortCol = 'Confirmation_D'  THEN Confirmation else null END desc,
	CASE WHEN @SortCol = 'Confirmation'  THEN Confirmation else null END asc,
 	CASE WHEN @SortCol = 'Results_D'  THEN Results else null END desc,
	CASE WHEN @SortCol = 'Results'  THEN Results else null END asc,
 	CASE WHEN @SortCol = 'ChipId_D'  THEN ChipId else null END desc,
	CASE WHEN @SortCol = 'ChipId'  THEN ChipId else null END asc,
 	CASE WHEN @SortCol = 'AwardDivision_D'  THEN AwardDivision else null END desc,
	CASE WHEN @SortCol = 'AwardDivision'  THEN AwardDivision else null END asc,
 	CASE WHEN @SortCol = 'AwardPlace_D'  THEN AwardPlace else null END desc,
	CASE WHEN @SortCol = 'AwardPlace'  THEN AwardPlace else null END asc,
 	CASE WHEN @SortCol = 'AwardPriority_D'  THEN AwardPriority else null END desc,
	CASE WHEN @SortCol = 'AwardPriority'  THEN AwardPriority else null END asc

SELECT 
	t1.PortalId,
 	t1.RunnerId,
 	t1.RaceId,
 	t1.BibNumber,
 	t1.Division,
 	t1.DivisionPlace,
 	t1.DivisionTotal,
 	t1.SexPlace,
 	t1.SexTotal,
 	t1.GunTime,
 	t1.NetTime,
 	t1.Pace,
 	t1.Place,
 	t1.Seed,
 	t1.Team,
 	t1.Fee,
 	t1.EntryDate,
 	t1.Clydesdale,
 	t1.Survivor,
 	t1.NonCompetitive,
 	t1.USATF,
 	t1.Age,
 	t1.Sex,
 	t1.Weight,
 	t1.Heat,
 	t1.WaveOffset,
 	t1.WAVATime,
 	t1.PerformancePercent,
 	t1.SeriesPlace,
 	t1.SeriesAge,
 	t1.SeriesDivision,
 	t1.SeriesPoints,
 	t1.Confirmation,
 	t1.Results,
 	t1.ChipId,
 	t1.AwardDivision,
 	t1.AwardPlace,
 	t1.AwardPriority
FROM 
	{objectQualifier}tblEvents t1
INNER JOIN 
	@tabTempSort t2 
ON
	t1.RunnerId = t2.RunnerId,
 	t1.RaceId = t2.RaceId
WHERE 
	RowNum BETWEEN (@RequiredPage - 1) * @RecordsPerPage + 1 
	AND @RequiredPage * @RecordsPerPage 

SELECT @TotalRows = COUNT(*) FROM @tabTempSort
GO	

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* =====================================================================================
 *   TABLE: tblEventTypes
 * ===================================================================================== */


/** Create Table **/
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}tblEventTypes]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}tblEventTypes]
		(
			[PortalId] Int  ,
			[EventTypeId] Int NOT NULL  ,
			[EventTypeName] NVarChar  ,
			[DefaultType] SmallInt  
		)
		

		
		ALTER TABLE {databaseOwner}[{objectQualifier}tblEventTypes] 
			ADD CONSTRAINT [aaaaaClubEventTypes_PK] PRIMARY KEY CLUSTERED  (  [EventTypeId] )
		
		

		
		-- Uncomment following line to create index on ModuleID
		-- CREATE NONCLUSTERED INDEX [IX_{objectQualifier}YourCompany_test2] ON {databaseOwner}[{objectQualifier}YourCompany_test2] ([ModuleID])




		/******************************** Update Default Values of columns  *****************************/
		ALTER TABLE {databaseOwner}[{objectQualifier}tblEventTypes] WITH NOCHECK ADD 	
			CONSTRAINT [DF_tblEventTypes_PortalId] DEFAULT ((0)) FOR [PortalId],
			CONSTRAINT [DF_tblEventTypes_EventTypeId] DEFAULT ((0)) FOR [EventTypeId],
			CONSTRAINT [DF_tblEventTypes_DefaultType] DEFAULT ((0)) FOR [DefaultType]
		
	
	
		
		/********************************** Update Description of columns  *******************************/

	END
GO


/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventTypesGet    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventTypesGet') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventTypesGet
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventTypesList    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventTypesList') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventTypesList
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventTypesAdd    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventTypesAdd') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventTypesAdd
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventTypesUpdate    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventTypesUpdate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventTypesUpdate
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventTypesDelete    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventTypesDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventTypesDelete
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblEventTypesGetPage    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblEventTypesGetPage') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblEventTypesGetPage
GO
	

/* -------------------------------------------------------------------------------------
/   tblEventTypesGet
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventTypesGet
	@EventTypeId int
	
AS

SELECT
	[{objectQualifier}tblEventTypes].[PortalId],
	[{objectQualifier}tblEventTypes].[EventTypeId],
	[{objectQualifier}tblEventTypes].[EventTypeName],
	[{objectQualifier}tblEventTypes].[DefaultType]
FROM [{objectQualifier}tblEventTypes]
WHERE
	[{objectQualifier}tblEventTypes].[EventTypeId] = @EventTypeId
	
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEventTypesList 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventTypesList
  
 @PortalId int 
AS

SELECT
	[{objectQualifier}tblEventTypes].[PortalId],
	[{objectQualifier}tblEventTypes].[EventTypeId],
	[{objectQualifier}tblEventTypes].[EventTypeName],
	[{objectQualifier}tblEventTypes].[DefaultType]
FROM [{objectQualifier}tblEventTypes]

 WHERE [{objectQualifier}tblEventTypes].[PortalId]=@PortalId 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


/* -------------------------------------------------------------------------------------
/   tblEventTypesAdd
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventTypesAdd
	@PortalId int
	,@EventTypeName nvarchar(50)
	,@DefaultType smallint
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

INSERT INTO {objectQualifier}tblEventTypes (
	[PortalId]
	,[EventTypeName]
	,[DefaultType]
) VALUES (
	@PortalId
	,@EventTypeName
	,@DefaultType
)

select SCOPE_IDENTITY()
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEventTypesUpdate
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventTypesUpdate
	@EventTypeId int, 
	@PortalId int, 
	@EventTypeName nvarchar(50), 
	@DefaultType smallint 

AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

UPDATE {objectQualifier}tblEventTypes SET
	   [PortalId] = @PortalId
	   ,[EventTypeName] = @EventTypeName
	   ,[DefaultType] = @DefaultType
WHERE
    
	[{objectQualifier}tblEventTypes].[EventTypeId] = @EventTypeId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEventTypesDelete
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventTypesDelete
	@EventTypeId int
    
	AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

DELETE FROM {objectQualifier}tblEventTypes
WHERE 
	[{objectQualifier}tblEventTypes].[EventTypeId] = @EventTypeId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblEventTypesGetPage
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblEventTypesGetPage
	@SortCol NVARCHAR(30),
	@RequiredPage INT,
	@RecordsPerPage INT,
	@TotalRows INT OUTPUT
AS
DECLARE @tabTempSort TABLE(
	RowNum INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		EventTypeId int
)
	
INSERT @tabTempSort 
(
	EventTypeId
)
SELECT	
	EventTypeId
FROM 
	{objectQualifier}tblEventTypes
ORDER BY 
	CASE WHEN @SortCol = 'PortalId_D'  THEN PortalId else null END desc,
	CASE WHEN @SortCol = 'PortalId'  THEN PortalId else null END asc,
 	CASE WHEN @SortCol = 'EventTypeId_D'  THEN EventTypeId else null END desc,
	CASE WHEN @SortCol = 'EventTypeId'  THEN EventTypeId else null END asc,
 	CASE WHEN @SortCol = 'EventTypeName_D'  THEN EventTypeName else null END desc,
	CASE WHEN @SortCol = 'EventTypeName'  THEN EventTypeName else null END asc,
 	CASE WHEN @SortCol = 'DefaultType_D'  THEN DefaultType else null END desc,
	CASE WHEN @SortCol = 'DefaultType'  THEN DefaultType else null END asc

SELECT 
	t1.PortalId,
 	t1.EventTypeId,
 	t1.EventTypeName,
 	t1.DefaultType
FROM 
	{objectQualifier}tblEventTypes t1
INNER JOIN 
	@tabTempSort t2 
ON
	t1.EventTypeId = t2.EventTypeId
WHERE 
	RowNum BETWEEN (@RequiredPage - 1) * @RecordsPerPage + 1 
	AND @RequiredPage * @RecordsPerPage 

SELECT @TotalRows = COUNT(*) FROM @tabTempSort
GO	

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* =====================================================================================
 *   TABLE: tblMemberTypes
 * ===================================================================================== */


/** Create Table **/
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}tblMemberTypes]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}tblMemberTypes]
		(
			[PortalId] Int  ,
			[MemberTypeID] Int IDENTITY(1, 1) NOT NULL  ,
			[MemberType] NVarChar NOT NULL  ,
			[MemberDues] Money  
		)
		

		
		ALTER TABLE {databaseOwner}[{objectQualifier}tblMemberTypes] 
			ADD CONSTRAINT [aaaaaMemberTypes_PK] PRIMARY KEY CLUSTERED  (  [MemberTypeID] )
		
		

		
		-- Uncomment following line to create index on ModuleID
		-- CREATE NONCLUSTERED INDEX [IX_{objectQualifier}YourCompany_test2] ON {databaseOwner}[{objectQualifier}YourCompany_test2] ([ModuleID])




		/******************************** Update Default Values of columns  *****************************/
	
	
		
		/********************************** Update Description of columns  *******************************/

	END
GO


/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblMemberTypesGet    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblMemberTypesGet') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblMemberTypesGet
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblMemberTypesList    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblMemberTypesList') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblMemberTypesList
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblMemberTypesAdd    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblMemberTypesAdd') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblMemberTypesAdd
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblMemberTypesUpdate    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblMemberTypesUpdate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblMemberTypesUpdate
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblMemberTypesDelete    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblMemberTypesDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblMemberTypesDelete
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblMemberTypesGetPage    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblMemberTypesGetPage') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblMemberTypesGetPage
GO
	

/* -------------------------------------------------------------------------------------
/   tblMemberTypesGet
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblMemberTypesGet
	@MemberTypeID int
	
AS

SELECT
	[{objectQualifier}tblMemberTypes].[PortalId],
	[{objectQualifier}tblMemberTypes].[MemberTypeID],
	[{objectQualifier}tblMemberTypes].[MemberType],
	[{objectQualifier}tblMemberTypes].[MemberDues]
FROM [{objectQualifier}tblMemberTypes]
WHERE
	[{objectQualifier}tblMemberTypes].[MemberTypeID] = @MemberTypeID
	
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblMemberTypesList 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblMemberTypesList
  
 @PortalId int 
AS

SELECT
	[{objectQualifier}tblMemberTypes].[PortalId],
	[{objectQualifier}tblMemberTypes].[MemberTypeID],
	[{objectQualifier}tblMemberTypes].[MemberType],
	[{objectQualifier}tblMemberTypes].[MemberDues]
FROM [{objectQualifier}tblMemberTypes]

 WHERE [{objectQualifier}tblMemberTypes].[PortalId]=@PortalId 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


/* -------------------------------------------------------------------------------------
/   tblMemberTypesAdd
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblMemberTypesAdd
	@PortalId int
	,@MemberType nvarchar(50)
	,@MemberDues money
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

INSERT INTO {objectQualifier}tblMemberTypes (
	[PortalId]
	,[MemberType]
	,[MemberDues]
) VALUES (
	@PortalId
	,@MemberType
	,@MemberDues
)

select SCOPE_IDENTITY()
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblMemberTypesUpdate
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}tblMemberTypesUpdate
	@MemberTypeID int, 
	@PortalId int, 
	@MemberType nvarchar(50), 
	@MemberDues money 

AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

UPDATE {objectQualifier}tblMemberTypes SET
	   [PortalId] = @PortalId
	   ,[MemberType] = @MemberType
	   ,[MemberDues] = @MemberDues
WHERE
    
	[{objectQualifier}tblMemberTypes].[MemberTypeID] = @MemberTypeID
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblMemberTypesDelete
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}tblMemberTypesDelete
	@MemberTypeID int
    
	AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

DELETE FROM {objectQualifier}tblMemberTypes
WHERE 
	[{objectQualifier}tblMemberTypes].[MemberTypeID] = @MemberTypeID
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblMemberTypesGetPage
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblMemberTypesGetPage
	@SortCol NVARCHAR(30),
	@RequiredPage INT,
	@RecordsPerPage INT,
	@TotalRows INT OUTPUT
AS
DECLARE @tabTempSort TABLE(
	RowNum INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		MemberTypeID int
)
	
INSERT @tabTempSort 
(
	MemberTypeID
)
SELECT	
	MemberTypeID
FROM 
	{objectQualifier}tblMemberTypes
ORDER BY 
	CASE WHEN @SortCol = 'PortalId_D'  THEN PortalId else null END desc,
	CASE WHEN @SortCol = 'PortalId'  THEN PortalId else null END asc,
 	CASE WHEN @SortCol = 'MemberTypeID_D'  THEN MemberTypeID else null END desc,
	CASE WHEN @SortCol = 'MemberTypeID'  THEN MemberTypeID else null END asc,
 	CASE WHEN @SortCol = 'MemberType_D'  THEN MemberType else null END desc,
	CASE WHEN @SortCol = 'MemberType'  THEN MemberType else null END asc,
 	CASE WHEN @SortCol = 'MemberDues_D'  THEN MemberDues else null END desc,
	CASE WHEN @SortCol = 'MemberDues'  THEN MemberDues else null END asc

SELECT 
	t1.PortalId,
 	t1.MemberTypeID,
 	t1.MemberType,
 	t1.MemberDues
FROM 
	{objectQualifier}tblMemberTypes t1
INNER JOIN 
	@tabTempSort t2 
ON
	t1.MemberTypeID = t2.MemberTypeID
WHERE 
	RowNum BETWEEN (@RequiredPage - 1) * @RecordsPerPage + 1 
	AND @RequiredPage * @RecordsPerPage 

SELECT @TotalRows = COUNT(*) FROM @tabTempSort
GO	

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* =====================================================================================
 *   TABLE: tblOrganization
 * ===================================================================================== */


/** Create Table **/
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}tblOrganization]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}tblOrganization]
		(
			[PortalId] Int  ,
			[OrgID] Int IDENTITY(1, 1) NOT NULL  ,
			[ClubName] NVarChar  ,
			[Address] NVarChar  ,
			[City] NVarChar  ,
			[StateOrProvince] NVarChar  ,
			[PostalCode] NVarChar  ,
			[Country] NVarChar  ,
			[DefaultInvoiceDescription] NText  ,
			[PhoneNumber] NVarChar  ,
			[FaxNumber] NVarChar  ,
			[EMail] NVarChar  ,
			[Nickname] NVarChar  ,
			[MailingExpirePeriod] SmallInt  ,
			[LastEmail] DateTime  ,
			[LastLetters] DateTime  
		)
		

		
		ALTER TABLE {databaseOwner}[{objectQualifier}tblOrganization] 
			ADD CONSTRAINT [aaaaatblOrganization_PK] PRIMARY KEY CLUSTERED  (  [OrgID] )
		
		

		
		-- Uncomment following line to create index on ModuleID
		-- CREATE NONCLUSTERED INDEX [IX_{objectQualifier}YourCompany_test2] ON {databaseOwner}[{objectQualifier}YourCompany_test2] ([ModuleID])




		/******************************** Update Default Values of columns  *****************************/
		ALTER TABLE {databaseOwner}[{objectQualifier}tblOrganization] WITH NOCHECK ADD 	
			CONSTRAINT [DF_tblOrganization_MailingExpirePeriod] DEFAULT ((0)) FOR [MailingExpirePeriod]
		
	
	
		
		/********************************** Update Description of columns  *******************************/

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'ClubName'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Full Name of Club' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'ClubName'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'Address'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Club's Mailing Address' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'Address'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'City'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Club's Mailing City' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'City'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'StateOrProvince'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Club's Mailing State or Province' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'StateOrProvince'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'PostalCode'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Club's Postal Code' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'PostalCode'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'Country'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Club's County' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'Country'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'DefaultInvoiceDescription'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Default Invoice Description' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'DefaultInvoiceDescription'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'PhoneNumber'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Club's Phone Number' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'PhoneNumber'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'FaxNumber'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Club's FAX Number' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'FaxNumber'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'EMail'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Club's Email Address' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'EMail'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'Nickname'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Club's nickname or abbreviation' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'Nickname'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'MailingExpirePeriod'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Amount of time after membership lapses that mailings will continue' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'MailingExpirePeriod'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'LastEmail'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date of last bulk email to Club members' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'LastEmail'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblOrganization]', N'COLUMN',N'LastLetters'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date of last renewal/New member letters' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblOrganization]', @level2type=N'COLUMN',@level2name=N'LastLetters'
        GO

	END
GO


/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblOrganizationGet    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblOrganizationGet') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblOrganizationGet
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblOrganizationList    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblOrganizationList') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblOrganizationList
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblOrganizationAdd    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblOrganizationAdd') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblOrganizationAdd
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblOrganizationUpdate    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblOrganizationUpdate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblOrganizationUpdate
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblOrganizationDelete    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblOrganizationDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblOrganizationDelete
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblOrganizationGetPage    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblOrganizationGetPage') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblOrganizationGetPage
GO
	

/* -------------------------------------------------------------------------------------
/   tblOrganizationGet
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblOrganizationGet
	@OrgID int
	
AS

SELECT
	[{objectQualifier}tblOrganization].[PortalId],
	[{objectQualifier}tblOrganization].[OrgID],
	[{objectQualifier}tblOrganization].[ClubName],
	[{objectQualifier}tblOrganization].[Address],
	[{objectQualifier}tblOrganization].[City],
	[{objectQualifier}tblOrganization].[StateOrProvince],
	[{objectQualifier}tblOrganization].[PostalCode],
	[{objectQualifier}tblOrganization].[Country],
	[{objectQualifier}tblOrganization].[DefaultInvoiceDescription],
	[{objectQualifier}tblOrganization].[PhoneNumber],
	[{objectQualifier}tblOrganization].[FaxNumber],
	[{objectQualifier}tblOrganization].[EMail],
	[{objectQualifier}tblOrganization].[Nickname],
	[{objectQualifier}tblOrganization].[MailingExpirePeriod],
	[{objectQualifier}tblOrganization].[LastEmail],
	[{objectQualifier}tblOrganization].[LastLetters]
FROM [{objectQualifier}tblOrganization]
WHERE
	[{objectQualifier}tblOrganization].[OrgID] = @OrgID
	
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblOrganizationList 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblOrganizationList
  
 @PortalId int 
AS

SELECT
	[{objectQualifier}tblOrganization].[PortalId],
	[{objectQualifier}tblOrganization].[OrgID],
	[{objectQualifier}tblOrganization].[ClubName],
	[{objectQualifier}tblOrganization].[Address],
	[{objectQualifier}tblOrganization].[City],
	[{objectQualifier}tblOrganization].[StateOrProvince],
	[{objectQualifier}tblOrganization].[PostalCode],
	[{objectQualifier}tblOrganization].[Country],
	[{objectQualifier}tblOrganization].[DefaultInvoiceDescription],
	[{objectQualifier}tblOrganization].[PhoneNumber],
	[{objectQualifier}tblOrganization].[FaxNumber],
	[{objectQualifier}tblOrganization].[EMail],
	[{objectQualifier}tblOrganization].[Nickname],
	[{objectQualifier}tblOrganization].[MailingExpirePeriod],
	[{objectQualifier}tblOrganization].[LastEmail],
	[{objectQualifier}tblOrganization].[LastLetters]
FROM [{objectQualifier}tblOrganization]

 WHERE [{objectQualifier}tblOrganization].[PortalId]=@PortalId 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


/* -------------------------------------------------------------------------------------
/   tblOrganizationAdd
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblOrganizationAdd
	@PortalId int
	,@ClubName nvarchar(50)
	,@Address nvarchar(255)
	,@City nvarchar(50)
	,@StateOrProvince nvarchar(20)
	,@PostalCode nvarchar(20)
	,@Country nvarchar(50)
	,@DefaultInvoiceDescription ntext
	,@PhoneNumber nvarchar(30)
	,@FaxNumber nvarchar(30)
	,@EMail nvarchar(50)
	,@Nickname nvarchar(12)
	,@MailingExpirePeriod smallint
	,@LastEmail datetime
	,@LastLetters datetime
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

INSERT INTO {objectQualifier}tblOrganization (
	[PortalId]
	,[ClubName]
	,[Address]
	,[City]
	,[StateOrProvince]
	,[PostalCode]
	,[Country]
	,[DefaultInvoiceDescription]
	,[PhoneNumber]
	,[FaxNumber]
	,[EMail]
	,[Nickname]
	,[MailingExpirePeriod]
	,[LastEmail]
	,[LastLetters]
) VALUES (
	@PortalId
	,@ClubName
	,@Address
	,@City
	,@StateOrProvince
	,@PostalCode
	,@Country
	,@DefaultInvoiceDescription
	,@PhoneNumber
	,@FaxNumber
	,@EMail
	,@Nickname
	,@MailingExpirePeriod
	,@LastEmail
	,@LastLetters
)

select SCOPE_IDENTITY()
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblOrganizationUpdate
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}tblOrganizationUpdate
	@OrgID int, 
	@PortalId int, 
	@ClubName nvarchar(50), -- Full Name of Club
	@Address nvarchar(255), -- Club's Mailing Address
	@City nvarchar(50), -- Club's Mailing City
	@StateOrProvince nvarchar(20), -- Club's Mailing State or Province
	@PostalCode nvarchar(20), -- Club's Postal Code
	@Country nvarchar(50), -- Club's County
	@DefaultInvoiceDescription ntext, -- Default Invoice Description
	@PhoneNumber nvarchar(30), -- Club's Phone Number
	@FaxNumber nvarchar(30), -- Club's FAX Number
	@EMail nvarchar(50), -- Club's Email Address
	@Nickname nvarchar(12), -- Club's nickname or abbreviation
	@MailingExpirePeriod smallint, -- Amount of time after membership lapses that mailings will continue
	@LastEmail datetime, -- Date of last bulk email to Club members
	@LastLetters datetime -- Date of last renewal/New member letters

AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

UPDATE {objectQualifier}tblOrganization SET
	   [PortalId] = @PortalId
	   ,[ClubName] = @ClubName
	   ,[Address] = @Address
	   ,[City] = @City
	   ,[StateOrProvince] = @StateOrProvince
	   ,[PostalCode] = @PostalCode
	   ,[Country] = @Country
	   ,[DefaultInvoiceDescription] = @DefaultInvoiceDescription
	   ,[PhoneNumber] = @PhoneNumber
	   ,[FaxNumber] = @FaxNumber
	   ,[EMail] = @EMail
	   ,[Nickname] = @Nickname
	   ,[MailingExpirePeriod] = @MailingExpirePeriod
	   ,[LastEmail] = @LastEmail
	   ,[LastLetters] = @LastLetters
WHERE
    
	[{objectQualifier}tblOrganization].[OrgID] = @OrgID
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblOrganizationDelete
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}tblOrganizationDelete
	@OrgID int
    
	AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

DELETE FROM {objectQualifier}tblOrganization
WHERE 
	[{objectQualifier}tblOrganization].[OrgID] = @OrgID
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblOrganizationGetPage
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblOrganizationGetPage
	@SortCol NVARCHAR(30),
	@RequiredPage INT,
	@RecordsPerPage INT,
	@TotalRows INT OUTPUT
AS
DECLARE @tabTempSort TABLE(
	RowNum INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		OrgID int
)
	
INSERT @tabTempSort 
(
	OrgID
)
SELECT	
	OrgID
FROM 
	{objectQualifier}tblOrganization
ORDER BY 
	CASE WHEN @SortCol = 'PortalId_D'  THEN PortalId else null END desc,
	CASE WHEN @SortCol = 'PortalId'  THEN PortalId else null END asc,
 	CASE WHEN @SortCol = 'OrgID_D'  THEN OrgID else null END desc,
	CASE WHEN @SortCol = 'OrgID'  THEN OrgID else null END asc,
 	CASE WHEN @SortCol = 'ClubName_D'  THEN ClubName else null END desc,
	CASE WHEN @SortCol = 'ClubName'  THEN ClubName else null END asc,
 	CASE WHEN @SortCol = 'Address_D'  THEN Address else null END desc,
	CASE WHEN @SortCol = 'Address'  THEN Address else null END asc,
 	CASE WHEN @SortCol = 'City_D'  THEN City else null END desc,
	CASE WHEN @SortCol = 'City'  THEN City else null END asc,
 	CASE WHEN @SortCol = 'StateOrProvince_D'  THEN StateOrProvince else null END desc,
	CASE WHEN @SortCol = 'StateOrProvince'  THEN StateOrProvince else null END asc,
 	CASE WHEN @SortCol = 'PostalCode_D'  THEN PostalCode else null END desc,
	CASE WHEN @SortCol = 'PostalCode'  THEN PostalCode else null END asc,
 	CASE WHEN @SortCol = 'Country_D'  THEN Country else null END desc,
	CASE WHEN @SortCol = 'Country'  THEN Country else null END asc,
 	CASE WHEN @SortCol = 'PhoneNumber_D'  THEN PhoneNumber else null END desc,
	CASE WHEN @SortCol = 'PhoneNumber'  THEN PhoneNumber else null END asc,
 	CASE WHEN @SortCol = 'FaxNumber_D'  THEN FaxNumber else null END desc,
	CASE WHEN @SortCol = 'FaxNumber'  THEN FaxNumber else null END asc,
 	CASE WHEN @SortCol = 'EMail_D'  THEN EMail else null END desc,
	CASE WHEN @SortCol = 'EMail'  THEN EMail else null END asc,
 	CASE WHEN @SortCol = 'Nickname_D'  THEN Nickname else null END desc,
	CASE WHEN @SortCol = 'Nickname'  THEN Nickname else null END asc,
 	CASE WHEN @SortCol = 'MailingExpirePeriod_D'  THEN MailingExpirePeriod else null END desc,
	CASE WHEN @SortCol = 'MailingExpirePeriod'  THEN MailingExpirePeriod else null END asc,
 	CASE WHEN @SortCol = 'LastEmail_D'  THEN LastEmail else null END desc,
	CASE WHEN @SortCol = 'LastEmail'  THEN LastEmail else null END asc,
 	CASE WHEN @SortCol = 'LastLetters_D'  THEN LastLetters else null END desc,
	CASE WHEN @SortCol = 'LastLetters'  THEN LastLetters else null END asc

SELECT 
	t1.PortalId,
 	t1.OrgID,
 	t1.ClubName,
 	t1.Address,
 	t1.City,
 	t1.StateOrProvince,
 	t1.PostalCode,
 	t1.Country,
 	t1.DefaultInvoiceDescription,
 	t1.PhoneNumber,
 	t1.FaxNumber,
 	t1.EMail,
 	t1.Nickname,
 	t1.MailingExpirePeriod,
 	t1.LastEmail,
 	t1.LastLetters
FROM 
	{objectQualifier}tblOrganization t1
INNER JOIN 
	@tabTempSort t2 
ON
	t1.OrgID = t2.OrgID
WHERE 
	RowNum BETWEEN (@RequiredPage - 1) * @RecordsPerPage + 1 
	AND @RequiredPage * @RecordsPerPage 

SELECT @TotalRows = COUNT(*) FROM @tabTempSort
GO	

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* =====================================================================================
 *   TABLE: tblRaceDivisions
 * ===================================================================================== */


/** Create Table **/
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}tblRaceDivisions]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}tblRaceDivisions]
		(
			[PortalId] Int  ,
			[RaceId] Int NOT NULL  ,
			[Priority] Int NOT NULL  ,
			[Sex] NVarChar  ,
			[StartAge] SmallInt  ,
			[EndAge] Int  ,
			[StartWeight] Int  ,
			[EndWeight] Int  ,
			[Survivor] Bit  ,
			[Division] NVarChar  ,
			[Depth] SmallInt  ,
			[Overall] Bit  ,
			[Masters] Bit  ,
			[USATF] Bit  
		)
		

		
		ALTER TABLE {databaseOwner}[{objectQualifier}tblRaceDivisions] 
			ADD CONSTRAINT [aaaaatblRaceDivisions_PK] PRIMARY KEY CLUSTERED  (  [RaceId], [Priority] )
		
		

		
		-- Uncomment following line to create index on ModuleID
		-- CREATE NONCLUSTERED INDEX [IX_{objectQualifier}YourCompany_test2] ON {databaseOwner}[{objectQualifier}YourCompany_test2] ([ModuleID])




		/******************************** Update Default Values of columns  *****************************/
		ALTER TABLE {databaseOwner}[{objectQualifier}tblRaceDivisions] WITH NOCHECK ADD 	
			CONSTRAINT [DF_tblRaceDivisions_RaceId] DEFAULT ((0)) FOR [RaceId],
			CONSTRAINT [DF_tblRaceDivisions_Priority] DEFAULT ((0)) FOR [Priority],
			CONSTRAINT [DF_tblRaceDivisions_StartAge] DEFAULT ((0)) FOR [StartAge],
			CONSTRAINT [DF_tblRaceDivisions_EndAge] DEFAULT ((0)) FOR [EndAge],
			CONSTRAINT [DF_tblRaceDivisions_StartWeight] DEFAULT ((0)) FOR [StartWeight],
			CONSTRAINT [DF_tblRaceDivisions_EndWeight] DEFAULT ((0)) FOR [EndWeight],
			CONSTRAINT [DF_tblRaceDivisions_Survivor] DEFAULT ((0)) FOR [Survivor],
			CONSTRAINT [DF_tblRaceDivisions_Depth] DEFAULT ((0)) FOR [Depth],
			CONSTRAINT [DF_tblRaceDivisions_Overall] DEFAULT ((0)) FOR [Overall],
			CONSTRAINT [DF_tblRaceDivisions_Masters] DEFAULT ((0)) FOR [Masters],
			CONSTRAINT [DF_tblRaceDivisions_USATF] DEFAULT ((0)) FOR [USATF]
		
	
	
		
		/********************************** Update Description of columns  *******************************/

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'RaceId'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Race Identifier' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'RaceId'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'Priority'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Award Division Priority' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'Priority'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'Sex'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Gender' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'Sex'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'StartAge'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Start of Age Group' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'StartAge'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'EndAge'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'End of Age Group' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'EndAge'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'StartWeight'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Start of Weight Group' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'StartWeight'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'EndWeight'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'End of Weight Group' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'EndWeight'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'Survivor'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Cancer Survivor' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'Survivor'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'Division'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Division' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'Division'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'Depth'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Award Depth' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'Depth'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'Overall'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Open or Overall Category' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'Overall'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'Masters'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Masters Category' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'Masters'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaceDivisions]', N'COLUMN',N'USATF'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'USATF Division' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaceDivisions]', @level2type=N'COLUMN',@level2name=N'USATF'
        GO

	END
GO


/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRaceDivisionsGet    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRaceDivisionsGet') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRaceDivisionsGet
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRaceDivisionsList    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRaceDivisionsList') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRaceDivisionsList
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRaceDivisionsGetByRaces    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRaceDivisionsGetByRaces') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRaceDivisionsGetByRaces
GO
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRaceDivisionsGetDependancies') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRaceDivisionsGetDependancies 
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRaceDivisionsAdd    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRaceDivisionsAdd') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRaceDivisionsAdd
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRaceDivisionsUpdate    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRaceDivisionsUpdate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRaceDivisionsUpdate
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRaceDivisionsDelete    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRaceDivisionsDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRaceDivisionsDelete
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRaceDivisionsGetPage    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRaceDivisionsGetPage') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRaceDivisionsGetPage
GO
	

/* -------------------------------------------------------------------------------------
/   tblRaceDivisionsGet
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRaceDivisionsGet
	@RaceId int,
	@Priority int
	
AS

SELECT
	[{objectQualifier}tblRaceDivisions].[PortalId],
	[{objectQualifier}tblRaceDivisions].[RaceId],
	[{objectQualifier}tblRaceDivisions].[Priority],
	[{objectQualifier}tblRaceDivisions].[Sex],
	[{objectQualifier}tblRaceDivisions].[StartAge],
	[{objectQualifier}tblRaceDivisions].[EndAge],
	[{objectQualifier}tblRaceDivisions].[StartWeight],
	[{objectQualifier}tblRaceDivisions].[EndWeight],
	[{objectQualifier}tblRaceDivisions].[Survivor],
	[{objectQualifier}tblRaceDivisions].[Division],
	[{objectQualifier}tblRaceDivisions].[Depth],
	[{objectQualifier}tblRaceDivisions].[Overall],
	[{objectQualifier}tblRaceDivisions].[Masters],
	[{objectQualifier}tblRaceDivisions].[USATF]
FROM [{objectQualifier}tblRaceDivisions]
WHERE
	[{objectQualifier}tblRaceDivisions].[RaceId] = @RaceId
	AND [{objectQualifier}tblRaceDivisions].[Priority] = @Priority
	
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblRaceDivisionsList 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRaceDivisionsList
  
 @PortalId int 
AS

SELECT
	[{objectQualifier}tblRaceDivisions].[PortalId],
	[{objectQualifier}tblRaceDivisions].[RaceId],
	[{objectQualifier}tblRaceDivisions].[Priority],
	[{objectQualifier}tblRaceDivisions].[Sex],
	[{objectQualifier}tblRaceDivisions].[StartAge],
	[{objectQualifier}tblRaceDivisions].[EndAge],
	[{objectQualifier}tblRaceDivisions].[StartWeight],
	[{objectQualifier}tblRaceDivisions].[EndWeight],
	[{objectQualifier}tblRaceDivisions].[Survivor],
	[{objectQualifier}tblRaceDivisions].[Division],
	[{objectQualifier}tblRaceDivisions].[Depth],
	[{objectQualifier}tblRaceDivisions].[Overall],
	[{objectQualifier}tblRaceDivisions].[Masters],
	[{objectQualifier}tblRaceDivisions].[USATF]
FROM [{objectQualifier}tblRaceDivisions]

 WHERE [{objectQualifier}tblRaceDivisions].[PortalId]=@PortalId 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblRaceDivisionsGetByRaces
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRaceDivisionsGetByRaces
	@RaceId int
AS

SELECT
	[{objectQualifier}tblRaceDivisions].[PortalId],
	[{objectQualifier}tblRaceDivisions].[RaceId],
	[{objectQualifier}tblRaceDivisions].[Priority],
	[{objectQualifier}tblRaceDivisions].[Sex],
	[{objectQualifier}tblRaceDivisions].[StartAge],
	[{objectQualifier}tblRaceDivisions].[EndAge],
	[{objectQualifier}tblRaceDivisions].[StartWeight],
	[{objectQualifier}tblRaceDivisions].[EndWeight],
	[{objectQualifier}tblRaceDivisions].[Survivor],
	[{objectQualifier}tblRaceDivisions].[Division],
	[{objectQualifier}tblRaceDivisions].[Depth],
	[{objectQualifier}tblRaceDivisions].[Overall],
	[{objectQualifier}tblRaceDivisions].[Masters],
	[{objectQualifier}tblRaceDivisions].[USATF]
FROM [{objectQualifier}tblRaceDivisions]
WHERE
	[tblRaceDivisions].[RaceId]=@RaceId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
	/* -------------------------------------------------------------------------------------
/   tblRaceDivisionsGetDependancies
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRaceDivisionsGetDependancies
	@RaceId int,
	@Priority int
	
AS

SELECT Count(*) 
FROM [{objectQualifier}Races]
WHERE
	[tblRaceDivisions].[RaceId]=@RaceId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblRaceDivisionsAdd
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRaceDivisionsAdd
	@PortalId int
	,@RaceId int
	,@Priority int
	,@Sex nvarchar(1)
	,@StartAge smallint
	,@EndAge int
	,@StartWeight int
	,@EndWeight int
	,@Survivor bit
	,@Division nvarchar(6)
	,@Depth smallint
	,@Overall bit
	,@Masters bit
	,@USATF bit
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

-- THIS STORED PROCEDURE NEEDS TO BE MANUALLY COMPLETED
-- MULITPLE PRIMARY KEY MEMBERS OR NON-GUID/INT PRIMARY KEY

INSERT INTO {objectQualifier}tblRaceDivisions (
	[PortalId]
	,[RaceId]
	,[Priority]
	,[Sex]
	,[StartAge]
	,[EndAge]
	,[StartWeight]
	,[EndWeight]
	,[Survivor]
	,[Division]
	,[Depth]
	,[Overall]
	,[Masters]
	,[USATF]
) VALUES (
	@PortalId
	,@RaceId
	,@Priority
	,@Sex
	,@StartAge
	,@EndAge
	,@StartWeight
	,@EndWeight
	,@Survivor
	,@Division
	,@Depth
	,@Overall
	,@Masters
	,@USATF
)

select SCOPE_IDENTITY()
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblRaceDivisionsUpdate
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRaceDivisionsUpdate
	@RaceId int, -- Race Identifier
	@Priority int, -- Award Division Priority
	@PortalId int, 
	@Sex nvarchar(1), -- Gender
	@StartAge smallint, -- Start of Age Group
	@EndAge int, -- End of Age Group
	@StartWeight int, -- Start of Weight Group
	@EndWeight int, -- End of Weight Group
	@Survivor bit, -- Cancer Survivor
	@Division nvarchar(6), -- Division
	@Depth smallint, -- Award Depth
	@Overall bit, -- Open or Overall Category
	@Masters bit, -- Masters Category
	@USATF bit -- USATF Division

AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

UPDATE {objectQualifier}tblRaceDivisions SET
	   [PortalId] = @PortalId
	   ,[Sex] = @Sex
	   ,[StartAge] = @StartAge
	   ,[EndAge] = @EndAge
	   ,[StartWeight] = @StartWeight
	   ,[EndWeight] = @EndWeight
	   ,[Survivor] = @Survivor
	   ,[Division] = @Division
	   ,[Depth] = @Depth
	   ,[Overall] = @Overall
	   ,[Masters] = @Masters
	   ,[USATF] = @USATF
WHERE
    
	[{objectQualifier}tblRaceDivisions].[RaceId] = @RaceId
	AND [{objectQualifier}tblRaceDivisions].[Priority] = @Priority
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblRaceDivisionsDelete
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRaceDivisionsDelete
	@RaceId int,
	@Priority int
    
	AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

DELETE FROM {objectQualifier}tblRaceDivisions
WHERE 
	[{objectQualifier}tblRaceDivisions].[RaceId] = @RaceId
	AND [{objectQualifier}tblRaceDivisions].[Priority] = @Priority
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblRaceDivisionsGetPage
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRaceDivisionsGetPage
	@SortCol NVARCHAR(30),
	@RequiredPage INT,
	@RecordsPerPage INT,
	@TotalRows INT OUTPUT
AS
DECLARE @tabTempSort TABLE(
	RowNum INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		RaceId int,
	Priority int
)
	
INSERT @tabTempSort 
(
	RaceId,
 	Priority
)
SELECT	
	RaceId,
 	Priority
FROM 
	{objectQualifier}tblRaceDivisions
ORDER BY 
	CASE WHEN @SortCol = 'PortalId_D'  THEN PortalId else null END desc,
	CASE WHEN @SortCol = 'PortalId'  THEN PortalId else null END asc,
 	CASE WHEN @SortCol = 'RaceId_D'  THEN RaceId else null END desc,
	CASE WHEN @SortCol = 'RaceId'  THEN RaceId else null END asc,
 	CASE WHEN @SortCol = 'Priority_D'  THEN Priority else null END desc,
	CASE WHEN @SortCol = 'Priority'  THEN Priority else null END asc,
 	CASE WHEN @SortCol = 'Sex_D'  THEN Sex else null END desc,
	CASE WHEN @SortCol = 'Sex'  THEN Sex else null END asc,
 	CASE WHEN @SortCol = 'StartAge_D'  THEN StartAge else null END desc,
	CASE WHEN @SortCol = 'StartAge'  THEN StartAge else null END asc,
 	CASE WHEN @SortCol = 'EndAge_D'  THEN EndAge else null END desc,
	CASE WHEN @SortCol = 'EndAge'  THEN EndAge else null END asc,
 	CASE WHEN @SortCol = 'StartWeight_D'  THEN StartWeight else null END desc,
	CASE WHEN @SortCol = 'StartWeight'  THEN StartWeight else null END asc,
 	CASE WHEN @SortCol = 'EndWeight_D'  THEN EndWeight else null END desc,
	CASE WHEN @SortCol = 'EndWeight'  THEN EndWeight else null END asc,
 	CASE WHEN @SortCol = 'Survivor_D'  THEN Survivor else null END desc,
	CASE WHEN @SortCol = 'Survivor'  THEN Survivor else null END asc,
 	CASE WHEN @SortCol = 'Division_D'  THEN Division else null END desc,
	CASE WHEN @SortCol = 'Division'  THEN Division else null END asc,
 	CASE WHEN @SortCol = 'Depth_D'  THEN Depth else null END desc,
	CASE WHEN @SortCol = 'Depth'  THEN Depth else null END asc,
 	CASE WHEN @SortCol = 'Overall_D'  THEN Overall else null END desc,
	CASE WHEN @SortCol = 'Overall'  THEN Overall else null END asc,
 	CASE WHEN @SortCol = 'Masters_D'  THEN Masters else null END desc,
	CASE WHEN @SortCol = 'Masters'  THEN Masters else null END asc,
 	CASE WHEN @SortCol = 'USATF_D'  THEN USATF else null END desc,
	CASE WHEN @SortCol = 'USATF'  THEN USATF else null END asc

SELECT 
	t1.PortalId,
 	t1.RaceId,
 	t1.Priority,
 	t1.Sex,
 	t1.StartAge,
 	t1.EndAge,
 	t1.StartWeight,
 	t1.EndWeight,
 	t1.Survivor,
 	t1.Division,
 	t1.Depth,
 	t1.Overall,
 	t1.Masters,
 	t1.USATF
FROM 
	{objectQualifier}tblRaceDivisions t1
INNER JOIN 
	@tabTempSort t2 
ON
	t1.RaceId = t2.RaceId,
 	t1.Priority = t2.Priority
WHERE 
	RowNum BETWEEN (@RequiredPage - 1) * @RecordsPerPage + 1 
	AND @RequiredPage * @RecordsPerPage 

SELECT @TotalRows = COUNT(*) FROM @tabTempSort
GO	

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* =====================================================================================
 *   TABLE: tblRaces
 * ===================================================================================== */


/** Create Table **/
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}tblRaces]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}tblRaces]
		(
			[PortalId] Int  ,
			[RaceId] Int IDENTITY(1, 1) NOT NULL  ,
			[EventType] Int  ,
			[RaceName] NVarChar  ,
			[RaceDate] DateTime  ,
			[RaceDistance] Real  ,
			[RaceLocation] NVarChar  ,
			[RaceCity] NVarChar  ,
			[RaceState] NVarChar  ,
			[RaceCountry] NVarChar  ,
			[RaceLogo] NVarChar  ,
			[USATFNumber] NVarChar  ,
			[RodaleEventId] Int  ,
			[ActiveEventId] Int  ,
			[PreregistrationDate] DateTime  ,
			[PreregistrationFee] Money  ,
			[RaceDayFee] Money  ,
			[RegistrationURL] NVarChar  ,
			[RegistrationLogo] NVarChar  ,
			[Description] NText  ,
			[EmailText] NText  ,
			[ResultsText] NText  ,
			[ResultsURL] NVarChar  ,
			[Annual] SmallInt  ,
			[Keyword] NVarChar  ,
			[LastBibNumber] Float  ,
			[ContactName] NVarChar  ,
			[ContactAddress1] NVarChar  ,
			[ContactAddress2] NVarChar  ,
			[ContactCity] NVarChar  ,
			[ContactState] NVarChar  ,
			[ContactZIP] NVarChar  ,
			[ContactPhoneNumber] NVarChar  ,
			[ContactFAX] NVarChar  ,
			[ContactEMail] NVarChar  ,
			[WEBSite] NVarChar  ,
			[RelatedRace] Int  ,
			[Organization] Int  ,
			[VolunteerContact] NVarChar  ,
			[VolunteerPhone] NVarChar  ,
			[VolunteerEmail] NVarChar  ,
			[DisplayStartDate] DateTime  ,
			[DisplayEndDate] DateTime  ,
			[InsertionDate] DateTime  ,
			[ModificationDate] DateTime  
		)
		

		
		ALTER TABLE {databaseOwner}[{objectQualifier}tblRaces] 
			ADD CONSTRAINT [aaaaaTblRaces_PK] PRIMARY KEY CLUSTERED  (  [RaceId] )
		
		

		
		-- Uncomment following line to create index on ModuleID
		-- CREATE NONCLUSTERED INDEX [IX_{objectQualifier}YourCompany_test2] ON {databaseOwner}[{objectQualifier}YourCompany_test2] ([ModuleID])




		/******************************** Update Default Values of columns  *****************************/
		ALTER TABLE {databaseOwner}[{objectQualifier}tblRaces] WITH NOCHECK ADD 	
			CONSTRAINT [DF_tblRaces_EventType] DEFAULT ((1)) FOR [EventType],
			CONSTRAINT [DF_tblRaces_RaceDistance] DEFAULT ((0)) FOR [RaceDistance],
			CONSTRAINT [DF_tblRaces_RaceCountry] DEFAULT ('USA') FOR [RaceCountry],
			CONSTRAINT [DF_tblRaces_RodaleEventId] DEFAULT ((0)) FOR [RodaleEventId],
			CONSTRAINT [DF_tblRaces_ActiveEventId] DEFAULT ((0)) FOR [ActiveEventId],
			CONSTRAINT [DF_tblRaces_PreregistrationFee] DEFAULT ((0)) FOR [PreregistrationFee],
			CONSTRAINT [DF_tblRaces_RaceDayFee] DEFAULT ((0)) FOR [RaceDayFee],
			CONSTRAINT [DF_tblRaces_Annual] DEFAULT ((0)) FOR [Annual],
			CONSTRAINT [DF_tblRaces_RelatedRace] DEFAULT ((0)) FOR [RelatedRace],
			CONSTRAINT [DF_tblRaces_Organization] DEFAULT ((0)) FOR [Organization]
		
	
	
		
		/********************************** Update Description of columns  *******************************/

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RaceId'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is a unique number identifying each race' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RaceId'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'EventType'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Event Type Race, Social' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'EventType'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RaceName'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the race' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RaceName'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RaceDate'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date and time of the race' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RaceDate'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RaceDistance'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Race Distance' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RaceDistance'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RaceLocation'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Location of the race' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RaceLocation'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RaceCity'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'City where race starts' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RaceCity'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RaceState'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State where race starts' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RaceState'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RaceCountry'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Country where race starts' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RaceCountry'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RaceLogo'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'File path to race logo' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RaceLogo'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'USATFNumber'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'USATF Certificate Number' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'USATFNumber'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RodaleEventId'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Rodale Event Id' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RodaleEventId'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'ActiveEventId'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Active.Com Event Id' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'ActiveEventId'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'PreregistrationDate'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The preregistration cutoff date' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'PreregistrationDate'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'PreregistrationFee'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The preregistation race fee' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'PreregistrationFee'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RaceDayFee'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The race fee after the preregistration cutoff' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RaceDayFee'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RegistrationURL'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URL for registration WEB site' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RegistrationURL'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RegistrationLogo'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'File path to registration company graphic' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RegistrationLogo'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'Description'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the race' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'Description'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'EmailText'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Text for promotional emails' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'EmailText'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'ResultsText'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Text for results emails' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'ResultsText'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'ResultsURL'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URL for results WEB site' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'ResultsURL'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'Annual'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The nth annual' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'Annual'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'Keyword'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shorthand keyword identifying the race' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'Keyword'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'LastBibNumber'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last Bib number assigned' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'LastBibNumber'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'ContactName'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The race contact' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'ContactName'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'ContactAddress1'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The contact address' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'ContactAddress1'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'ContactCity'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The contact city' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'ContactCity'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'ContactState'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The contact state' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'ContactState'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'ContactZIP'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The contact ZIP Code' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'ContactZIP'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'ContactPhoneNumber'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The phone number for the race contact' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'ContactPhoneNumber'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'ContactFAX'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'FAX Number for Contact' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'ContactFAX'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'ContactEMail'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Email address for Contact' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'ContactEMail'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'WEBSite'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URL for race WEB page' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'WEBSite'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'RelatedRace'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Link to another related race the same day' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'RelatedRace'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'Organization'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Organizing club' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'Organization'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'VolunteerContact'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of Volunteer Coodinator' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'VolunteerContact'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'VolunteerPhone'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Volunteer coordinator phone number' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'VolunteerPhone'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'VolunteerEmail'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Volunteer coordinator email' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'VolunteerEmail'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'DisplayStartDate'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date event starts displaying on web calendars' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'DisplayStartDate'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'DisplayEndDate'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date event stops displaying on web calendars' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'DisplayEndDate'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'InsertionDate'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the record was inserted into the database' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'InsertionDate'
        GO

        IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'{databaseOwner}', N'TABLE',N'[{objectQualifier}tblRaces]', N'COLUMN',N'ModificationDate'))
        EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the record was last modified' , @level0type=N'SCHEMA',@level0name=N'{databaseOwner}', @level1type=N'TABLE',@level1name=N'[{objectQualifier}tblRaces]', @level2type=N'COLUMN',@level2name=N'ModificationDate'
        GO

	END
GO


/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRacesGet    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRacesGet') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRacesGet
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRacesList    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRacesList') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRacesList
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRacesGetByEventTypes    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRacesGetByEventTypes') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRacesGetByEventTypes
GO
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRacesGetDependancies') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRacesGetDependancies 
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRacesAdd    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRacesAdd') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRacesAdd
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRacesUpdate    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRacesUpdate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRacesUpdate
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRacesDelete    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRacesDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRacesDelete
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblRacesGetPage    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblRacesGetPage') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblRacesGetPage
GO
	

/* -------------------------------------------------------------------------------------
/   tblRacesGet
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRacesGet
	@RaceId int
	
AS

SELECT
	[{objectQualifier}tblRaces].[PortalId],
	[{objectQualifier}tblRaces].[RaceId],
	[{objectQualifier}tblRaces].[EventType],
	[{objectQualifier}tblRaces].[RaceName],
	[{objectQualifier}tblRaces].[RaceDate],
	[{objectQualifier}tblRaces].[RaceDistance],
	[{objectQualifier}tblRaces].[RaceLocation],
	[{objectQualifier}tblRaces].[RaceCity],
	[{objectQualifier}tblRaces].[RaceState],
	[{objectQualifier}tblRaces].[RaceCountry],
	[{objectQualifier}tblRaces].[RaceLogo],
	[{objectQualifier}tblRaces].[USATFNumber],
	[{objectQualifier}tblRaces].[RodaleEventId],
	[{objectQualifier}tblRaces].[ActiveEventId],
	[{objectQualifier}tblRaces].[PreregistrationDate],
	[{objectQualifier}tblRaces].[PreregistrationFee],
	[{objectQualifier}tblRaces].[RaceDayFee],
	[{objectQualifier}tblRaces].[RegistrationURL],
	[{objectQualifier}tblRaces].[RegistrationLogo],
	[{objectQualifier}tblRaces].[Description],
	[{objectQualifier}tblRaces].[EmailText],
	[{objectQualifier}tblRaces].[ResultsText],
	[{objectQualifier}tblRaces].[ResultsURL],
	[{objectQualifier}tblRaces].[Annual],
	[{objectQualifier}tblRaces].[Keyword],
	[{objectQualifier}tblRaces].[LastBibNumber],
	[{objectQualifier}tblRaces].[ContactName],
	[{objectQualifier}tblRaces].[ContactAddress1],
	[{objectQualifier}tblRaces].[ContactAddress2],
	[{objectQualifier}tblRaces].[ContactCity],
	[{objectQualifier}tblRaces].[ContactState],
	[{objectQualifier}tblRaces].[ContactZIP],
	[{objectQualifier}tblRaces].[ContactPhoneNumber],
	[{objectQualifier}tblRaces].[ContactFAX],
	[{objectQualifier}tblRaces].[ContactEMail],
	[{objectQualifier}tblRaces].[WEBSite],
	[{objectQualifier}tblRaces].[RelatedRace],
	[{objectQualifier}tblRaces].[Organization],
	[{objectQualifier}tblRaces].[VolunteerContact],
	[{objectQualifier}tblRaces].[VolunteerPhone],
	[{objectQualifier}tblRaces].[VolunteerEmail],
	[{objectQualifier}tblRaces].[DisplayStartDate],
	[{objectQualifier}tblRaces].[DisplayEndDate],
	[{objectQualifier}tblRaces].[InsertionDate],
	[{objectQualifier}tblRaces].[ModificationDate]
FROM [{objectQualifier}tblRaces]
WHERE
	[{objectQualifier}tblRaces].[RaceId] = @RaceId
	
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblRacesList 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRacesList
  
 @PortalId int 
AS

SELECT
	[{objectQualifier}tblRaces].[PortalId],
	[{objectQualifier}tblRaces].[RaceId],
	[{objectQualifier}tblRaces].[EventType],
	[{objectQualifier}tblRaces].[RaceName],
	[{objectQualifier}tblRaces].[RaceDate],
	[{objectQualifier}tblRaces].[RaceDistance],
	[{objectQualifier}tblRaces].[RaceLocation],
	[{objectQualifier}tblRaces].[RaceCity],
	[{objectQualifier}tblRaces].[RaceState],
	[{objectQualifier}tblRaces].[RaceCountry],
	[{objectQualifier}tblRaces].[RaceLogo],
	[{objectQualifier}tblRaces].[USATFNumber],
	[{objectQualifier}tblRaces].[RodaleEventId],
	[{objectQualifier}tblRaces].[ActiveEventId],
	[{objectQualifier}tblRaces].[PreregistrationDate],
	[{objectQualifier}tblRaces].[PreregistrationFee],
	[{objectQualifier}tblRaces].[RaceDayFee],
	[{objectQualifier}tblRaces].[RegistrationURL],
	[{objectQualifier}tblRaces].[RegistrationLogo],
	[{objectQualifier}tblRaces].[Description],
	[{objectQualifier}tblRaces].[EmailText],
	[{objectQualifier}tblRaces].[ResultsText],
	[{objectQualifier}tblRaces].[ResultsURL],
	[{objectQualifier}tblRaces].[Annual],
	[{objectQualifier}tblRaces].[Keyword],
	[{objectQualifier}tblRaces].[LastBibNumber],
	[{objectQualifier}tblRaces].[ContactName],
	[{objectQualifier}tblRaces].[ContactAddress1],
	[{objectQualifier}tblRaces].[ContactAddress2],
	[{objectQualifier}tblRaces].[ContactCity],
	[{objectQualifier}tblRaces].[ContactState],
	[{objectQualifier}tblRaces].[ContactZIP],
	[{objectQualifier}tblRaces].[ContactPhoneNumber],
	[{objectQualifier}tblRaces].[ContactFAX],
	[{objectQualifier}tblRaces].[ContactEMail],
	[{objectQualifier}tblRaces].[WEBSite],
	[{objectQualifier}tblRaces].[RelatedRace],
	[{objectQualifier}tblRaces].[Organization],
	[{objectQualifier}tblRaces].[VolunteerContact],
	[{objectQualifier}tblRaces].[VolunteerPhone],
	[{objectQualifier}tblRaces].[VolunteerEmail],
	[{objectQualifier}tblRaces].[DisplayStartDate],
	[{objectQualifier}tblRaces].[DisplayEndDate],
	[{objectQualifier}tblRaces].[InsertionDate],
	[{objectQualifier}tblRaces].[ModificationDate]
FROM [{objectQualifier}tblRaces]

 WHERE [{objectQualifier}tblRaces].[PortalId]=@PortalId 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblRacesGetByEventTypes
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRacesGetByEventTypes
	@EventType int
AS

SELECT
	[{objectQualifier}tblRaces].[PortalId],
	[{objectQualifier}tblRaces].[RaceId],
	[{objectQualifier}tblRaces].[EventType],
	[{objectQualifier}tblRaces].[RaceName],
	[{objectQualifier}tblRaces].[RaceDate],
	[{objectQualifier}tblRaces].[RaceDistance],
	[{objectQualifier}tblRaces].[RaceLocation],
	[{objectQualifier}tblRaces].[RaceCity],
	[{objectQualifier}tblRaces].[RaceState],
	[{objectQualifier}tblRaces].[RaceCountry],
	[{objectQualifier}tblRaces].[RaceLogo],
	[{objectQualifier}tblRaces].[USATFNumber],
	[{objectQualifier}tblRaces].[RodaleEventId],
	[{objectQualifier}tblRaces].[ActiveEventId],
	[{objectQualifier}tblRaces].[PreregistrationDate],
	[{objectQualifier}tblRaces].[PreregistrationFee],
	[{objectQualifier}tblRaces].[RaceDayFee],
	[{objectQualifier}tblRaces].[RegistrationURL],
	[{objectQualifier}tblRaces].[RegistrationLogo],
	[{objectQualifier}tblRaces].[Description],
	[{objectQualifier}tblRaces].[EmailText],
	[{objectQualifier}tblRaces].[ResultsText],
	[{objectQualifier}tblRaces].[ResultsURL],
	[{objectQualifier}tblRaces].[Annual],
	[{objectQualifier}tblRaces].[Keyword],
	[{objectQualifier}tblRaces].[LastBibNumber],
	[{objectQualifier}tblRaces].[ContactName],
	[{objectQualifier}tblRaces].[ContactAddress1],
	[{objectQualifier}tblRaces].[ContactAddress2],
	[{objectQualifier}tblRaces].[ContactCity],
	[{objectQualifier}tblRaces].[ContactState],
	[{objectQualifier}tblRaces].[ContactZIP],
	[{objectQualifier}tblRaces].[ContactPhoneNumber],
	[{objectQualifier}tblRaces].[ContactFAX],
	[{objectQualifier}tblRaces].[ContactEMail],
	[{objectQualifier}tblRaces].[WEBSite],
	[{objectQualifier}tblRaces].[RelatedRace],
	[{objectQualifier}tblRaces].[Organization],
	[{objectQualifier}tblRaces].[VolunteerContact],
	[{objectQualifier}tblRaces].[VolunteerPhone],
	[{objectQualifier}tblRaces].[VolunteerEmail],
	[{objectQualifier}tblRaces].[DisplayStartDate],
	[{objectQualifier}tblRaces].[DisplayEndDate],
	[{objectQualifier}tblRaces].[InsertionDate],
	[{objectQualifier}tblRaces].[ModificationDate]
FROM [{objectQualifier}tblRaces]
WHERE
	[tblRaces].[EventType]=@EventType
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
	/* -------------------------------------------------------------------------------------
/   tblRacesGetDependancies
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRacesGetDependancies
	@RaceId int
	
AS

SELECT Count(*) 
FROM [{objectQualifier}EventTypes]
WHERE
	[tblRaces].[EventType]=@EventType
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblRacesAdd
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRacesAdd
	@PortalId int
	,@EventType int
	,@RaceName nvarchar(50)
	,@RaceDate datetime
	,@RaceDistance real
	,@RaceLocation nvarchar(50)
	,@RaceCity nvarchar(50)
	,@RaceState nvarchar(2)
	,@RaceCountry nvarchar(24)
	,@RaceLogo nvarchar(120)
	,@USATFNumber nvarchar(50)
	,@RodaleEventId int
	,@ActiveEventId int
	,@PreregistrationDate datetime
	,@PreregistrationFee money
	,@RaceDayFee money
	,@RegistrationURL nvarchar(120)
	,@RegistrationLogo nvarchar(120)
	,@Description ntext
	,@EmailText ntext
	,@ResultsText ntext
	,@ResultsURL nvarchar(120)
	,@Annual smallint
	,@Keyword nvarchar(17)
	,@LastBibNumber float
	,@ContactName nvarchar(50)
	,@ContactAddress1 nvarchar(50)
	,@ContactAddress2 nvarchar(50)
	,@ContactCity nvarchar(22)
	,@ContactState nvarchar(2)
	,@ContactZIP nvarchar(10)
	,@ContactPhoneNumber nvarchar(16)
	,@ContactFAX nvarchar(16)
	,@ContactEMail nvarchar(50)
	,@WEBSite nvarchar(120)
	,@RelatedRace int
	,@Organization int
	,@VolunteerContact nvarchar(50)
	,@VolunteerPhone nvarchar(16)
	,@VolunteerEmail nvarchar(50)
	,@DisplayStartDate datetime
	,@DisplayEndDate datetime
	,@InsertionDate datetime
	,@ModificationDate datetime
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

INSERT INTO {objectQualifier}tblRaces (
	[PortalId]
	,[EventType]
	,[RaceName]
	,[RaceDate]
	,[RaceDistance]
	,[RaceLocation]
	,[RaceCity]
	,[RaceState]
	,[RaceCountry]
	,[RaceLogo]
	,[USATFNumber]
	,[RodaleEventId]
	,[ActiveEventId]
	,[PreregistrationDate]
	,[PreregistrationFee]
	,[RaceDayFee]
	,[RegistrationURL]
	,[RegistrationLogo]
	,[Description]
	,[EmailText]
	,[ResultsText]
	,[ResultsURL]
	,[Annual]
	,[Keyword]
	,[LastBibNumber]
	,[ContactName]
	,[ContactAddress1]
	,[ContactAddress2]
	,[ContactCity]
	,[ContactState]
	,[ContactZIP]
	,[ContactPhoneNumber]
	,[ContactFAX]
	,[ContactEMail]
	,[WEBSite]
	,[RelatedRace]
	,[Organization]
	,[VolunteerContact]
	,[VolunteerPhone]
	,[VolunteerEmail]
	,[DisplayStartDate]
	,[DisplayEndDate]
	,[InsertionDate]
	,[ModificationDate]
) VALUES (
	@PortalId
	,@EventType
	,@RaceName
	,@RaceDate
	,@RaceDistance
	,@RaceLocation
	,@RaceCity
	,@RaceState
	,@RaceCountry
	,@RaceLogo
	,@USATFNumber
	,@RodaleEventId
	,@ActiveEventId
	,@PreregistrationDate
	,@PreregistrationFee
	,@RaceDayFee
	,@RegistrationURL
	,@RegistrationLogo
	,@Description
	,@EmailText
	,@ResultsText
	,@ResultsURL
	,@Annual
	,@Keyword
	,@LastBibNumber
	,@ContactName
	,@ContactAddress1
	,@ContactAddress2
	,@ContactCity
	,@ContactState
	,@ContactZIP
	,@ContactPhoneNumber
	,@ContactFAX
	,@ContactEMail
	,@WEBSite
	,@RelatedRace
	,@Organization
	,@VolunteerContact
	,@VolunteerPhone
	,@VolunteerEmail
	,@DisplayStartDate
	,@DisplayEndDate
	,@InsertionDate
	,@ModificationDate
)

select SCOPE_IDENTITY()
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblRacesUpdate
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRacesUpdate
	@RaceId int, -- This is a unique number identifying each race
	@PortalId int, 
	@EventType int, -- Event Type Race, Social
	@RaceName nvarchar(50), -- The name of the race
	@RaceDate datetime, -- The date and time of the race
	@RaceDistance real, -- Race Distance
	@RaceLocation nvarchar(50), -- Location of the race
	@RaceCity nvarchar(50), -- City where race starts
	@RaceState nvarchar(2), -- State where race starts
	@RaceCountry nvarchar(24), -- Country where race starts
	@RaceLogo nvarchar(120), -- File path to race logo
	@USATFNumber nvarchar(50), -- USATF Certificate Number
	@RodaleEventId int, -- Rodale Event Id
	@ActiveEventId int, -- Active.Com Event Id
	@PreregistrationDate datetime, -- The preregistration cutoff date
	@PreregistrationFee money, -- The preregistation race fee
	@RaceDayFee money, -- The race fee after the preregistration cutoff
	@RegistrationURL nvarchar(120), -- URL for registration WEB site
	@RegistrationLogo nvarchar(120), -- File path to registration company graphic
	@Description ntext, -- A description of the race
	@EmailText ntext, -- Text for promotional emails
	@ResultsText ntext, -- Text for results emails
	@ResultsURL nvarchar(120), -- URL for results WEB site
	@Annual smallint, -- The nth annual
	@Keyword nvarchar(17), -- A shorthand keyword identifying the race
	@LastBibNumber float, -- The last Bib number assigned
	@ContactName nvarchar(50), -- The race contact
	@ContactAddress1 nvarchar(50), -- The contact address
	@ContactAddress2 nvarchar(50), 
	@ContactCity nvarchar(22), -- The contact city
	@ContactState nvarchar(2), -- The contact state
	@ContactZIP nvarchar(10), -- The contact ZIP Code
	@ContactPhoneNumber nvarchar(16), -- The phone number for the race contact
	@ContactFAX nvarchar(16), -- FAX Number for Contact
	@ContactEMail nvarchar(50), -- Email address for Contact
	@WEBSite nvarchar(120), -- URL for race WEB page
	@RelatedRace int, -- Link to another related race the same day
	@Organization int, -- Organizing club
	@VolunteerContact nvarchar(50), -- Name of Volunteer Coodinator
	@VolunteerPhone nvarchar(16), -- Volunteer coordinator phone number
	@VolunteerEmail nvarchar(50), -- Volunteer coordinator email
	@DisplayStartDate datetime, -- Date event starts displaying on web calendars
	@DisplayEndDate datetime, -- Date event stops displaying on web calendars
	@InsertionDate datetime, -- The date the record was inserted into the database
	@ModificationDate datetime -- The date the record was last modified

AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

UPDATE {objectQualifier}tblRaces SET
	   [PortalId] = @PortalId
	   ,[EventType] = @EventType
	   ,[RaceName] = @RaceName
	   ,[RaceDate] = @RaceDate
	   ,[RaceDistance] = @RaceDistance
	   ,[RaceLocation] = @RaceLocation
	   ,[RaceCity] = @RaceCity
	   ,[RaceState] = @RaceState
	   ,[RaceCountry] = @RaceCountry
	   ,[RaceLogo] = @RaceLogo
	   ,[USATFNumber] = @USATFNumber
	   ,[RodaleEventId] = @RodaleEventId
	   ,[ActiveEventId] = @ActiveEventId
	   ,[PreregistrationDate] = @PreregistrationDate
	   ,[PreregistrationFee] = @PreregistrationFee
	   ,[RaceDayFee] = @RaceDayFee
	   ,[RegistrationURL] = @RegistrationURL
	   ,[RegistrationLogo] = @RegistrationLogo
	   ,[Description] = @Description
	   ,[EmailText] = @EmailText
	   ,[ResultsText] = @ResultsText
	   ,[ResultsURL] = @ResultsURL
	   ,[Annual] = @Annual
	   ,[Keyword] = @Keyword
	   ,[LastBibNumber] = @LastBibNumber
	   ,[ContactName] = @ContactName
	   ,[ContactAddress1] = @ContactAddress1
	   ,[ContactAddress2] = @ContactAddress2
	   ,[ContactCity] = @ContactCity
	   ,[ContactState] = @ContactState
	   ,[ContactZIP] = @ContactZIP
	   ,[ContactPhoneNumber] = @ContactPhoneNumber
	   ,[ContactFAX] = @ContactFAX
	   ,[ContactEMail] = @ContactEMail
	   ,[WEBSite] = @WEBSite
	   ,[RelatedRace] = @RelatedRace
	   ,[Organization] = @Organization
	   ,[VolunteerContact] = @VolunteerContact
	   ,[VolunteerPhone] = @VolunteerPhone
	   ,[VolunteerEmail] = @VolunteerEmail
	   ,[DisplayStartDate] = @DisplayStartDate
	   ,[DisplayEndDate] = @DisplayEndDate
	   ,[InsertionDate] = @InsertionDate
	   ,[ModificationDate] = @ModificationDate
WHERE
    
	[{objectQualifier}tblRaces].[RaceId] = @RaceId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblRacesDelete
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRacesDelete
	@RaceId int
    
	AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

DELETE FROM {objectQualifier}tblRaces
WHERE 
	[{objectQualifier}tblRaces].[RaceId] = @RaceId
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblRacesGetPage
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblRacesGetPage
	@SortCol NVARCHAR(30),
	@RequiredPage INT,
	@RecordsPerPage INT,
	@TotalRows INT OUTPUT
AS
DECLARE @tabTempSort TABLE(
	RowNum INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		RaceId int
)
	
INSERT @tabTempSort 
(
	RaceId
)
SELECT	
	RaceId
FROM 
	{objectQualifier}tblRaces
ORDER BY 
	CASE WHEN @SortCol = 'PortalId_D'  THEN PortalId else null END desc,
	CASE WHEN @SortCol = 'PortalId'  THEN PortalId else null END asc,
 	CASE WHEN @SortCol = 'RaceId_D'  THEN RaceId else null END desc,
	CASE WHEN @SortCol = 'RaceId'  THEN RaceId else null END asc,
 	CASE WHEN @SortCol = 'EventType_D'  THEN EventType else null END desc,
	CASE WHEN @SortCol = 'EventType'  THEN EventType else null END asc,
 	CASE WHEN @SortCol = 'RaceName_D'  THEN RaceName else null END desc,
	CASE WHEN @SortCol = 'RaceName'  THEN RaceName else null END asc,
 	CASE WHEN @SortCol = 'RaceDate_D'  THEN RaceDate else null END desc,
	CASE WHEN @SortCol = 'RaceDate'  THEN RaceDate else null END asc,
 	CASE WHEN @SortCol = 'RaceDistance_D'  THEN RaceDistance else null END desc,
	CASE WHEN @SortCol = 'RaceDistance'  THEN RaceDistance else null END asc,
 	CASE WHEN @SortCol = 'RaceLocation_D'  THEN RaceLocation else null END desc,
	CASE WHEN @SortCol = 'RaceLocation'  THEN RaceLocation else null END asc,
 	CASE WHEN @SortCol = 'RaceCity_D'  THEN RaceCity else null END desc,
	CASE WHEN @SortCol = 'RaceCity'  THEN RaceCity else null END asc,
 	CASE WHEN @SortCol = 'RaceState_D'  THEN RaceState else null END desc,
	CASE WHEN @SortCol = 'RaceState'  THEN RaceState else null END asc,
 	CASE WHEN @SortCol = 'RaceCountry_D'  THEN RaceCountry else null END desc,
	CASE WHEN @SortCol = 'RaceCountry'  THEN RaceCountry else null END asc,
 	CASE WHEN @SortCol = 'RaceLogo_D'  THEN RaceLogo else null END desc,
	CASE WHEN @SortCol = 'RaceLogo'  THEN RaceLogo else null END asc,
 	CASE WHEN @SortCol = 'USATFNumber_D'  THEN USATFNumber else null END desc,
	CASE WHEN @SortCol = 'USATFNumber'  THEN USATFNumber else null END asc,
 	CASE WHEN @SortCol = 'RodaleEventId_D'  THEN RodaleEventId else null END desc,
	CASE WHEN @SortCol = 'RodaleEventId'  THEN RodaleEventId else null END asc,
 	CASE WHEN @SortCol = 'ActiveEventId_D'  THEN ActiveEventId else null END desc,
	CASE WHEN @SortCol = 'ActiveEventId'  THEN ActiveEventId else null END asc,
 	CASE WHEN @SortCol = 'PreregistrationDate_D'  THEN PreregistrationDate else null END desc,
	CASE WHEN @SortCol = 'PreregistrationDate'  THEN PreregistrationDate else null END asc,
 	CASE WHEN @SortCol = 'PreregistrationFee_D'  THEN PreregistrationFee else null END desc,
	CASE WHEN @SortCol = 'PreregistrationFee'  THEN PreregistrationFee else null END asc,
 	CASE WHEN @SortCol = 'RaceDayFee_D'  THEN RaceDayFee else null END desc,
	CASE WHEN @SortCol = 'RaceDayFee'  THEN RaceDayFee else null END asc,
 	CASE WHEN @SortCol = 'RegistrationURL_D'  THEN RegistrationURL else null END desc,
	CASE WHEN @SortCol = 'RegistrationURL'  THEN RegistrationURL else null END asc,
 	CASE WHEN @SortCol = 'RegistrationLogo_D'  THEN RegistrationLogo else null END desc,
	CASE WHEN @SortCol = 'RegistrationLogo'  THEN RegistrationLogo else null END asc,
 	CASE WHEN @SortCol = 'ResultsURL_D'  THEN ResultsURL else null END desc,
	CASE WHEN @SortCol = 'ResultsURL'  THEN ResultsURL else null END asc,
 	CASE WHEN @SortCol = 'Annual_D'  THEN Annual else null END desc,
	CASE WHEN @SortCol = 'Annual'  THEN Annual else null END asc,
 	CASE WHEN @SortCol = 'Keyword_D'  THEN Keyword else null END desc,
	CASE WHEN @SortCol = 'Keyword'  THEN Keyword else null END asc,
 	CASE WHEN @SortCol = 'LastBibNumber_D'  THEN LastBibNumber else null END desc,
	CASE WHEN @SortCol = 'LastBibNumber'  THEN LastBibNumber else null END asc,
 	CASE WHEN @SortCol = 'ContactName_D'  THEN ContactName else null END desc,
	CASE WHEN @SortCol = 'ContactName'  THEN ContactName else null END asc,
 	CASE WHEN @SortCol = 'ContactAddress1_D'  THEN ContactAddress1 else null END desc,
	CASE WHEN @SortCol = 'ContactAddress1'  THEN ContactAddress1 else null END asc,
 	CASE WHEN @SortCol = 'ContactAddress2_D'  THEN ContactAddress2 else null END desc,
	CASE WHEN @SortCol = 'ContactAddress2'  THEN ContactAddress2 else null END asc,
 	CASE WHEN @SortCol = 'ContactCity_D'  THEN ContactCity else null END desc,
	CASE WHEN @SortCol = 'ContactCity'  THEN ContactCity else null END asc,
 	CASE WHEN @SortCol = 'ContactState_D'  THEN ContactState else null END desc,
	CASE WHEN @SortCol = 'ContactState'  THEN ContactState else null END asc,
 	CASE WHEN @SortCol = 'ContactZIP_D'  THEN ContactZIP else null END desc,
	CASE WHEN @SortCol = 'ContactZIP'  THEN ContactZIP else null END asc,
 	CASE WHEN @SortCol = 'ContactPhoneNumber_D'  THEN ContactPhoneNumber else null END desc,
	CASE WHEN @SortCol = 'ContactPhoneNumber'  THEN ContactPhoneNumber else null END asc,
 	CASE WHEN @SortCol = 'ContactFAX_D'  THEN ContactFAX else null END desc,
	CASE WHEN @SortCol = 'ContactFAX'  THEN ContactFAX else null END asc,
 	CASE WHEN @SortCol = 'ContactEMail_D'  THEN ContactEMail else null END desc,
	CASE WHEN @SortCol = 'ContactEMail'  THEN ContactEMail else null END asc,
 	CASE WHEN @SortCol = 'WEBSite_D'  THEN WEBSite else null END desc,
	CASE WHEN @SortCol = 'WEBSite'  THEN WEBSite else null END asc,
 	CASE WHEN @SortCol = 'RelatedRace_D'  THEN RelatedRace else null END desc,
	CASE WHEN @SortCol = 'RelatedRace'  THEN RelatedRace else null END asc,
 	CASE WHEN @SortCol = 'Organization_D'  THEN Organization else null END desc,
	CASE WHEN @SortCol = 'Organization'  THEN Organization else null END asc,
 	CASE WHEN @SortCol = 'VolunteerContact_D'  THEN VolunteerContact else null END desc,
	CASE WHEN @SortCol = 'VolunteerContact'  THEN VolunteerContact else null END asc,
 	CASE WHEN @SortCol = 'VolunteerPhone_D'  THEN VolunteerPhone else null END desc,
	CASE WHEN @SortCol = 'VolunteerPhone'  THEN VolunteerPhone else null END asc,
 	CASE WHEN @SortCol = 'VolunteerEmail_D'  THEN VolunteerEmail else null END desc,
	CASE WHEN @SortCol = 'VolunteerEmail'  THEN VolunteerEmail else null END asc,
 	CASE WHEN @SortCol = 'DisplayStartDate_D'  THEN DisplayStartDate else null END desc,
	CASE WHEN @SortCol = 'DisplayStartDate'  THEN DisplayStartDate else null END asc,
 	CASE WHEN @SortCol = 'DisplayEndDate_D'  THEN DisplayEndDate else null END desc,
	CASE WHEN @SortCol = 'DisplayEndDate'  THEN DisplayEndDate else null END asc,
 	CASE WHEN @SortCol = 'InsertionDate_D'  THEN InsertionDate else null END desc,
	CASE WHEN @SortCol = 'InsertionDate'  THEN InsertionDate else null END asc,
 	CASE WHEN @SortCol = 'ModificationDate_D'  THEN ModificationDate else null END desc,
	CASE WHEN @SortCol = 'ModificationDate'  THEN ModificationDate else null END asc

SELECT 
	t1.PortalId,
 	t1.RaceId,
 	t1.EventType,
 	t1.RaceName,
 	t1.RaceDate,
 	t1.RaceDistance,
 	t1.RaceLocation,
 	t1.RaceCity,
 	t1.RaceState,
 	t1.RaceCountry,
 	t1.RaceLogo,
 	t1.USATFNumber,
 	t1.RodaleEventId,
 	t1.ActiveEventId,
 	t1.PreregistrationDate,
 	t1.PreregistrationFee,
 	t1.RaceDayFee,
 	t1.RegistrationURL,
 	t1.RegistrationLogo,
 	t1.Description,
 	t1.EmailText,
 	t1.ResultsText,
 	t1.ResultsURL,
 	t1.Annual,
 	t1.Keyword,
 	t1.LastBibNumber,
 	t1.ContactName,
 	t1.ContactAddress1,
 	t1.ContactAddress2,
 	t1.ContactCity,
 	t1.ContactState,
 	t1.ContactZIP,
 	t1.ContactPhoneNumber,
 	t1.ContactFAX,
 	t1.ContactEMail,
 	t1.WEBSite,
 	t1.RelatedRace,
 	t1.Organization,
 	t1.VolunteerContact,
 	t1.VolunteerPhone,
 	t1.VolunteerEmail,
 	t1.DisplayStartDate,
 	t1.DisplayEndDate,
 	t1.InsertionDate,
 	t1.ModificationDate
FROM 
	{objectQualifier}tblRaces t1
INNER JOIN 
	@tabTempSort t2 
ON
	t1.RaceId = t2.RaceId
WHERE 
	RowNum BETWEEN (@RequiredPage - 1) * @RecordsPerPage + 1 
	AND @RequiredPage * @RecordsPerPage 

SELECT @TotalRows = COUNT(*) FROM @tabTempSort
GO	

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* =====================================================================================
 *   TABLE: tblZIP
 * ===================================================================================== */


/** Create Table **/
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}tblZIP]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}tblZIP]
		(
			[PortalId] Int  ,
			[FiveDigitZIP] NVarChar NOT NULL  ,
			[Sequence] SmallInt NOT NULL  ,
			[City] NVarChar  ,
			[State] NVarChar  ,
			[County] NVarChar  ,
			[Country] NVarChar  
		)
		

		
		ALTER TABLE {databaseOwner}[{objectQualifier}tblZIP] 
			ADD CONSTRAINT [aaaaatblZIP_PK] PRIMARY KEY CLUSTERED  (  [FiveDigitZIP], [Sequence] )
		
		

		
		-- Uncomment following line to create index on ModuleID
		-- CREATE NONCLUSTERED INDEX [IX_{objectQualifier}YourCompany_test2] ON {databaseOwner}[{objectQualifier}YourCompany_test2] ([ModuleID])




		/******************************** Update Default Values of columns  *****************************/
		ALTER TABLE {databaseOwner}[{objectQualifier}tblZIP] WITH NOCHECK ADD 	
			CONSTRAINT [DF_tblZIP_Sequence] DEFAULT ((0)) FOR [Sequence]
		
	
	
		
		/********************************** Update Description of columns  *******************************/

	END
GO


/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblZIPGet    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblZIPGet') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblZIPGet
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblZIPList    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblZIPList') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblZIPList
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblZIPAdd    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblZIPAdd') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblZIPAdd
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblZIPUpdate    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblZIPUpdate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblZIPUpdate
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblZIPDelete    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblZIPDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblZIPDelete
GO
/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}tblZIPGetPage    Script Date: Friday, January 17, 2014 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}tblZIPGetPage') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}tblZIPGetPage
GO
	

/* -------------------------------------------------------------------------------------
/   tblZIPGet
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblZIPGet
	@FiveDigitZIP nvarchar(6),
	@Sequence smallint
	
AS

SELECT
	[{objectQualifier}tblZIP].[PortalId],
	[{objectQualifier}tblZIP].[FiveDigitZIP],
	[{objectQualifier}tblZIP].[Sequence],
	[{objectQualifier}tblZIP].[City],
	[{objectQualifier}tblZIP].[State],
	[{objectQualifier}tblZIP].[County],
	[{objectQualifier}tblZIP].[Country]
FROM [{objectQualifier}tblZIP]
WHERE
	[{objectQualifier}tblZIP].[FiveDigitZIP] = @FiveDigitZIP
	AND [{objectQualifier}tblZIP].[Sequence] = @Sequence
	
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblZIPList 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblZIPList
  
 @PortalId int 
AS

SELECT
	[{objectQualifier}tblZIP].[PortalId],
	[{objectQualifier}tblZIP].[FiveDigitZIP],
	[{objectQualifier}tblZIP].[Sequence],
	[{objectQualifier}tblZIP].[City],
	[{objectQualifier}tblZIP].[State],
	[{objectQualifier}tblZIP].[County],
	[{objectQualifier}tblZIP].[Country]
FROM [{objectQualifier}tblZIP]

 WHERE [{objectQualifier}tblZIP].[PortalId]=@PortalId 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


/* -------------------------------------------------------------------------------------
/   tblZIPAdd
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblZIPAdd
	@PortalId int
	,@FiveDigitZIP nvarchar(6)
	,@Sequence smallint
	,@City nvarchar(50)
	,@State nvarchar(2)
	,@County nvarchar(50)
	,@Country nvarchar(50)
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

-- THIS STORED PROCEDURE NEEDS TO BE MANUALLY COMPLETED
-- MULITPLE PRIMARY KEY MEMBERS OR NON-GUID/INT PRIMARY KEY

INSERT INTO {objectQualifier}tblZIP (
	[PortalId]
	,[FiveDigitZIP]
	,[Sequence]
	,[City]
	,[State]
	,[County]
	,[Country]
) VALUES (
	@PortalId
	,@FiveDigitZIP
	,@Sequence
	,@City
	,@State
	,@County
	,@Country
)

select SCOPE_IDENTITY()
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblZIPUpdate
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}tblZIPUpdate
	@FiveDigitZIP nvarchar(6), 
	@Sequence smallint, 
	@PortalId int, 
	@City nvarchar(50), 
	@State nvarchar(2), 
	@County nvarchar(50), 
	@Country nvarchar(50) 

AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

UPDATE {objectQualifier}tblZIP SET
	   [PortalId] = @PortalId
	   ,[City] = @City
	   ,[State] = @State
	   ,[County] = @County
	   ,[Country] = @Country
WHERE
    
	[{objectQualifier}tblZIP].[FiveDigitZIP] = @FiveDigitZIP
	AND [{objectQualifier}tblZIP].[Sequence] = @Sequence
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblZIPDelete
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}tblZIPDelete
	@FiveDigitZIP nvarchar(6),
	@Sequence smallint
    
	AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

DELETE FROM {objectQualifier}tblZIP
WHERE 
	[{objectQualifier}tblZIP].[FiveDigitZIP] = @FiveDigitZIP
	AND [{objectQualifier}tblZIP].[Sequence] = @Sequence
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/* -------------------------------------------------------------------------------------
/   tblZIPGetPage
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}tblZIPGetPage
	@SortCol NVARCHAR(30),
	@RequiredPage INT,
	@RecordsPerPage INT,
	@TotalRows INT OUTPUT
AS
DECLARE @tabTempSort TABLE(
	RowNum INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		FiveDigitZIP nvarchar(6),
	Sequence smallint
)
	
INSERT @tabTempSort 
(
	FiveDigitZIP,
 	Sequence
)
SELECT	
	FiveDigitZIP,
 	Sequence
FROM 
	{objectQualifier}tblZIP
ORDER BY 
	CASE WHEN @SortCol = 'PortalId_D'  THEN PortalId else null END desc,
	CASE WHEN @SortCol = 'PortalId'  THEN PortalId else null END asc,
 	CASE WHEN @SortCol = 'FiveDigitZIP_D'  THEN FiveDigitZIP else null END desc,
	CASE WHEN @SortCol = 'FiveDigitZIP'  THEN FiveDigitZIP else null END asc,
 	CASE WHEN @SortCol = 'Sequence_D'  THEN Sequence else null END desc,
	CASE WHEN @SortCol = 'Sequence'  THEN Sequence else null END asc,
 	CASE WHEN @SortCol = 'City_D'  THEN City else null END desc,
	CASE WHEN @SortCol = 'City'  THEN City else null END asc,
 	CASE WHEN @SortCol = 'State_D'  THEN State else null END desc,
	CASE WHEN @SortCol = 'State'  THEN State else null END asc,
 	CASE WHEN @SortCol = 'County_D'  THEN County else null END desc,
	CASE WHEN @SortCol = 'County'  THEN County else null END asc,
 	CASE WHEN @SortCol = 'Country_D'  THEN Country else null END desc,
	CASE WHEN @SortCol = 'Country'  THEN Country else null END asc

SELECT 
	t1.PortalId,
 	t1.FiveDigitZIP,
 	t1.Sequence,
 	t1.City,
 	t1.State,
 	t1.County,
 	t1.Country
FROM 
	{objectQualifier}tblZIP t1
INNER JOIN 
	@tabTempSort t2 
ON
	t1.FiveDigitZIP = t2.FiveDigitZIP,
 	t1.Sequence = t2.Sequence
WHERE 
	RowNum BETWEEN (@RequiredPage - 1) * @RecordsPerPage + 1 
	AND @RequiredPage * @RecordsPerPage 

SELECT @TotalRows = COUNT(*) FROM @tabTempSort
GO	

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

/****** Object:  Stored Procedure {databaseOwner}{objectQualifier}Race2012Purge    Script Date: Monday, February 09, 2009 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Race2012Purge') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}Race2012Purge
GO

/* -------------------------------------------------------------------------------------
/   Race2012Purge
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
	
CREATE PROCEDURE {databaseOwner}{objectQualifier}Race2012Purge 
 @PortalId int 
AS
DECLARE @myERROR int -- Local @@ERROR
       , @myRowCount int -- Local @@ROWCOUNT

BEGIN

	SET NOCOUNT ON;
    DELETE FROM [{objectQualifier}tblBounces] WHERE [{objectQualifier}tblBounces].[PortalId]=@PortalId;
    DELETE FROM [{objectQualifier}tblContactTypes] WHERE [{objectQualifier}tblContactTypes].[PortalId]=@PortalId;
    DELETE FROM [{objectQualifier}tblDivisions] WHERE [{objectQualifier}tblDivisions].[PortalId]=@PortalId;
    DELETE FROM [{objectQualifier}tblDoNotEmail] WHERE [{objectQualifier}tblDoNotEmail].[PortalId]=@PortalId;
    DELETE FROM [{objectQualifier}tblEntrants] WHERE [{objectQualifier}tblEntrants].[PortalId]=@PortalId;
    DELETE FROM [{objectQualifier}tblEvents] WHERE [{objectQualifier}tblEvents].[PortalId]=@PortalId;
    DELETE FROM [{objectQualifier}tblEventTypes] WHERE [{objectQualifier}tblEventTypes].[PortalId]=@PortalId;
    DELETE FROM [{objectQualifier}tblMemberTypes] WHERE [{objectQualifier}tblMemberTypes].[PortalId]=@PortalId;
    DELETE FROM [{objectQualifier}tblOrganization] WHERE [{objectQualifier}tblOrganization].[PortalId]=@PortalId;
    DELETE FROM [{objectQualifier}tblRaceDivisions] WHERE [{objectQualifier}tblRaceDivisions].[PortalId]=@PortalId;
    DELETE FROM [{objectQualifier}tblRaces] WHERE [{objectQualifier}tblRaces].[PortalId]=@PortalId;
    DELETE FROM [{objectQualifier}tblZIP] WHERE [{objectQualifier}tblZIP].[PortalId]=@PortalId;
END
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
