Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Configuration
Imports System.Data
Imports System.Xml
Imports System.Xml.Serialization
Imports System.Web
Imports System.Collections.Generic
Imports DotNetNuke
Imports DotNetNuke.Services.Search
Imports DotNetNuke.Common.Utilities
Imports DotNetNuke.Common.Utilities.XmlUtils
Imports DotNetNuke.Entities.Modules
Imports System.IO
Imports Microsoft.VisualBasic

Namespace Crewstone Consulting ltd.Modules.Race2012

    ''' <summary>
    ''' The Controller class for Race2012
    ''' </summary>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' </history>
    ''' -----------------------------------------------------------------------------
    <DataObject(True)> _
	Public Class Race2012Controller
        Implements Entities.Modules.ISearchable
        Implements Entities.Modules.IPortable
		

#Region "Bounces Methods"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a tblBounces from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function GetBounces(ByVal eMail As String) As BouncesInfo
            Return CType(CBO.FillObject(DataProvider.Instance().GetBounces(eMail), GetType(BouncesInfo)), BouncesInfo)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblBouncess from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListBouncess(ByVal portalId As Integer) As List(Of BouncesInfo)
            Return CBO.FillCollection(Of BouncesInfo)(DataProvider.Instance().ListBouncess(portalId))
		End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new tblBounces to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function AddBounces(ByVal objtblBounces As BouncesInfo) As Integer
                Return DataProvider.Instance().AddBounces(objtblBounces.PortalId)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a tblBounces to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub UpdateBounces(ByVal objtblBounces As BouncesInfo)
                DataProvider.Instance().UpdateBounces(objtblBounces.EMail, objtblBounces.PortalId)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a tblBounces from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub DeleteBounces(ByVal objtblBounces As BouncesInfo)
            DataProvider.Instance().DeleteBounces(objtblBounces.EMail)
        End Sub
#End Region
#Region "ContactTypes Methods"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a tblContactTypes from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function GetContactTypes(ByVal contactType As Integer) As ContactTypesInfo
            Return CType(CBO.FillObject(DataProvider.Instance().GetContactTypes(contactType), GetType(ContactTypesInfo)), ContactTypesInfo)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblContactTypess from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListContactTypess(ByVal portalId As Integer) As List(Of ContactTypesInfo)
            Return CBO.FillCollection(Of ContactTypesInfo)(DataProvider.Instance().ListContactTypess(portalId))
		End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new tblContactTypes to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function AddContactTypes(ByVal objtblContactTypes As ContactTypesInfo) As Integer
                Return DataProvider.Instance().AddContactTypes(objtblContactTypes.PortalId, objtblContactTypes.Abbreviation, objtblContactTypes.Description, objtblContactTypes.DefaultType)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a tblContactTypes to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub UpdateContactTypes(ByVal objtblContactTypes As ContactTypesInfo)
                DataProvider.Instance().UpdateContactTypes(objtblContactTypes.ContactType, objtblContactTypes.PortalId, objtblContactTypes.Abbreviation, objtblContactTypes.Description, objtblContactTypes.DefaultType)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a tblContactTypes from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub DeleteContactTypes(ByVal objtblContactTypes As ContactTypesInfo)
            DataProvider.Instance().DeleteContactTypes(objtblContactTypes.ContactType)
        End Sub
#End Region
#Region "Divisions Methods"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a tblDivisions from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function GetDivisions(ByVal division As String) As DivisionsInfo
            Return CType(CBO.FillObject(DataProvider.Instance().GetDivisions(division), GetType(DivisionsInfo)), DivisionsInfo)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblDivisionss from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListDivisionss(ByVal portalId As Integer) As List(Of DivisionsInfo)
            Return CBO.FillCollection(Of DivisionsInfo)(DataProvider.Instance().ListDivisionss(portalId))
		End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new tblDivisions to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function AddDivisions(ByVal objtblDivisions As DivisionsInfo) As Integer
                Return DataProvider.Instance().AddDivisions(objtblDivisions.PortalId, objtblDivisions.Description, objtblDivisions.Priority, objtblDivisions.Overall, objtblDivisions.Masters)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a tblDivisions to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub UpdateDivisions(ByVal objtblDivisions As DivisionsInfo)
                DataProvider.Instance().UpdateDivisions(objtblDivisions.Division, objtblDivisions.PortalId, objtblDivisions.Description, objtblDivisions.Priority, objtblDivisions.Overall, objtblDivisions.Masters)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a tblDivisions from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub DeleteDivisions(ByVal objtblDivisions As DivisionsInfo)
            DataProvider.Instance().DeleteDivisions(objtblDivisions.Division)
        End Sub
#End Region
#Region "DoNotEmail Methods"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a tblDoNotEmail from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function GetDoNotEmail(ByVal emailAddress As String) As DoNotEmailInfo
            Return CType(CBO.FillObject(DataProvider.Instance().GetDoNotEmail(emailAddress), GetType(DoNotEmailInfo)), DoNotEmailInfo)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblDoNotEmails from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListDoNotEmails(ByVal portalId As Integer) As List(Of DoNotEmailInfo)
            Return CBO.FillCollection(Of DoNotEmailInfo)(DataProvider.Instance().ListDoNotEmails(portalId))
		End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new tblDoNotEmail to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function AddDoNotEmail(ByVal objtblDoNotEmail As DoNotEmailInfo) As Integer
                Return DataProvider.Instance().AddDoNotEmail(objtblDoNotEmail.PortalId, objtblDoNotEmail.MovedBy, objtblDoNotEmail.OptOutReason)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a tblDoNotEmail to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub UpdateDoNotEmail(ByVal objtblDoNotEmail As DoNotEmailInfo)
                DataProvider.Instance().UpdateDoNotEmail(objtblDoNotEmail.EmailAddress, objtblDoNotEmail.PortalId, objtblDoNotEmail.MovedBy, objtblDoNotEmail.OptOutReason)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a tblDoNotEmail from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub DeleteDoNotEmail(ByVal objtblDoNotEmail As DoNotEmailInfo)
            DataProvider.Instance().DeleteDoNotEmail(objtblDoNotEmail.EmailAddress)
        End Sub
#End Region
#Region "Entrants Methods"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a tblEntrants from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function GetEntrants(ByVal runnerId As Integer) As EntrantsInfo
            Return CType(CBO.FillObject(DataProvider.Instance().GetEntrants(runnerId), GetType(EntrantsInfo)), EntrantsInfo)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblEntrantss from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListEntrantss(ByVal portalId As Integer) As List(Of EntrantsInfo)
            Return CBO.FillCollection(Of EntrantsInfo)(DataProvider.Instance().ListEntrantss(portalId))
		End Function
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblEntrantss from the database by ContactType using
        ''' TblEntrants_FK00
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListEntrantssByContactType(ByVal portalId As Integer) As List(Of EntrantsInfo)
            Return CBO.FillCollection(Of EntrantsInfo)(DataProvider.Instance().GetEntrantssByContactType(portalId))
		End Function
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblEntrantss from the database by PrimaryNo using
        ''' TblEntrants_FK01
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListEntrantssByPrimaryNo(ByVal portalId As Integer) As List(Of EntrantsInfo)
            Return CBO.FillCollection(Of EntrantsInfo)(DataProvider.Instance().GetEntrantssByPrimaryNo(portalId))
		End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new tblEntrants to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function AddEntrants(ByVal objtblEntrants As EntrantsInfo) As Integer
                Return DataProvider.Instance().AddEntrants(objtblEntrants.PortalId, objtblEntrants.ContactType, objtblEntrants.FullName, objtblEntrants.FirstName, objtblEntrants.MiddleName, objtblEntrants.LastName, objtblEntrants.Suffix, objtblEntrants.Nickname, objtblEntrants.BirthDate, objtblEntrants.Age, objtblEntrants.Weight, objtblEntrants.Sex, objtblEntrants.TShirt, objtblEntrants.Sweats, objtblEntrants.Shorts, objtblEntrants.Shoes, objtblEntrants.ShoeStyle, objtblEntrants.Club, objtblEntrants.Address, objtblEntrants.City, objtblEntrants.State, objtblEntrants.ZIP, objtblEntrants.Country, objtblEntrants.HomePhone, objtblEntrants.MobilePhone, objtblEntrants.MobileCarrier, objtblEntrants.EMail, objtblEntrants.PlainText, objtblEntrants.USATFNumber, objtblEntrants.MemberType, objtblEntrants.MemberNumber, objtblEntrants.MemberCode, objtblEntrants.DateJoined, objtblEntrants.LastRenewal, objtblEntrants.PaidThru, objtblEntrants.Waiver, objtblEntrants.PrimaryNo, objtblEntrants.Survivor, objtblEntrants.MailingExpiration, objtblEntrants.Memo, objtblEntrants.Marked, objtblEntrants.Keywords, objtblEntrants.Company, objtblEntrants.Title, objtblEntrants.WorkAddress, objtblEntrants.WorkCity, objtblEntrants.WorkState, objtblEntrants.WorkZip, objtblEntrants.WorkCountry, objtblEntrants.WorkPhone, objtblEntrants.WorkEmail, objtblEntrants.ActiveId, objtblEntrants.InvalidEmail, objtblEntrants.ResultsEmailOnly, objtblEntrants.InvalidAddress, objtblEntrants.UserName, objtblEntrants.Password, objtblEntrants.InsertionDate, objtblEntrants.UpdateDate)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a tblEntrants to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub UpdateEntrants(ByVal objtblEntrants As EntrantsInfo)
                DataProvider.Instance().UpdateEntrants(objtblEntrants.RunnerId, objtblEntrants.PortalId, objtblEntrants.ContactType, objtblEntrants.FullName, objtblEntrants.FirstName, objtblEntrants.MiddleName, objtblEntrants.LastName, objtblEntrants.Suffix, objtblEntrants.Nickname, objtblEntrants.BirthDate, objtblEntrants.Age, objtblEntrants.Weight, objtblEntrants.Sex, objtblEntrants.TShirt, objtblEntrants.Sweats, objtblEntrants.Shorts, objtblEntrants.Shoes, objtblEntrants.ShoeStyle, objtblEntrants.Club, objtblEntrants.Address, objtblEntrants.City, objtblEntrants.State, objtblEntrants.ZIP, objtblEntrants.Country, objtblEntrants.HomePhone, objtblEntrants.MobilePhone, objtblEntrants.MobileCarrier, objtblEntrants.EMail, objtblEntrants.PlainText, objtblEntrants.USATFNumber, objtblEntrants.MemberType, objtblEntrants.MemberNumber, objtblEntrants.MemberCode, objtblEntrants.DateJoined, objtblEntrants.LastRenewal, objtblEntrants.PaidThru, objtblEntrants.Waiver, objtblEntrants.PrimaryNo, objtblEntrants.Survivor, objtblEntrants.MailingExpiration, objtblEntrants.Memo, objtblEntrants.Marked, objtblEntrants.Keywords, objtblEntrants.Company, objtblEntrants.Title, objtblEntrants.WorkAddress, objtblEntrants.WorkCity, objtblEntrants.WorkState, objtblEntrants.WorkZip, objtblEntrants.WorkCountry, objtblEntrants.WorkPhone, objtblEntrants.WorkEmail, objtblEntrants.ActiveId, objtblEntrants.InvalidEmail, objtblEntrants.ResultsEmailOnly, objtblEntrants.InvalidAddress, objtblEntrants.UserName, objtblEntrants.Password, objtblEntrants.InsertionDate, objtblEntrants.UpdateDate)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a tblEntrants from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub DeleteEntrants(ByVal objtblEntrants As EntrantsInfo)
            DataProvider.Instance().DeleteEntrants(objtblEntrants.RunnerId)
        End Sub
#End Region
#Region "Events Methods"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a tblEvents from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function GetEvents(ByVal runnerId As Integer, ByVal raceId As Integer) As EventsInfo
            Return CType(CBO.FillObject(DataProvider.Instance().GetEvents(runnerId, raceId), GetType(EventsInfo)), EventsInfo)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblEventss from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListEventss(ByVal portalId As Integer) As List(Of EventsInfo)
		Dim EventsInfolist As List(Of EventsInfo) = New List(Of EventsInfo)

		Try
		Using dr As IDataReader = DataProvider.Instance().ListEventss(portalId)
			While dr.Read
				Dim objEventsInfo As EventsInfo = New EventsInfo
					With objEventsInfo
						.RunnerId = Convert.ToInt32(Null.SetNull(dr.Item("RunnerId"),.RunnerId))
						.RaceId = Convert.ToInt32(Null.SetNull(dr.Item("RaceId"),.RaceId))
						.PortalId = Convert.ToInt32(Null.SetNull(dr.Item("PortalId"),.PortalId))
						.BibNumber = Convert.ToInt32(Null.SetNull(dr.Item("BibNumber"),.BibNumber))
						.Division = Convert.ToString(Null.SetNull(dr.Item("Division"),.Division))
						.DivisionPlace = Convert.ToInt16(Null.SetNull(dr.Item("DivisionPlace"),.DivisionPlace))
						.DivisionTotal = Convert.ToInt16(Null.SetNull(dr.Item("DivisionTotal"),.DivisionTotal))
						.SexPlace = Convert.ToInt32(Null.SetNull(dr.Item("SexPlace"),.SexPlace))
						.SexTotal = Convert.ToInt32(Null.SetNull(dr.Item("SexTotal"),.SexTotal))
						.GunTime = Convert.ToDateTime(Null.SetNull(dr.Item("GunTime"),.GunTime))
						.NetTime = Convert.ToDateTime(Null.SetNull(dr.Item("NetTime"),.NetTime))
						.Pace = Convert.ToDateTime(Null.SetNull(dr.Item("Pace"),.Pace))
						.Place = Convert.ToInt32(Null.SetNull(dr.Item("Place"),.Place))
						.Seed = Convert.ToDateTime(Null.SetNull(dr.Item("Seed"),.Seed))
						.Team = Convert.ToString(Null.SetNull(dr.Item("Team"),.Team))
						.Fee = Convert.ToDecimal(Null.SetNull(dr.Item("Fee"),.Fee))
						.EntryDate = Convert.ToDateTime(Null.SetNull(dr.Item("EntryDate"),.EntryDate))
						.Clydesdale = Convert.ToBoolean(Null.SetNull(dr.Item("Clydesdale"),.Clydesdale))
						.Survivor = Convert.ToBoolean(Null.SetNull(dr.Item("Survivor"),.Survivor))
						.NonCompetitive = Convert.ToBoolean(Null.SetNull(dr.Item("NonCompetitive"),.NonCompetitive))
						.USATF = Convert.ToBoolean(Null.SetNull(dr.Item("USATF"),.USATF))
						.Age = Convert.ToInt16(Null.SetNull(dr.Item("Age"),.Age))
						.Sex = Convert.ToString(Null.SetNull(dr.Item("Sex"),.Sex))
						.Weight = Convert.ToInt16(Null.SetNull(dr.Item("Weight"),.Weight))
						.Heat = Convert.ToInt16(Null.SetNull(dr.Item("Heat"),.Heat))
						.WaveOffset = Convert.ToDateTime(Null.SetNull(dr.Item("WaveOffset"),.WaveOffset))
						.WAVATime = Convert.ToDateTime(Null.SetNull(dr.Item("WAVATime"),.WAVATime))
						.PerformancePercent = Convert.ToSingle(Null.SetNull(dr.Item("PerformancePercent"),.PerformancePercent))
						.SeriesPlace = Convert.ToInt16(Null.SetNull(dr.Item("SeriesPlace"),.SeriesPlace))
						.SeriesAge = Convert.ToInt16(Null.SetNull(dr.Item("SeriesAge"),.SeriesAge))
						.SeriesDivision = Convert.ToString(Null.SetNull(dr.Item("SeriesDivision"),.SeriesDivision))
						.SeriesPoints = Convert.ToInt16(Null.SetNull(dr.Item("SeriesPoints"),.SeriesPoints))
						.Confirmation = Convert.ToBoolean(Null.SetNull(dr.Item("Confirmation"),.Confirmation))
						.Results = Convert.ToBoolean(Null.SetNull(dr.Item("Results"),.Results))
						.ChipId = Convert.ToString(Null.SetNull(dr.Item("ChipId"),.ChipId))
						.AwardDivision = Convert.ToString(Null.SetNull(dr.Item("AwardDivision"),.AwardDivision))
						.AwardPlace = Convert.ToInt16(Null.SetNull(dr.Item("AwardPlace"),.AwardPlace))
						.AwardPriority = Convert.ToInt16(Null.SetNull(dr.Item("AwardPriority"),.AwardPriority))
					End With
					EventsInfolist.Add(objEventsInfo)
			End While	
		End Using
		Catch exc As Exception
    		LogException(exc)
			Throw
		End Try

		Return EventsInfolist
		End Function
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblEventss from the database by RunnerId using
        ''' TblEvents_FK00
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListEventssByRunnerId(ByVal portalId As Integer) As List(Of EventsInfo)
		Dim EventsInfolist As List(Of EventsInfo) = New List(Of EventsInfo)

		Try
		Using dr As IDataReader = DataProvider.Instance().GetEventssByRunnerId(portalId)
			While dr.Read
				Dim objEventsInfo As EventsInfo = New EventsInfo
					With objEventsInfo
						.RunnerId = Convert.ToInt32(Null.SetNull(dr.Item("RunnerId"),.RunnerId))
						.RaceId = Convert.ToInt32(Null.SetNull(dr.Item("RaceId"),.RaceId))
						.PortalId = Convert.ToInt32(Null.SetNull(dr.Item("PortalId"),.PortalId))
						.BibNumber = Convert.ToInt32(Null.SetNull(dr.Item("BibNumber"),.BibNumber))
						.Division = Convert.ToString(Null.SetNull(dr.Item("Division"),.Division))
						.DivisionPlace = Convert.ToInt16(Null.SetNull(dr.Item("DivisionPlace"),.DivisionPlace))
						.DivisionTotal = Convert.ToInt16(Null.SetNull(dr.Item("DivisionTotal"),.DivisionTotal))
						.SexPlace = Convert.ToInt32(Null.SetNull(dr.Item("SexPlace"),.SexPlace))
						.SexTotal = Convert.ToInt32(Null.SetNull(dr.Item("SexTotal"),.SexTotal))
						.GunTime = Convert.ToDateTime(Null.SetNull(dr.Item("GunTime"),.GunTime))
						.NetTime = Convert.ToDateTime(Null.SetNull(dr.Item("NetTime"),.NetTime))
						.Pace = Convert.ToDateTime(Null.SetNull(dr.Item("Pace"),.Pace))
						.Place = Convert.ToInt32(Null.SetNull(dr.Item("Place"),.Place))
						.Seed = Convert.ToDateTime(Null.SetNull(dr.Item("Seed"),.Seed))
						.Team = Convert.ToString(Null.SetNull(dr.Item("Team"),.Team))
						.Fee = Convert.ToDecimal(Null.SetNull(dr.Item("Fee"),.Fee))
						.EntryDate = Convert.ToDateTime(Null.SetNull(dr.Item("EntryDate"),.EntryDate))
						.Clydesdale = Convert.ToBoolean(Null.SetNull(dr.Item("Clydesdale"),.Clydesdale))
						.Survivor = Convert.ToBoolean(Null.SetNull(dr.Item("Survivor"),.Survivor))
						.NonCompetitive = Convert.ToBoolean(Null.SetNull(dr.Item("NonCompetitive"),.NonCompetitive))
						.USATF = Convert.ToBoolean(Null.SetNull(dr.Item("USATF"),.USATF))
						.Age = Convert.ToInt16(Null.SetNull(dr.Item("Age"),.Age))
						.Sex = Convert.ToString(Null.SetNull(dr.Item("Sex"),.Sex))
						.Weight = Convert.ToInt16(Null.SetNull(dr.Item("Weight"),.Weight))
						.Heat = Convert.ToInt16(Null.SetNull(dr.Item("Heat"),.Heat))
						.WaveOffset = Convert.ToDateTime(Null.SetNull(dr.Item("WaveOffset"),.WaveOffset))
						.WAVATime = Convert.ToDateTime(Null.SetNull(dr.Item("WAVATime"),.WAVATime))
						.PerformancePercent = Convert.ToSingle(Null.SetNull(dr.Item("PerformancePercent"),.PerformancePercent))
						.SeriesPlace = Convert.ToInt16(Null.SetNull(dr.Item("SeriesPlace"),.SeriesPlace))
						.SeriesAge = Convert.ToInt16(Null.SetNull(dr.Item("SeriesAge"),.SeriesAge))
						.SeriesDivision = Convert.ToString(Null.SetNull(dr.Item("SeriesDivision"),.SeriesDivision))
						.SeriesPoints = Convert.ToInt16(Null.SetNull(dr.Item("SeriesPoints"),.SeriesPoints))
						.Confirmation = Convert.ToBoolean(Null.SetNull(dr.Item("Confirmation"),.Confirmation))
						.Results = Convert.ToBoolean(Null.SetNull(dr.Item("Results"),.Results))
						.ChipId = Convert.ToString(Null.SetNull(dr.Item("ChipId"),.ChipId))
						.AwardDivision = Convert.ToString(Null.SetNull(dr.Item("AwardDivision"),.AwardDivision))
						.AwardPlace = Convert.ToInt16(Null.SetNull(dr.Item("AwardPlace"),.AwardPlace))
						.AwardPriority = Convert.ToInt16(Null.SetNull(dr.Item("AwardPriority"),.AwardPriority))
					End With
					EventsInfolist.Add(objEventsInfo)
			End While	
		End Using
		Catch exc As Exception
    		LogException(exc)
			Throw
		End Try

		Return EventsInfolist
		End Function
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblEventss from the database by RaceId using
        ''' TblEvents_FK01
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListEventssByRaceId(ByVal portalId As Integer) As List(Of EventsInfo)
		Dim EventsInfolist As List(Of EventsInfo) = New List(Of EventsInfo)

		Try
		Using dr As IDataReader = DataProvider.Instance().GetEventssByRaceId(portalId)
			While dr.Read
				Dim objEventsInfo As EventsInfo = New EventsInfo
					With objEventsInfo
						.RunnerId = Convert.ToInt32(Null.SetNull(dr.Item("RunnerId"),.RunnerId))
						.RaceId = Convert.ToInt32(Null.SetNull(dr.Item("RaceId"),.RaceId))
						.PortalId = Convert.ToInt32(Null.SetNull(dr.Item("PortalId"),.PortalId))
						.BibNumber = Convert.ToInt32(Null.SetNull(dr.Item("BibNumber"),.BibNumber))
						.Division = Convert.ToString(Null.SetNull(dr.Item("Division"),.Division))
						.DivisionPlace = Convert.ToInt16(Null.SetNull(dr.Item("DivisionPlace"),.DivisionPlace))
						.DivisionTotal = Convert.ToInt16(Null.SetNull(dr.Item("DivisionTotal"),.DivisionTotal))
						.SexPlace = Convert.ToInt32(Null.SetNull(dr.Item("SexPlace"),.SexPlace))
						.SexTotal = Convert.ToInt32(Null.SetNull(dr.Item("SexTotal"),.SexTotal))
						.GunTime = Convert.ToDateTime(Null.SetNull(dr.Item("GunTime"),.GunTime))
						.NetTime = Convert.ToDateTime(Null.SetNull(dr.Item("NetTime"),.NetTime))
						.Pace = Convert.ToDateTime(Null.SetNull(dr.Item("Pace"),.Pace))
						.Place = Convert.ToInt32(Null.SetNull(dr.Item("Place"),.Place))
						.Seed = Convert.ToDateTime(Null.SetNull(dr.Item("Seed"),.Seed))
						.Team = Convert.ToString(Null.SetNull(dr.Item("Team"),.Team))
						.Fee = Convert.ToDecimal(Null.SetNull(dr.Item("Fee"),.Fee))
						.EntryDate = Convert.ToDateTime(Null.SetNull(dr.Item("EntryDate"),.EntryDate))
						.Clydesdale = Convert.ToBoolean(Null.SetNull(dr.Item("Clydesdale"),.Clydesdale))
						.Survivor = Convert.ToBoolean(Null.SetNull(dr.Item("Survivor"),.Survivor))
						.NonCompetitive = Convert.ToBoolean(Null.SetNull(dr.Item("NonCompetitive"),.NonCompetitive))
						.USATF = Convert.ToBoolean(Null.SetNull(dr.Item("USATF"),.USATF))
						.Age = Convert.ToInt16(Null.SetNull(dr.Item("Age"),.Age))
						.Sex = Convert.ToString(Null.SetNull(dr.Item("Sex"),.Sex))
						.Weight = Convert.ToInt16(Null.SetNull(dr.Item("Weight"),.Weight))
						.Heat = Convert.ToInt16(Null.SetNull(dr.Item("Heat"),.Heat))
						.WaveOffset = Convert.ToDateTime(Null.SetNull(dr.Item("WaveOffset"),.WaveOffset))
						.WAVATime = Convert.ToDateTime(Null.SetNull(dr.Item("WAVATime"),.WAVATime))
						.PerformancePercent = Convert.ToSingle(Null.SetNull(dr.Item("PerformancePercent"),.PerformancePercent))
						.SeriesPlace = Convert.ToInt16(Null.SetNull(dr.Item("SeriesPlace"),.SeriesPlace))
						.SeriesAge = Convert.ToInt16(Null.SetNull(dr.Item("SeriesAge"),.SeriesAge))
						.SeriesDivision = Convert.ToString(Null.SetNull(dr.Item("SeriesDivision"),.SeriesDivision))
						.SeriesPoints = Convert.ToInt16(Null.SetNull(dr.Item("SeriesPoints"),.SeriesPoints))
						.Confirmation = Convert.ToBoolean(Null.SetNull(dr.Item("Confirmation"),.Confirmation))
						.Results = Convert.ToBoolean(Null.SetNull(dr.Item("Results"),.Results))
						.ChipId = Convert.ToString(Null.SetNull(dr.Item("ChipId"),.ChipId))
						.AwardDivision = Convert.ToString(Null.SetNull(dr.Item("AwardDivision"),.AwardDivision))
						.AwardPlace = Convert.ToInt16(Null.SetNull(dr.Item("AwardPlace"),.AwardPlace))
						.AwardPriority = Convert.ToInt16(Null.SetNull(dr.Item("AwardPriority"),.AwardPriority))
					End With
					EventsInfolist.Add(objEventsInfo)
			End While	
		End Using
		Catch exc As Exception
    		LogException(exc)
			Throw
		End Try

		Return EventsInfolist
		End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new tblEvents to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function AddEvents(ByVal objtblEvents As EventsInfo) As Integer
                Return DataProvider.Instance().AddEvents(objtblEvents.PortalId, objtblEvents.BibNumber, objtblEvents.Division, objtblEvents.DivisionPlace, objtblEvents.DivisionTotal, objtblEvents.SexPlace, objtblEvents.SexTotal, objtblEvents.GunTime, objtblEvents.NetTime, objtblEvents.Pace, objtblEvents.Place, objtblEvents.Seed, objtblEvents.Team, objtblEvents.Fee, objtblEvents.EntryDate, objtblEvents.Clydesdale, objtblEvents.Survivor, objtblEvents.NonCompetitive, objtblEvents.USATF, objtblEvents.Age, objtblEvents.Sex, objtblEvents.Weight, objtblEvents.Heat, objtblEvents.WaveOffset, objtblEvents.WAVATime, objtblEvents.PerformancePercent, objtblEvents.SeriesPlace, objtblEvents.SeriesAge, objtblEvents.SeriesDivision, objtblEvents.SeriesPoints, objtblEvents.Confirmation, objtblEvents.Results, objtblEvents.ChipId, objtblEvents.AwardDivision, objtblEvents.AwardPlace, objtblEvents.AwardPriority)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a tblEvents to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub UpdateEvents(ByVal objtblEvents As EventsInfo)
                DataProvider.Instance().UpdateEvents(objtblEvents.RunnerId, objtblEvents.RaceId, objtblEvents.PortalId, objtblEvents.BibNumber, objtblEvents.Division, objtblEvents.DivisionPlace, objtblEvents.DivisionTotal, objtblEvents.SexPlace, objtblEvents.SexTotal, objtblEvents.GunTime, objtblEvents.NetTime, objtblEvents.Pace, objtblEvents.Place, objtblEvents.Seed, objtblEvents.Team, objtblEvents.Fee, objtblEvents.EntryDate, objtblEvents.Clydesdale, objtblEvents.Survivor, objtblEvents.NonCompetitive, objtblEvents.USATF, objtblEvents.Age, objtblEvents.Sex, objtblEvents.Weight, objtblEvents.Heat, objtblEvents.WaveOffset, objtblEvents.WAVATime, objtblEvents.PerformancePercent, objtblEvents.SeriesPlace, objtblEvents.SeriesAge, objtblEvents.SeriesDivision, objtblEvents.SeriesPoints, objtblEvents.Confirmation, objtblEvents.Results, objtblEvents.ChipId, objtblEvents.AwardDivision, objtblEvents.AwardPlace, objtblEvents.AwardPriority)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a tblEvents from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub DeleteEvents(ByVal objtblEvents As EventsInfo)
            DataProvider.Instance().DeleteEvents(objtblEvents.RunnerId, objtblEvents.RaceId)
        End Sub
#End Region
#Region "EventTypes Methods"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a tblEventTypes from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function GetEventTypes(ByVal eventTypeId As Integer) As EventTypesInfo
            Return CType(CBO.FillObject(DataProvider.Instance().GetEventTypes(eventTypeId), GetType(EventTypesInfo)), EventTypesInfo)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblEventTypess from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListEventTypess(ByVal portalId As Integer) As List(Of EventTypesInfo)
            Return CBO.FillCollection(Of EventTypesInfo)(DataProvider.Instance().ListEventTypess(portalId))
		End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new tblEventTypes to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function AddEventTypes(ByVal objtblEventTypes As EventTypesInfo) As Integer
                Return DataProvider.Instance().AddEventTypes(objtblEventTypes.PortalId, objtblEventTypes.EventTypeName, objtblEventTypes.DefaultType)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a tblEventTypes to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub UpdateEventTypes(ByVal objtblEventTypes As EventTypesInfo)
                DataProvider.Instance().UpdateEventTypes(objtblEventTypes.EventTypeId, objtblEventTypes.PortalId, objtblEventTypes.EventTypeName, objtblEventTypes.DefaultType)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a tblEventTypes from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub DeleteEventTypes(ByVal objtblEventTypes As EventTypesInfo)
            DataProvider.Instance().DeleteEventTypes(objtblEventTypes.EventTypeId)
        End Sub
#End Region
#Region "MemberTypes Methods"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a tblMemberTypes from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function GetMemberTypes(ByVal memberTypeID As Integer) As MemberTypesInfo
            Return CType(CBO.FillObject(DataProvider.Instance().GetMemberTypes(memberTypeID), GetType(MemberTypesInfo)), MemberTypesInfo)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblMemberTypess from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListMemberTypess(ByVal portalId As Integer) As List(Of MemberTypesInfo)
            Return CBO.FillCollection(Of MemberTypesInfo)(DataProvider.Instance().ListMemberTypess(portalId))
		End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new tblMemberTypes to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function AddMemberTypes(ByVal objtblMemberTypes As MemberTypesInfo) As Integer
                Return DataProvider.Instance().AddMemberTypes(objtblMemberTypes.PortalId, objtblMemberTypes.MemberType, objtblMemberTypes.MemberDues)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a tblMemberTypes to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub UpdateMemberTypes(ByVal objtblMemberTypes As MemberTypesInfo)
                DataProvider.Instance().UpdateMemberTypes(objtblMemberTypes.MemberTypeID, objtblMemberTypes.PortalId, objtblMemberTypes.MemberType, objtblMemberTypes.MemberDues)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a tblMemberTypes from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub DeleteMemberTypes(ByVal objtblMemberTypes As MemberTypesInfo)
            DataProvider.Instance().DeleteMemberTypes(objtblMemberTypes.MemberTypeID)
        End Sub
#End Region
#Region "Organization Methods"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a tblOrganization from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function GetOrganization(ByVal orgID As Integer) As OrganizationInfo
            Return CType(CBO.FillObject(DataProvider.Instance().GetOrganization(orgID), GetType(OrganizationInfo)), OrganizationInfo)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblOrganizations from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListOrganizations(ByVal portalId As Integer) As List(Of OrganizationInfo)
            Return CBO.FillCollection(Of OrganizationInfo)(DataProvider.Instance().ListOrganizations(portalId))
		End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new tblOrganization to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function AddOrganization(ByVal objtblOrganization As OrganizationInfo) As Integer
                Return DataProvider.Instance().AddOrganization(objtblOrganization.PortalId, objtblOrganization.ClubName, objtblOrganization.Address, objtblOrganization.City, objtblOrganization.StateOrProvince, objtblOrganization.PostalCode, objtblOrganization.Country, objtblOrganization.DefaultInvoiceDescription, objtblOrganization.PhoneNumber, objtblOrganization.FaxNumber, objtblOrganization.EMail, objtblOrganization.Nickname, objtblOrganization.MailingExpirePeriod, objtblOrganization.LastEmail, objtblOrganization.LastLetters)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a tblOrganization to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub UpdateOrganization(ByVal objtblOrganization As OrganizationInfo)
                DataProvider.Instance().UpdateOrganization(objtblOrganization.OrgID, objtblOrganization.PortalId, objtblOrganization.ClubName, objtblOrganization.Address, objtblOrganization.City, objtblOrganization.StateOrProvince, objtblOrganization.PostalCode, objtblOrganization.Country, objtblOrganization.DefaultInvoiceDescription, objtblOrganization.PhoneNumber, objtblOrganization.FaxNumber, objtblOrganization.EMail, objtblOrganization.Nickname, objtblOrganization.MailingExpirePeriod, objtblOrganization.LastEmail, objtblOrganization.LastLetters)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a tblOrganization from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub DeleteOrganization(ByVal objtblOrganization As OrganizationInfo)
            DataProvider.Instance().DeleteOrganization(objtblOrganization.OrgID)
        End Sub
#End Region
#Region "RaceDivisions Methods"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a tblRaceDivisions from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function GetRaceDivisions(ByVal raceId As Integer, ByVal priority As Integer) As RaceDivisionsInfo
            Return CType(CBO.FillObject(DataProvider.Instance().GetRaceDivisions(raceId, priority), GetType(RaceDivisionsInfo)), RaceDivisionsInfo)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblRaceDivisionss from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListRaceDivisionss(ByVal portalId As Integer) As List(Of RaceDivisionsInfo)
		Dim RaceDivisionsInfolist As List(Of RaceDivisionsInfo) = New List(Of RaceDivisionsInfo)

		Try
		Using dr As IDataReader = DataProvider.Instance().ListRaceDivisionss(portalId)
			While dr.Read
				Dim objRaceDivisionsInfo As RaceDivisionsInfo = New RaceDivisionsInfo
					With objRaceDivisionsInfo
						.RaceId = Convert.ToInt32(Null.SetNull(dr.Item("RaceId"),.RaceId))
						.Priority = Convert.ToInt32(Null.SetNull(dr.Item("Priority"),.Priority))
						.PortalId = Convert.ToInt32(Null.SetNull(dr.Item("PortalId"),.PortalId))
						.Sex = Convert.ToString(Null.SetNull(dr.Item("Sex"),.Sex))
						.StartAge = Convert.ToInt16(Null.SetNull(dr.Item("StartAge"),.StartAge))
						.EndAge = Convert.ToInt32(Null.SetNull(dr.Item("EndAge"),.EndAge))
						.StartWeight = Convert.ToInt32(Null.SetNull(dr.Item("StartWeight"),.StartWeight))
						.EndWeight = Convert.ToInt32(Null.SetNull(dr.Item("EndWeight"),.EndWeight))
						.Survivor = Convert.ToBoolean(Null.SetNull(dr.Item("Survivor"),.Survivor))
						.Division = Convert.ToString(Null.SetNull(dr.Item("Division"),.Division))
						.Depth = Convert.ToInt16(Null.SetNull(dr.Item("Depth"),.Depth))
						.Overall = Convert.ToBoolean(Null.SetNull(dr.Item("Overall"),.Overall))
						.Masters = Convert.ToBoolean(Null.SetNull(dr.Item("Masters"),.Masters))
						.USATF = Convert.ToBoolean(Null.SetNull(dr.Item("USATF"),.USATF))
					End With
					RaceDivisionsInfolist.Add(objRaceDivisionsInfo)
			End While	
		End Using
		Catch exc As Exception
    		LogException(exc)
			Throw
		End Try

		Return RaceDivisionsInfolist
		End Function
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblRaceDivisionss from the database by RaceId using
        ''' FK_tblRaceDivisions_tblRaces
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListRaceDivisionssByRaceId(ByVal portalId As Integer) As List(Of RaceDivisionsInfo)
		Dim RaceDivisionsInfolist As List(Of RaceDivisionsInfo) = New List(Of RaceDivisionsInfo)

		Try
		Using dr As IDataReader = DataProvider.Instance().GetRaceDivisionssByRaceId(portalId)
			While dr.Read
				Dim objRaceDivisionsInfo As RaceDivisionsInfo = New RaceDivisionsInfo
					With objRaceDivisionsInfo
						.RaceId = Convert.ToInt32(Null.SetNull(dr.Item("RaceId"),.RaceId))
						.Priority = Convert.ToInt32(Null.SetNull(dr.Item("Priority"),.Priority))
						.PortalId = Convert.ToInt32(Null.SetNull(dr.Item("PortalId"),.PortalId))
						.Sex = Convert.ToString(Null.SetNull(dr.Item("Sex"),.Sex))
						.StartAge = Convert.ToInt16(Null.SetNull(dr.Item("StartAge"),.StartAge))
						.EndAge = Convert.ToInt32(Null.SetNull(dr.Item("EndAge"),.EndAge))
						.StartWeight = Convert.ToInt32(Null.SetNull(dr.Item("StartWeight"),.StartWeight))
						.EndWeight = Convert.ToInt32(Null.SetNull(dr.Item("EndWeight"),.EndWeight))
						.Survivor = Convert.ToBoolean(Null.SetNull(dr.Item("Survivor"),.Survivor))
						.Division = Convert.ToString(Null.SetNull(dr.Item("Division"),.Division))
						.Depth = Convert.ToInt16(Null.SetNull(dr.Item("Depth"),.Depth))
						.Overall = Convert.ToBoolean(Null.SetNull(dr.Item("Overall"),.Overall))
						.Masters = Convert.ToBoolean(Null.SetNull(dr.Item("Masters"),.Masters))
						.USATF = Convert.ToBoolean(Null.SetNull(dr.Item("USATF"),.USATF))
					End With
					RaceDivisionsInfolist.Add(objRaceDivisionsInfo)
			End While	
		End Using
		Catch exc As Exception
    		LogException(exc)
			Throw
		End Try

		Return RaceDivisionsInfolist
		End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new tblRaceDivisions to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function AddRaceDivisions(ByVal objtblRaceDivisions As RaceDivisionsInfo) As Integer
                Return DataProvider.Instance().AddRaceDivisions(objtblRaceDivisions.PortalId, objtblRaceDivisions.Sex, objtblRaceDivisions.StartAge, objtblRaceDivisions.EndAge, objtblRaceDivisions.StartWeight, objtblRaceDivisions.EndWeight, objtblRaceDivisions.Survivor, objtblRaceDivisions.Division, objtblRaceDivisions.Depth, objtblRaceDivisions.Overall, objtblRaceDivisions.Masters, objtblRaceDivisions.USATF)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a tblRaceDivisions to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub UpdateRaceDivisions(ByVal objtblRaceDivisions As RaceDivisionsInfo)
                DataProvider.Instance().UpdateRaceDivisions(objtblRaceDivisions.RaceId, objtblRaceDivisions.Priority, objtblRaceDivisions.PortalId, objtblRaceDivisions.Sex, objtblRaceDivisions.StartAge, objtblRaceDivisions.EndAge, objtblRaceDivisions.StartWeight, objtblRaceDivisions.EndWeight, objtblRaceDivisions.Survivor, objtblRaceDivisions.Division, objtblRaceDivisions.Depth, objtblRaceDivisions.Overall, objtblRaceDivisions.Masters, objtblRaceDivisions.USATF)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a tblRaceDivisions from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub DeleteRaceDivisions(ByVal objtblRaceDivisions As RaceDivisionsInfo)
            DataProvider.Instance().DeleteRaceDivisions(objtblRaceDivisions.RaceId, objtblRaceDivisions.Priority)
        End Sub
#End Region
#Region "Races Methods"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a tblRaces from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function GetRaces(ByVal raceId As Integer) As RacesInfo
            Return CType(CBO.FillObject(DataProvider.Instance().GetRaces(raceId), GetType(RacesInfo)), RacesInfo)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblRacess from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListRacess(ByVal portalId As Integer) As List(Of RacesInfo)
            Return CBO.FillCollection(Of RacesInfo)(DataProvider.Instance().ListRacess(portalId))
		End Function
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblRacess from the database by EventType using
        ''' TblRaces_FK00
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListRacessByEventType(ByVal portalId As Integer) As List(Of RacesInfo)
            Return CBO.FillCollection(Of RacesInfo)(DataProvider.Instance().GetRacessByEventType(portalId))
		End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new tblRaces to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function AddRaces(ByVal objtblRaces As RacesInfo) As Integer
                Return DataProvider.Instance().AddRaces(objtblRaces.PortalId, objtblRaces.EventType, objtblRaces.RaceName, objtblRaces.RaceDate, objtblRaces.RaceDistance, objtblRaces.RaceLocation, objtblRaces.RaceCity, objtblRaces.RaceState, objtblRaces.RaceCountry, objtblRaces.RaceLogo, objtblRaces.USATFNumber, objtblRaces.RodaleEventId, objtblRaces.ActiveEventId, objtblRaces.PreregistrationDate, objtblRaces.PreregistrationFee, objtblRaces.RaceDayFee, objtblRaces.RegistrationURL, objtblRaces.RegistrationLogo, objtblRaces.Description, objtblRaces.EmailText, objtblRaces.ResultsText, objtblRaces.ResultsURL, objtblRaces.Annual, objtblRaces.Keyword, objtblRaces.LastBibNumber, objtblRaces.ContactName, objtblRaces.ContactAddress1, objtblRaces.ContactAddress2, objtblRaces.ContactCity, objtblRaces.ContactState, objtblRaces.ContactZIP, objtblRaces.ContactPhoneNumber, objtblRaces.ContactFAX, objtblRaces.ContactEMail, objtblRaces.WEBSite, objtblRaces.RelatedRace, objtblRaces.Organization, objtblRaces.VolunteerContact, objtblRaces.VolunteerPhone, objtblRaces.VolunteerEmail, objtblRaces.DisplayStartDate, objtblRaces.DisplayEndDate, objtblRaces.InsertionDate, objtblRaces.ModificationDate)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a tblRaces to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub UpdateRaces(ByVal objtblRaces As RacesInfo)
                DataProvider.Instance().UpdateRaces(objtblRaces.RaceId, objtblRaces.PortalId, objtblRaces.EventType, objtblRaces.RaceName, objtblRaces.RaceDate, objtblRaces.RaceDistance, objtblRaces.RaceLocation, objtblRaces.RaceCity, objtblRaces.RaceState, objtblRaces.RaceCountry, objtblRaces.RaceLogo, objtblRaces.USATFNumber, objtblRaces.RodaleEventId, objtblRaces.ActiveEventId, objtblRaces.PreregistrationDate, objtblRaces.PreregistrationFee, objtblRaces.RaceDayFee, objtblRaces.RegistrationURL, objtblRaces.RegistrationLogo, objtblRaces.Description, objtblRaces.EmailText, objtblRaces.ResultsText, objtblRaces.ResultsURL, objtblRaces.Annual, objtblRaces.Keyword, objtblRaces.LastBibNumber, objtblRaces.ContactName, objtblRaces.ContactAddress1, objtblRaces.ContactAddress2, objtblRaces.ContactCity, objtblRaces.ContactState, objtblRaces.ContactZIP, objtblRaces.ContactPhoneNumber, objtblRaces.ContactFAX, objtblRaces.ContactEMail, objtblRaces.WEBSite, objtblRaces.RelatedRace, objtblRaces.Organization, objtblRaces.VolunteerContact, objtblRaces.VolunteerPhone, objtblRaces.VolunteerEmail, objtblRaces.DisplayStartDate, objtblRaces.DisplayEndDate, objtblRaces.InsertionDate, objtblRaces.ModificationDate)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a tblRaces from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub DeleteRaces(ByVal objtblRaces As RacesInfo)
            DataProvider.Instance().DeleteRaces(objtblRaces.RaceId)
        End Sub
#End Region
#Region "ZIP Methods"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a tblZIP from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function GetZIP(ByVal fiveDigitZIP As String, ByVal sequence As short) As ZIPInfo
            Return CType(CBO.FillObject(DataProvider.Instance().GetZIP(fiveDigitZIP, sequence), GetType(ZIPInfo)), ZIPInfo)
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of tblZIPs from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function ListZIPs(ByVal portalId As Integer) As List(Of ZIPInfo)
		Dim ZIPInfolist As List(Of ZIPInfo) = New List(Of ZIPInfo)

		Try
		Using dr As IDataReader = DataProvider.Instance().ListZIPs(portalId)
			While dr.Read
				Dim objZIPInfo As ZIPInfo = New ZIPInfo
					With objZIPInfo
						.FiveDigitZIP = Convert.ToString(Null.SetNull(dr.Item("FiveDigitZIP"),.FiveDigitZIP))
						.Sequence = Convert.ToInt16(Null.SetNull(dr.Item("Sequence"),.Sequence))
						.PortalId = Convert.ToInt32(Null.SetNull(dr.Item("PortalId"),.PortalId))
						.City = Convert.ToString(Null.SetNull(dr.Item("City"),.City))
						.State = Convert.ToString(Null.SetNull(dr.Item("State"),.State))
						.County = Convert.ToString(Null.SetNull(dr.Item("County"),.County))
						.Country = Convert.ToString(Null.SetNull(dr.Item("Country"),.Country))
					End With
					ZIPInfolist.Add(objZIPInfo)
			End While	
		End Using
		Catch exc As Exception
    		LogException(exc)
			Throw
		End Try

		Return ZIPInfolist
		End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new tblZIP to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function AddZIP(ByVal objtblZIP As ZIPInfo) As Integer
                Return DataProvider.Instance().AddZIP(objtblZIP.PortalId, objtblZIP.City, objtblZIP.State, objtblZIP.County, objtblZIP.Country)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a tblZIP to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub UpdateZIP(ByVal objtblZIP As ZIPInfo)
                DataProvider.Instance().UpdateZIP(objtblZIP.FiveDigitZIP, objtblZIP.Sequence, objtblZIP.PortalId, objtblZIP.City, objtblZIP.State, objtblZIP.County, objtblZIP.Country)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a tblZIP from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub DeleteZIP(ByVal objtblZIP As ZIPInfo)
            DataProvider.Instance().DeleteZIP(objtblZIP.FiveDigitZIP, objtblZIP.Sequence)
        End Sub
#End Region
		Private Shared Function GetNull(ByVal Field As Object) As Object
    		Return Null.GetNull(Field, DBNull.Value)
		End Function
        
#Region "Race2012 Purge Method"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' Purges all Race2012 data from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
        Public Sub Race2012Purge(ByVal portalId As Integer)
            DataProvider.Instance().PurgeRace2012(portalId)
        End Sub
#End Region

#Region "Optional Interfaces"
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' GetSearchItems implements the ISearchable Interface for Race2012 
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' <param name="ModInfo">The ModuleInfo for the module to be Indexed</param>
 		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        Public Function GetSearchItems(ByVal ModInfo As Entities.Modules.ModuleInfo) As DotNetNuke.Services.Search.SearchItemInfoCollection Implements DotNetNuke.Entities.Modules.ISearchable.GetSearchItems

            Dim SearchItemCollection As New SearchItemInfoCollection
			' Add Implementation Details Here
            Return SearchItemCollection

        End Function
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' ExportModule implements the IPortable ExportModule Interface for Race2012
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        Public Function ExportModule(ByVal ModuleID As Integer) As String Implements DotNetNuke.Entities.Modules.IPortable.ExportModule

           Dim sXML As New StringBuilder
            '  Dim TotalRecords As Integer
            Dim objRace2012 As New Race2012
            Dim objType As Type = objRace2012.GetType
            Dim xser As Xml.Serialization.XmlSerializer
            Dim ns As New XmlSerializerNamespaces()
            Dim sw As New IO.StringWriter
            Dim PortalID As Integer = DotNetNuke.Entities.Portals.PortalController.GetCurrentPortalSettings.PortalId
            Dim objModule As New Entities.Modules.ModuleController
            Dim Settings As Hashtable = objModule.GetModuleSettings(ModuleID)

            Try
                objRace2012.Bouncess = ListBouncess(PortalId)
                objRace2012.ContactTypess = ListContactTypess(PortalId)
                objRace2012.Divisionss = ListDivisionss(PortalId)
                objRace2012.DoNotEmails = ListDoNotEmails(PortalId)
                objRace2012.Entrantss = ListEntrantss(PortalId)
                objRace2012.Eventss = ListEventss(PortalId)
                objRace2012.EventTypess = ListEventTypess(PortalId)
                objRace2012.MemberTypess = ListMemberTypess(PortalId)
                objRace2012.Organizations = ListOrganizations(PortalId)
                objRace2012.RaceDivisionss = ListRaceDivisionss(PortalId)
                objRace2012.Racess = ListRacess(PortalId)
                objRace2012.ZIPs = ListZIPs(PortalId)
            Catch exc As Exception
                LogException(exc)
                Throw
            End Try

            ns.Add("", "")
            xser = New Xml.Serialization.XmlSerializer(objType)
            xser.Serialize(sw, objRace2012, ns)
			
			sw.GetStringBuilder().Remove(0,39)
            sXML.Append(sw.GetStringBuilder().ToString())
			
            Return sXML.ToString

        End Function
		
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' ImportModule implements the IPortable ImportModule Interface for Race2012
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
		''' Generated by CodeSmith on Friday, January 17, 2014
        ''' </history>
        ''' -----------------------------------------------------------------------------
        Public Sub ImportModule(ByVal ModuleID As Integer, ByVal Content As String, ByVal Version As String, ByVal UserId As Integer) Implements DotNetNuke.Entities.Modules.IPortable.ImportModule
            
            Dim objRace2012 As New Race2012
            Dim objType As Type = objRace2012.GetType
            Dim xser As Xml.Serialization.XmlSerializer
            Dim xxml As XmlReader
            Dim PortalID As Integer = DotNetNuke.Entities.Portals.PortalController.GetCurrentPortalSettings.PortalId
            Dim dicBounces As New Dictionary(Of String, Integer)
            Dim dicContactTypes As New Dictionary(Of String, Integer)
            Dim dicDivisions As New Dictionary(Of String, Integer)
            Dim dicDoNotEmail As New Dictionary(Of String, Integer)
            Dim dicEntrants As New Dictionary(Of String, Integer)
            Dim dicEvents As New Dictionary(Of String, Integer)
            Dim dicEventTypes As New Dictionary(Of String, Integer)
            Dim dicMemberTypes As New Dictionary(Of String, Integer)
            Dim dicOrganization As New Dictionary(Of String, Integer)
            Dim dicRaceDivisions As New Dictionary(Of String, Integer)
            Dim dicRaces As New Dictionary(Of String, Integer)
            Dim dicZIP As New Dictionary(Of String, Integer)
            Dim objModule As New Entities.Modules.ModuleController
            Dim ms As Hashtable = objModule.GetModuleSettings(ModuleID)

            Try
                Dim xstr As New StringReader(Content)
                xxml = New XmlTextReader(xstr)
                xser = New Xml.Serialization.XmlSerializer(objType)
                objRace2012 = xser.Deserialize(xxml)
                xstr.Close()
                xxml.Close()
            Catch exc As Exception
                LogException(exc)
                Throw
            End Try
			
            If ms.ContainsKey("Race2012PurgeBeforeImport") And ms("Race2012PurgeBeforeImport").ToString = "True" Then
                Try
                    Race2012Purge(PortalId)
                Catch exc As Exception
                    LogException(exc)
                    Throw
                End Try
            End If
            
        Try
            For Each BouncesInfo As BouncesInfo In objRace2012.Bouncess
                BouncesInfo.PortalId = PortalId
				BouncesInfo.EMail = AddBounces(BouncesInfo)
            Next
            For Each ContactTypesInfo As ContactTypesInfo In objRace2012.ContactTypess
                ContactTypesInfo.PortalId = PortalId
				ContactTypesInfo.ContactType = AddContactTypes(ContactTypesInfo)
                'The following line will require modification to depending on the actual lookup field..
                dicContactTypes.Add(ContactTypesInfo.Abbreviation, ContactTypesInfo.ContactType)
            Next
            For Each DivisionsInfo As DivisionsInfo In objRace2012.Divisionss
                DivisionsInfo.PortalId = PortalId
				DivisionsInfo.Division = AddDivisions(DivisionsInfo)
                'The following line will require modification to depending on the actual lookup field..
                dicDivisions.Add(DivisionsInfo.Description, DivisionsInfo.Division)
            Next
            For Each DoNotEmailInfo As DoNotEmailInfo In objRace2012.DoNotEmails
                DoNotEmailInfo.PortalId = PortalId
				DoNotEmailInfo.EmailAddress = AddDoNotEmail(DoNotEmailInfo)
                'The following line will require modification to depending on the actual lookup field..
                dicDoNotEmail.Add(DoNotEmailInfo.MovedBy, DoNotEmailInfo.EmailAddress)
            Next
            For Each EntrantsInfo As EntrantsInfo In objRace2012.Entrantss
                EntrantsInfo.PortalId = PortalId
				EntrantsInfo.RunnerId = AddEntrants(EntrantsInfo)
                'The following line will require modification to depending on the actual lookup field..
                dicEntrants.Add(EntrantsInfo.ContactType, EntrantsInfo.RunnerId)
            Next
            For Each EventsInfo As EventsInfo In objRace2012.Eventss
                EventsInfo.PortalId = PortalId
                AddEvents(EventsInfo)
            Next
            For Each EventTypesInfo As EventTypesInfo In objRace2012.EventTypess
                EventTypesInfo.PortalId = PortalId
				EventTypesInfo.EventTypeId = AddEventTypes(EventTypesInfo)
                'The following line will require modification to depending on the actual lookup field..
                dicEventTypes.Add(EventTypesInfo.EventTypeName, EventTypesInfo.EventTypeId)
            Next
            For Each MemberTypesInfo As MemberTypesInfo In objRace2012.MemberTypess
                MemberTypesInfo.PortalId = PortalId
				MemberTypesInfo.MemberTypeID = AddMemberTypes(MemberTypesInfo)
                'The following line will require modification to depending on the actual lookup field..
                dicMemberTypes.Add(MemberTypesInfo.MemberType, MemberTypesInfo.MemberTypeID)
            Next
            For Each OrganizationInfo As OrganizationInfo In objRace2012.Organizations
                OrganizationInfo.PortalId = PortalId
				OrganizationInfo.OrgID = AddOrganization(OrganizationInfo)
                'The following line will require modification to depending on the actual lookup field..
                dicOrganization.Add(OrganizationInfo.ClubName, OrganizationInfo.OrgID)
            Next
            For Each RaceDivisionsInfo As RaceDivisionsInfo In objRace2012.RaceDivisionss
                RaceDivisionsInfo.PortalId = PortalId
                AddRaceDivisions(RaceDivisionsInfo)
            Next
            For Each RacesInfo As RacesInfo In objRace2012.Racess
                RacesInfo.PortalId = PortalId
				RacesInfo.RaceId = AddRaces(RacesInfo)
                'The following line will require modification to depending on the actual lookup field..
                dicRaces.Add(RacesInfo.EventType, RacesInfo.RaceId)
            Next
            For Each ZIPInfo As ZIPInfo In objRace2012.ZIPs
                ZIPInfo.PortalId = PortalId
                AddZIP(ZIPInfo)
            Next
        Catch exc As Exception
            LogException(exc)
            Throw
        End Try

        End Sub
#End Region
    End Class
End Namespace
