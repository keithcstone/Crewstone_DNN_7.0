/*
' Copyright (c) 2014 Crewstone Consulting ltd
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
' 
*/
using System;
using System.Data;
using DotNetNuke.Framework;

namespace Namespace.Modules.Race2012.Data
{    
    /// ----------------------------------------------------------------------------- 
    /// <summary> 
    /// Abstract DataProvider class 
    /// </summary> 
    /// <remarks> 
    /// </remarks> 
    /// <history> 
    /// Generated by CodeSmith on Friday, January 17, 2014
    /// </history> 
    /// ----------------------------------------------------------------------------- 
    public abstract class DataProvider
    {
#region common methods

        /// <summary>
        /// var that is returned in the this singleton
        /// pattern
        /// </summary>
        private static DataProvider instance = null;

        /// <summary>
        /// private static cstor that is used to init an
        /// instance of this class as a singleton
        /// </summary>
        static DataProvider()
        {
            instance = (DataProvider)Reflection.CreateObject("data", "Namespace.Modules.Race2012.Providers", "");
        }

        /// <summary>
        /// Exposes the singleton object used to access the database with
        /// the conrete dataprovider
        /// </summary>
        /// <returns></returns>
        public static DataProvider Instance()
        {
            return instance;
        }
#endregion

#region Bounces Abstract Methods
	// Get a single Bounces item by primary key
	public abstract IDataReader GetBounces(string eMail);
    
	// Get a all Bounces items
	public abstract IDataReader ListBounces();
    
	// Insert a single Bounces item
	public abstract void AddBounces(int portalId);
    
	// Update a single Bounces item by primary key
	public abstract void UpdateBounces(string eMail, int portalId);
    
	// Delete a single Bounces item by primary key
	public abstract void DeleteBounces(string eMail);
    
	//public abstract IDataReader GetPageBounces(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
#endregion
#region ContactTypes Abstract Methods
	// Get a single ContactTypes item by primary key
	public abstract IDataReader GetContactTypes(int contactType);
    
	// Get a all ContactTypes items
	public abstract IDataReader ListContactTypes();
    
	// Insert a single ContactTypes item
	public abstract void AddContactTypes(int portalId, string abbreviation, string description, bool defaultType);
    
	// Update a single ContactTypes item by primary key
	public abstract void UpdateContactTypes(int contactType, int portalId, string abbreviation, string description, bool defaultType);
    
	// Delete a single ContactTypes item by primary key
	public abstract void DeleteContactTypes(int contactType);
    
	//public abstract IDataReader GetPageContactTypes(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
#endregion
#region Divisions Abstract Methods
	// Get a single Divisions item by primary key
	public abstract IDataReader GetDivisions(string division);
    
	// Get a all Divisions items
	public abstract IDataReader ListDivisions();
    
	// Insert a single Divisions item
	public abstract void AddDivisions(int portalId, string description, int priority, bool overall, bool masters);
    
	// Update a single Divisions item by primary key
	public abstract void UpdateDivisions(string division, int portalId, string description, int priority, bool overall, bool masters);
    
	// Delete a single Divisions item by primary key
	public abstract void DeleteDivisions(string division);
    
	//public abstract IDataReader GetPageDivisions(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
#endregion
#region DoNotEmail Abstract Methods
	// Get a single DoNotEmail item by primary key
	public abstract IDataReader GetDoNotEmail(string emailAddress);
    
	// Get a all DoNotEmail items
	public abstract IDataReader ListDoNotEmail();
    
	// Insert a single DoNotEmail item
	public abstract void AddDoNotEmail(int portalId, string movedBy, string optOutReason);
    
	// Update a single DoNotEmail item by primary key
	public abstract void UpdateDoNotEmail(string emailAddress, int portalId, string movedBy, string optOutReason);
    
	// Delete a single DoNotEmail item by primary key
	public abstract void DeleteDoNotEmail(string emailAddress);
    
	//public abstract IDataReader GetPageDoNotEmail(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
#endregion
#region Entrants Abstract Methods
	// Get a single Entrants item by primary key
	public abstract IDataReader GetEntrants(int runnerId);
    
	// Get a all Entrants items
	public abstract IDataReader ListEntrants();
    
	// Get all Entrants by foreign key
	public abstract IDataReader GetEntrantsByContactTypes(int contactType);
	// Get all Entrants by foreign key
	public abstract IDataReader GetEntrantsByEntrants(int runnerId);
	// Insert a single Entrants item
	public abstract void AddEntrants(int portalId, int contactType, string fullName, string firstName, string middleName, string lastName, string suffix, string nickname, DateTime birthDate, short age, short weight, string sex, string tShirt, string sweats, string shorts, string shoes, string shoeStyle, string club, string address, string city, string state, string zIP, string country, string homePhone, string mobilePhone, string mobileCarrier, string eMail, bool plainText, string uSATFNumber, string memberType, int memberNumber, string memberCode, DateTime dateJoined, DateTime lastRenewal, DateTime paidThru, bool waiver, int primaryNo, bool survivor, DateTime mailingExpiration, string memo, bool marked, string keywords, string company, string title, string workAddress, string workCity, string workState, string workZip, string workCountry, string workPhone, string workEmail, int activeId, bool invalidEmail, bool resultsEmailOnly, bool invalidAddress, string userName, string password, DateTime insertionDate, DateTime updateDate);
    
	// Update a single Entrants item by primary key
	public abstract void UpdateEntrants(int runnerId, int portalId, int contactType, string fullName, string firstName, string middleName, string lastName, string suffix, string nickname, DateTime birthDate, short age, short weight, string sex, string tShirt, string sweats, string shorts, string shoes, string shoeStyle, string club, string address, string city, string state, string zIP, string country, string homePhone, string mobilePhone, string mobileCarrier, string eMail, bool plainText, string uSATFNumber, string memberType, int memberNumber, string memberCode, DateTime dateJoined, DateTime lastRenewal, DateTime paidThru, bool waiver, int primaryNo, bool survivor, DateTime mailingExpiration, string memo, bool marked, string keywords, string company, string title, string workAddress, string workCity, string workState, string workZip, string workCountry, string workPhone, string workEmail, int activeId, bool invalidEmail, bool resultsEmailOnly, bool invalidAddress, string userName, string password, DateTime insertionDate, DateTime updateDate);
    
	// Delete a single Entrants item by primary key
	public abstract void DeleteEntrants(int runnerId);
    
	//public abstract IDataReader GetPageEntrants(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
#endregion
#region Events Abstract Methods
	// Get a single Events item by primary key
	public abstract IDataReader GetEvents(int runnerId, int raceId);
    
	// Get a all Events items
	public abstract IDataReader ListEvents();
    
	// Get all Events by foreign key
	public abstract IDataReader GetEventsByEntrants(int runnerId);
	// Get all Events by foreign key
	public abstract IDataReader GetEventsByRaces(int raceId);
	// Insert a single Events item
	public abstract void AddEvents(int portalId, int bibNumber, string division, short divisionPlace, short divisionTotal, int sexPlace, int sexTotal, DateTime gunTime, DateTime netTime, DateTime pace, int place, DateTime seed, string team, decimal fee, DateTime entryDate, bool clydesdale, bool survivor, bool nonCompetitive, bool uSATF, short age, string sex, short weight, short heat, DateTime waveOffset, DateTime wAVATime, float performancePercent, short seriesPlace, short seriesAge, string seriesDivision, short seriesPoints, bool confirmation, bool results, string chipId, string awardDivision, short awardPlace, short awardPriority);
    
	// Update a single Events item by primary key
	public abstract void UpdateEvents(int runnerId, int raceId, int portalId, int bibNumber, string division, short divisionPlace, short divisionTotal, int sexPlace, int sexTotal, DateTime gunTime, DateTime netTime, DateTime pace, int place, DateTime seed, string team, decimal fee, DateTime entryDate, bool clydesdale, bool survivor, bool nonCompetitive, bool uSATF, short age, string sex, short weight, short heat, DateTime waveOffset, DateTime wAVATime, float performancePercent, short seriesPlace, short seriesAge, string seriesDivision, short seriesPoints, bool confirmation, bool results, string chipId, string awardDivision, short awardPlace, short awardPriority);
    
	// Delete a single Events item by primary key
	public abstract void DeleteEvents(int runnerId, int raceId);
    
	//public abstract IDataReader GetPageEvents(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
#endregion
#region EventTypes Abstract Methods
	// Get a single EventTypes item by primary key
	public abstract IDataReader GetEventTypes(int eventTypeId);
    
	// Get a all EventTypes items
	public abstract IDataReader ListEventTypes();
    
	// Insert a single EventTypes item
	public abstract void AddEventTypes(int portalId, string eventTypeName, short defaultType);
    
	// Update a single EventTypes item by primary key
	public abstract void UpdateEventTypes(int eventTypeId, int portalId, string eventTypeName, short defaultType);
    
	// Delete a single EventTypes item by primary key
	public abstract void DeleteEventTypes(int eventTypeId);
    
	//public abstract IDataReader GetPageEventTypes(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
#endregion
#region MemberTypes Abstract Methods
	// Get a single MemberTypes item by primary key
	public abstract IDataReader GetMemberTypes(int memberTypeID);
    
	// Get a all MemberTypes items
	public abstract IDataReader ListMemberTypes();
    
	// Insert a single MemberTypes item
	public abstract void AddMemberTypes(int portalId, string memberType, decimal memberDues);
    
	// Update a single MemberTypes item by primary key
	public abstract void UpdateMemberTypes(int memberTypeID, int portalId, string memberType, decimal memberDues);
    
	// Delete a single MemberTypes item by primary key
	public abstract void DeleteMemberTypes(int memberTypeID);
    
	//public abstract IDataReader GetPageMemberTypes(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
#endregion
#region Organization Abstract Methods
	// Get a single Organization item by primary key
	public abstract IDataReader GetOrganization(int orgID);
    
	// Get a all Organization items
	public abstract IDataReader ListOrganization();
    
	// Insert a single Organization item
	public abstract void AddOrganization(int portalId, string clubName, string address, string city, string stateOrProvince, string postalCode, string country, string defaultInvoiceDescription, string phoneNumber, string faxNumber, string eMail, string nickname, short mailingExpirePeriod, DateTime lastEmail, DateTime lastLetters);
    
	// Update a single Organization item by primary key
	public abstract void UpdateOrganization(int orgID, int portalId, string clubName, string address, string city, string stateOrProvince, string postalCode, string country, string defaultInvoiceDescription, string phoneNumber, string faxNumber, string eMail, string nickname, short mailingExpirePeriod, DateTime lastEmail, DateTime lastLetters);
    
	// Delete a single Organization item by primary key
	public abstract void DeleteOrganization(int orgID);
    
	//public abstract IDataReader GetPageOrganization(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
#endregion
#region RaceDivisions Abstract Methods
	// Get a single RaceDivisions item by primary key
	public abstract IDataReader GetRaceDivisions(int raceId, int priority);
    
	// Get a all RaceDivisions items
	public abstract IDataReader ListRaceDivisions();
    
	// Get all RaceDivisions by foreign key
	public abstract IDataReader GetRaceDivisionsByRaces(int raceId);
	// Insert a single RaceDivisions item
	public abstract void AddRaceDivisions(int portalId, string sex, short startAge, int endAge, int startWeight, int endWeight, bool survivor, string division, short depth, bool overall, bool masters, bool uSATF);
    
	// Update a single RaceDivisions item by primary key
	public abstract void UpdateRaceDivisions(int raceId, int priority, int portalId, string sex, short startAge, int endAge, int startWeight, int endWeight, bool survivor, string division, short depth, bool overall, bool masters, bool uSATF);
    
	// Delete a single RaceDivisions item by primary key
	public abstract void DeleteRaceDivisions(int raceId, int priority);
    
	//public abstract IDataReader GetPageRaceDivisions(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
#endregion
#region Races Abstract Methods
	// Get a single Races item by primary key
	public abstract IDataReader GetRaces(int raceId);
    
	// Get a all Races items
	public abstract IDataReader ListRaces();
    
	// Get all Races by foreign key
	public abstract IDataReader GetRacesByEventTypes(int eventTypeId);
	// Insert a single Races item
	public abstract void AddRaces(int portalId, int eventType, string raceName, DateTime raceDate, float raceDistance, string raceLocation, string raceCity, string raceState, string raceCountry, string raceLogo, string uSATFNumber, int rodaleEventId, int activeEventId, DateTime preregistrationDate, decimal preregistrationFee, decimal raceDayFee, string registrationURL, string registrationLogo, string description, string emailText, string resultsText, string resultsURL, short annual, string keyword, double lastBibNumber, string contactName, string contactAddress1, string contactAddress2, string contactCity, string contactState, string contactZIP, string contactPhoneNumber, string contactFAX, string contactEMail, string wEBSite, int relatedRace, int organization, string volunteerContact, string volunteerPhone, string volunteerEmail, DateTime displayStartDate, DateTime displayEndDate, DateTime insertionDate, DateTime modificationDate);
    
	// Update a single Races item by primary key
	public abstract void UpdateRaces(int raceId, int portalId, int eventType, string raceName, DateTime raceDate, float raceDistance, string raceLocation, string raceCity, string raceState, string raceCountry, string raceLogo, string uSATFNumber, int rodaleEventId, int activeEventId, DateTime preregistrationDate, decimal preregistrationFee, decimal raceDayFee, string registrationURL, string registrationLogo, string description, string emailText, string resultsText, string resultsURL, short annual, string keyword, double lastBibNumber, string contactName, string contactAddress1, string contactAddress2, string contactCity, string contactState, string contactZIP, string contactPhoneNumber, string contactFAX, string contactEMail, string wEBSite, int relatedRace, int organization, string volunteerContact, string volunteerPhone, string volunteerEmail, DateTime displayStartDate, DateTime displayEndDate, DateTime insertionDate, DateTime modificationDate);
    
	// Delete a single Races item by primary key
	public abstract void DeleteRaces(int raceId);
    
	//public abstract IDataReader GetPageRaces(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
#endregion
#region ZIP Abstract Methods
	// Get a single ZIP item by primary key
	public abstract IDataReader GetZIP(string fiveDigitZIP, short sequence);
    
	// Get a all ZIP items
	public abstract IDataReader ListZIP();
    
	// Insert a single ZIP item
	public abstract void AddZIP(int portalId, string city, string state, string county, string country);
    
	// Update a single ZIP item by primary key
	public abstract void UpdateZIP(string fiveDigitZIP, short sequence, int portalId, string city, string state, string county, string country);
    
	// Delete a single ZIP item by primary key
	public abstract void DeleteZIP(string fiveDigitZIP, short sequence);
    
	//public abstract IDataReader GetPageZIP(string sortCol, int requiredPage, int recordsPerPage, out int totalRows);
#endregion
	}
}
