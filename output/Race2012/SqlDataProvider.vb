Option Explicit On
'''
''' Copyright (c) 2014 Crewstone Consulting ltd
'''  All rights reserved.
''' 
''' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
''' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
''' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
''' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
''' DEALINGS IN THE SOFTWARE.
''' 
'''
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Microsoft.ApplicationBlocks.Data
Imports DotNetNuke

Namespace Namespace.Modules.Race2012

    ''' -----------------------------------------------------------------------------
    ''' <summary>
    ''' SQL Server implementation of the abstract DataProvider class
    ''' </summary>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
 	''' Generated by CodeSmith on Friday, January 17, 2014
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Class SqlDataProvider

        Inherits DataProvider

#Region "Private Members"

        Private Const ProviderType As String = "data"
        Private Const ModuleQualifier As String = ""

        Private _providerConfiguration As Framework.Providers.ProviderConfiguration = Framework.Providers.ProviderConfiguration.GetProviderConfiguration(ProviderType)
        Private _connectionString As String
        Private _providerPath As String
        Private _objectQualifier As String
        Private _databaseOwner As String

#End Region

#Region "Constructors"

        Public Sub New()

            ' Read the configuration specific information for this provider
            Dim objProvider As Framework.Providers.Provider = CType(_providerConfiguration.Providers(_providerConfiguration.DefaultProvider), Framework.Providers.Provider)

            ' Read the attributes for this provider
            If (Not objProvider.Attributes("connectionStringName") Is Nothing) AndAlso (Not objProvider.Attributes("connectionStringName").Equals(String.Empty)) AndAlso (Not ConfigurationManager.ConnectionStrings(objProvider.Attributes("connectionStringName")).ConnectionString.Equals(String.Empty)) Then
                _connectionString = ConfigurationManager.ConnectionStrings(objProvider.Attributes("connectionStringName")).ConnectionString
            Else
                _connectionString = objProvider.Attributes("connectionString")
            End If

            _providerPath = objProvider.Attributes("providerPath")

            _objectQualifier = objProvider.Attributes("objectQualifier")
            If _objectQualifier <> "" And _objectQualifier.EndsWith("_") = False Then
                _objectQualifier += "_"
            End If

            _databaseOwner = objProvider.Attributes("databaseOwner")
            If _databaseOwner <> "" And _databaseOwner.EndsWith(".") = False Then
                _databaseOwner += "."
            End If

        End Sub

#End Region

#Region "Properties"

        Public ReadOnly Property ConnectionString() As String
            Get
                Return _connectionString
            End Get
        End Property

        Public ReadOnly Property ProviderPath() As String
            Get
                Return _providerPath
            End Get
        End Property

        Public ReadOnly Property ObjectQualifier() As String
            Get
                Return _objectQualifier
            End Get
        End Property

        Public ReadOnly Property DatabaseOwner() As String
            Get
                Return _databaseOwner
            End Get
        End Property

#End Region

#Region "Private Methods"

        Private Function GetFullyQualifiedName(ByVal name As String) As String
            Return DatabaseOwner & ObjectQualifier & ModuleQualifier & name
        End Function

        Private Function GetNull(ByVal Field As Object) As Object
            Return DotNetNuke.Common.Utilities.Null.GetNull(Field, DBNull.Value)
        End Function

#End Region

#Region "Public Methods"


        Public Overrides Function GetBounces(ByVal eMail As String) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblBouncesGet"), eMail), IDataReader)
        End Function

        Public Overrides Function ListBouncess(ByVal portalId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblBouncesList"), portalId), IDataReader)
        End Function

        Public Overrides Function AddBounces(ByVal portalId As Integer) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("tblBouncesAdd"), GetNull(portalId)), Integer)
        End Function

        Public Overrides Sub UpdateBounces(ByVal eMail As String, ByVal portalId As Integer)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblBouncesUpdate"), eMail, GetNull(portalId))
        End Sub

        Public Overrides Sub DeleteBounces(ByVal eMail As String)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblBouncesDelete"), eMail)
        End Sub
		

        Public Overrides Function GetContactTypes(ByVal contactType As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblContactTypesGet"), contactType), IDataReader)
        End Function

        Public Overrides Function ListContactTypess(ByVal portalId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblContactTypesList"), portalId), IDataReader)
        End Function

        Public Overrides Function AddContactTypes(ByVal portalId As Integer, ByVal abbreviation As String, ByVal description As String, ByVal defaultType As Boolean) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("tblContactTypesAdd"), GetNull(portalId), GetNull(abbreviation), GetNull(description), GetNull(defaultType)), Integer)
        End Function

        Public Overrides Sub UpdateContactTypes(ByVal contactType As Integer, ByVal portalId As Integer, ByVal abbreviation As String, ByVal description As String, ByVal defaultType As Boolean)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblContactTypesUpdate"), contactType, GetNull(portalId), GetNull(abbreviation), GetNull(description), GetNull(defaultType))
        End Sub

        Public Overrides Sub DeleteContactTypes(ByVal contactType As Integer)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblContactTypesDelete"), contactType)
        End Sub
		

        Public Overrides Function GetDivisions(ByVal division As String) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblDivisionsGet"), division), IDataReader)
        End Function

        Public Overrides Function ListDivisionss(ByVal portalId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblDivisionsList"), portalId), IDataReader)
        End Function

        Public Overrides Function AddDivisions(ByVal portalId As Integer, ByVal description As String, ByVal priority As Integer, ByVal overall As Boolean, ByVal masters As Boolean) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("tblDivisionsAdd"), GetNull(portalId), GetNull(description), GetNull(priority), GetNull(overall), GetNull(masters)), Integer)
        End Function

        Public Overrides Sub UpdateDivisions(ByVal division As String, ByVal portalId As Integer, ByVal description As String, ByVal priority As Integer, ByVal overall As Boolean, ByVal masters As Boolean)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblDivisionsUpdate"), division, GetNull(portalId), GetNull(description), GetNull(priority), GetNull(overall), GetNull(masters))
        End Sub

        Public Overrides Sub DeleteDivisions(ByVal division As String)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblDivisionsDelete"), division)
        End Sub
		

        Public Overrides Function GetDoNotEmail(ByVal emailAddress As String) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblDoNotEmailGet"), emailAddress), IDataReader)
        End Function

        Public Overrides Function ListDoNotEmails(ByVal portalId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblDoNotEmailList"), portalId), IDataReader)
        End Function

        Public Overrides Function AddDoNotEmail(ByVal portalId As Integer, ByVal movedBy As String, ByVal optOutReason As String) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("tblDoNotEmailAdd"), GetNull(portalId), GetNull(movedBy), GetNull(optOutReason)), Integer)
        End Function

        Public Overrides Sub UpdateDoNotEmail(ByVal emailAddress As String, ByVal portalId As Integer, ByVal movedBy As String, ByVal optOutReason As String)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblDoNotEmailUpdate"), emailAddress, GetNull(portalId), GetNull(movedBy), GetNull(optOutReason))
        End Sub

        Public Overrides Sub DeleteDoNotEmail(ByVal emailAddress As String)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblDoNotEmailDelete"), emailAddress)
        End Sub
		

        Public Overrides Function GetEntrants(ByVal runnerId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblEntrantsGet"), runnerId), IDataReader)
        End Function

        Public Overrides Function ListEntrantss(ByVal portalId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblEntrantsList"), portalId), IDataReader)
        End Function

        Public Overrides Function AddEntrants(ByVal portalId As Integer, ByVal contactType As Integer, ByVal fullName As String, ByVal firstName As String, ByVal middleName As String, ByVal lastName As String, ByVal suffix As String, ByVal nickname As String, ByVal birthDate As DateTime, ByVal age As short, ByVal weight As short, ByVal sex As String, ByVal tShirt As String, ByVal sweats As String, ByVal shorts As String, ByVal shoes As String, ByVal shoeStyle As String, ByVal club As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zIP As String, ByVal country As String, ByVal homePhone As String, ByVal mobilePhone As String, ByVal mobileCarrier As String, ByVal eMail As String, ByVal plainText As Boolean, ByVal uSATFNumber As String, ByVal memberType As String, ByVal memberNumber As Integer, ByVal memberCode As String, ByVal dateJoined As DateTime, ByVal lastRenewal As DateTime, ByVal paidThru As DateTime, ByVal waiver As Boolean, ByVal primaryNo As Integer, ByVal survivor As Boolean, ByVal mailingExpiration As DateTime, ByVal memo As String, ByVal marked As Boolean, ByVal keywords As String, ByVal company As String, ByVal title As String, ByVal workAddress As String, ByVal workCity As String, ByVal workState As String, ByVal workZip As String, ByVal workCountry As String, ByVal workPhone As String, ByVal workEmail As String, ByVal activeId As Integer, ByVal invalidEmail As Boolean, ByVal resultsEmailOnly As Boolean, ByVal invalidAddress As Boolean, ByVal userName As String, ByVal password As String, ByVal insertionDate As DateTime, ByVal updateDate As DateTime) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("tblEntrantsAdd"), GetNull(portalId), GetNull(contactType), GetNull(fullName), GetNull(firstName), GetNull(middleName), GetNull(lastName), GetNull(suffix), GetNull(nickname), GetNull(birthDate), GetNull(age), GetNull(weight), GetNull(sex), GetNull(tShirt), GetNull(sweats), GetNull(shorts), GetNull(shoes), GetNull(shoeStyle), GetNull(club), GetNull(address), GetNull(city), GetNull(state), GetNull(zIP), GetNull(country), GetNull(homePhone), GetNull(mobilePhone), GetNull(mobileCarrier), GetNull(eMail), GetNull(plainText), GetNull(uSATFNumber), GetNull(memberType), GetNull(memberNumber), GetNull(memberCode), GetNull(dateJoined), GetNull(lastRenewal), GetNull(paidThru), GetNull(waiver), GetNull(primaryNo), GetNull(survivor), GetNull(mailingExpiration), GetNull(memo), GetNull(marked), GetNull(keywords), GetNull(company), GetNull(title), GetNull(workAddress), GetNull(workCity), GetNull(workState), GetNull(workZip), GetNull(workCountry), GetNull(workPhone), GetNull(workEmail), GetNull(activeId), GetNull(invalidEmail), GetNull(resultsEmailOnly), GetNull(invalidAddress), GetNull(userName), GetNull(password), GetNull(insertionDate), GetNull(updateDate)), Integer)
        End Function

        Public Overrides Sub UpdateEntrants(ByVal runnerId As Integer, ByVal portalId As Integer, ByVal contactType As Integer, ByVal fullName As String, ByVal firstName As String, ByVal middleName As String, ByVal lastName As String, ByVal suffix As String, ByVal nickname As String, ByVal birthDate As DateTime, ByVal age As short, ByVal weight As short, ByVal sex As String, ByVal tShirt As String, ByVal sweats As String, ByVal shorts As String, ByVal shoes As String, ByVal shoeStyle As String, ByVal club As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zIP As String, ByVal country As String, ByVal homePhone As String, ByVal mobilePhone As String, ByVal mobileCarrier As String, ByVal eMail As String, ByVal plainText As Boolean, ByVal uSATFNumber As String, ByVal memberType As String, ByVal memberNumber As Integer, ByVal memberCode As String, ByVal dateJoined As DateTime, ByVal lastRenewal As DateTime, ByVal paidThru As DateTime, ByVal waiver As Boolean, ByVal primaryNo As Integer, ByVal survivor As Boolean, ByVal mailingExpiration As DateTime, ByVal memo As String, ByVal marked As Boolean, ByVal keywords As String, ByVal company As String, ByVal title As String, ByVal workAddress As String, ByVal workCity As String, ByVal workState As String, ByVal workZip As String, ByVal workCountry As String, ByVal workPhone As String, ByVal workEmail As String, ByVal activeId As Integer, ByVal invalidEmail As Boolean, ByVal resultsEmailOnly As Boolean, ByVal invalidAddress As Boolean, ByVal userName As String, ByVal password As String, ByVal insertionDate As DateTime, ByVal updateDate As DateTime)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblEntrantsUpdate"), runnerId, GetNull(portalId), GetNull(contactType), GetNull(fullName), GetNull(firstName), GetNull(middleName), GetNull(lastName), GetNull(suffix), GetNull(nickname), GetNull(birthDate), GetNull(age), GetNull(weight), GetNull(sex), GetNull(tShirt), GetNull(sweats), GetNull(shorts), GetNull(shoes), GetNull(shoeStyle), GetNull(club), GetNull(address), GetNull(city), GetNull(state), GetNull(zIP), GetNull(country), GetNull(homePhone), GetNull(mobilePhone), GetNull(mobileCarrier), GetNull(eMail), GetNull(plainText), GetNull(uSATFNumber), GetNull(memberType), GetNull(memberNumber), GetNull(memberCode), GetNull(dateJoined), GetNull(lastRenewal), GetNull(paidThru), GetNull(waiver), GetNull(primaryNo), GetNull(survivor), GetNull(mailingExpiration), GetNull(memo), GetNull(marked), GetNull(keywords), GetNull(company), GetNull(title), GetNull(workAddress), GetNull(workCity), GetNull(workState), GetNull(workZip), GetNull(workCountry), GetNull(workPhone), GetNull(workEmail), GetNull(activeId), GetNull(invalidEmail), GetNull(resultsEmailOnly), GetNull(invalidAddress), GetNull(userName), GetNull(password), GetNull(insertionDate), GetNull(updateDate))
        End Sub

        Public Overrides Sub DeleteEntrants(ByVal runnerId As Integer)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblEntrantsDelete"), runnerId)
        End Sub
		
	  Public Overrides Function GetEntrantssByContactType(ByVal contactType As Integer) As IDataReader
		Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblEntrantsGetByContactTypes"), contactType), IDataReader)
	End Function 
		
	  Public Overrides Function GetEntrantssByPrimaryNo(ByVal runnerId As Integer) As IDataReader
		Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblEntrantsGetByEntrants"), runnerId), IDataReader)
	End Function 
		

        Public Overrides Function GetEvents(ByVal runnerId As Integer, ByVal raceId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblEventsGet"), runnerId, raceId), IDataReader)
        End Function

        Public Overrides Function ListEventss(ByVal portalId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblEventsList"), portalId), IDataReader)
        End Function

        Public Overrides Function AddEvents(ByVal portalId As Integer, ByVal bibNumber As Integer, ByVal division As String, ByVal divisionPlace As short, ByVal divisionTotal As short, ByVal sexPlace As Integer, ByVal sexTotal As Integer, ByVal gunTime As DateTime, ByVal netTime As DateTime, ByVal pace As DateTime, ByVal place As Integer, ByVal seed As DateTime, ByVal team As String, ByVal fee As decimal, ByVal entryDate As DateTime, ByVal clydesdale As Boolean, ByVal survivor As Boolean, ByVal nonCompetitive As Boolean, ByVal uSATF As Boolean, ByVal age As short, ByVal sex As String, ByVal weight As short, ByVal heat As short, ByVal waveOffset As DateTime, ByVal wAVATime As DateTime, ByVal performancePercent As Single, ByVal seriesPlace As short, ByVal seriesAge As short, ByVal seriesDivision As String, ByVal seriesPoints As short, ByVal confirmation As Boolean, ByVal results As Boolean, ByVal chipId As String, ByVal awardDivision As String, ByVal awardPlace As short, ByVal awardPriority As short) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("tblEventsAdd"), GetNull(portalId), GetNull(bibNumber), GetNull(division), GetNull(divisionPlace), GetNull(divisionTotal), GetNull(sexPlace), GetNull(sexTotal), GetNull(gunTime), GetNull(netTime), GetNull(pace), GetNull(place), GetNull(seed), GetNull(team), GetNull(fee), GetNull(entryDate), GetNull(clydesdale), GetNull(survivor), GetNull(nonCompetitive), GetNull(uSATF), GetNull(age), GetNull(sex), GetNull(weight), GetNull(heat), GetNull(waveOffset), GetNull(wAVATime), GetNull(performancePercent), GetNull(seriesPlace), GetNull(seriesAge), GetNull(seriesDivision), GetNull(seriesPoints), GetNull(confirmation), GetNull(results), GetNull(chipId), GetNull(awardDivision), GetNull(awardPlace), GetNull(awardPriority)), Integer)
        End Function

        Public Overrides Sub UpdateEvents(ByVal runnerId As Integer, ByVal raceId As Integer, ByVal portalId As Integer, ByVal bibNumber As Integer, ByVal division As String, ByVal divisionPlace As short, ByVal divisionTotal As short, ByVal sexPlace As Integer, ByVal sexTotal As Integer, ByVal gunTime As DateTime, ByVal netTime As DateTime, ByVal pace As DateTime, ByVal place As Integer, ByVal seed As DateTime, ByVal team As String, ByVal fee As decimal, ByVal entryDate As DateTime, ByVal clydesdale As Boolean, ByVal survivor As Boolean, ByVal nonCompetitive As Boolean, ByVal uSATF As Boolean, ByVal age As short, ByVal sex As String, ByVal weight As short, ByVal heat As short, ByVal waveOffset As DateTime, ByVal wAVATime As DateTime, ByVal performancePercent As Single, ByVal seriesPlace As short, ByVal seriesAge As short, ByVal seriesDivision As String, ByVal seriesPoints As short, ByVal confirmation As Boolean, ByVal results As Boolean, ByVal chipId As String, ByVal awardDivision As String, ByVal awardPlace As short, ByVal awardPriority As short)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblEventsUpdate"), runnerId, raceId, GetNull(portalId), GetNull(bibNumber), GetNull(division), GetNull(divisionPlace), GetNull(divisionTotal), GetNull(sexPlace), GetNull(sexTotal), GetNull(gunTime), GetNull(netTime), GetNull(pace), GetNull(place), GetNull(seed), GetNull(team), GetNull(fee), GetNull(entryDate), GetNull(clydesdale), GetNull(survivor), GetNull(nonCompetitive), GetNull(uSATF), GetNull(age), GetNull(sex), GetNull(weight), GetNull(heat), GetNull(waveOffset), GetNull(wAVATime), GetNull(performancePercent), GetNull(seriesPlace), GetNull(seriesAge), GetNull(seriesDivision), GetNull(seriesPoints), GetNull(confirmation), GetNull(results), GetNull(chipId), GetNull(awardDivision), GetNull(awardPlace), GetNull(awardPriority))
        End Sub

        Public Overrides Sub DeleteEvents(ByVal runnerId As Integer, ByVal raceId As Integer)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblEventsDelete"), runnerId, raceId)
        End Sub
		
	  Public Overrides Function GetEventssByRunnerId(ByVal runnerId As Integer) As IDataReader
		Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblEventsGetByEntrants"), runnerId), IDataReader)
	End Function 
		
	  Public Overrides Function GetEventssByRaceId(ByVal raceId As Integer) As IDataReader
		Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblEventsGetByRaces"), raceId), IDataReader)
	End Function 
		

        Public Overrides Function GetEventTypes(ByVal eventTypeId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblEventTypesGet"), eventTypeId), IDataReader)
        End Function

        Public Overrides Function ListEventTypess(ByVal portalId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblEventTypesList"), portalId), IDataReader)
        End Function

        Public Overrides Function AddEventTypes(ByVal portalId As Integer, ByVal eventTypeName As String, ByVal defaultType As short) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("tblEventTypesAdd"), GetNull(portalId), GetNull(eventTypeName), GetNull(defaultType)), Integer)
        End Function

        Public Overrides Sub UpdateEventTypes(ByVal eventTypeId As Integer, ByVal portalId As Integer, ByVal eventTypeName As String, ByVal defaultType As short)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblEventTypesUpdate"), eventTypeId, GetNull(portalId), GetNull(eventTypeName), GetNull(defaultType))
        End Sub

        Public Overrides Sub DeleteEventTypes(ByVal eventTypeId As Integer)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblEventTypesDelete"), eventTypeId)
        End Sub
		

        Public Overrides Function GetMemberTypes(ByVal memberTypeID As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblMemberTypesGet"), memberTypeID), IDataReader)
        End Function

        Public Overrides Function ListMemberTypess(ByVal portalId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblMemberTypesList"), portalId), IDataReader)
        End Function

        Public Overrides Function AddMemberTypes(ByVal portalId As Integer, ByVal memberType As String, ByVal memberDues As decimal) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("tblMemberTypesAdd"), GetNull(portalId), memberType, GetNull(memberDues)), Integer)
        End Function

        Public Overrides Sub UpdateMemberTypes(ByVal memberTypeID As Integer, ByVal portalId As Integer, ByVal memberType As String, ByVal memberDues As decimal)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblMemberTypesUpdate"), memberTypeID, GetNull(portalId), memberType, GetNull(memberDues))
        End Sub

        Public Overrides Sub DeleteMemberTypes(ByVal memberTypeID As Integer)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblMemberTypesDelete"), memberTypeID)
        End Sub
		

        Public Overrides Function GetOrganization(ByVal orgID As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblOrganizationGet"), orgID), IDataReader)
        End Function

        Public Overrides Function ListOrganizations(ByVal portalId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblOrganizationList"), portalId), IDataReader)
        End Function

        Public Overrides Function AddOrganization(ByVal portalId As Integer, ByVal clubName As String, ByVal address As String, ByVal city As String, ByVal stateOrProvince As String, ByVal postalCode As String, ByVal country As String, ByVal defaultInvoiceDescription As String, ByVal phoneNumber As String, ByVal faxNumber As String, ByVal eMail As String, ByVal nickname As String, ByVal mailingExpirePeriod As short, ByVal lastEmail As DateTime, ByVal lastLetters As DateTime) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("tblOrganizationAdd"), GetNull(portalId), GetNull(clubName), GetNull(address), GetNull(city), GetNull(stateOrProvince), GetNull(postalCode), GetNull(country), GetNull(defaultInvoiceDescription), GetNull(phoneNumber), GetNull(faxNumber), GetNull(eMail), GetNull(nickname), GetNull(mailingExpirePeriod), GetNull(lastEmail), GetNull(lastLetters)), Integer)
        End Function

        Public Overrides Sub UpdateOrganization(ByVal orgID As Integer, ByVal portalId As Integer, ByVal clubName As String, ByVal address As String, ByVal city As String, ByVal stateOrProvince As String, ByVal postalCode As String, ByVal country As String, ByVal defaultInvoiceDescription As String, ByVal phoneNumber As String, ByVal faxNumber As String, ByVal eMail As String, ByVal nickname As String, ByVal mailingExpirePeriod As short, ByVal lastEmail As DateTime, ByVal lastLetters As DateTime)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblOrganizationUpdate"), orgID, GetNull(portalId), GetNull(clubName), GetNull(address), GetNull(city), GetNull(stateOrProvince), GetNull(postalCode), GetNull(country), GetNull(defaultInvoiceDescription), GetNull(phoneNumber), GetNull(faxNumber), GetNull(eMail), GetNull(nickname), GetNull(mailingExpirePeriod), GetNull(lastEmail), GetNull(lastLetters))
        End Sub

        Public Overrides Sub DeleteOrganization(ByVal orgID As Integer)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblOrganizationDelete"), orgID)
        End Sub
		

        Public Overrides Function GetRaceDivisions(ByVal raceId As Integer, ByVal priority As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblRaceDivisionsGet"), raceId, priority), IDataReader)
        End Function

        Public Overrides Function ListRaceDivisionss(ByVal portalId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblRaceDivisionsList"), portalId), IDataReader)
        End Function

        Public Overrides Function AddRaceDivisions(ByVal portalId As Integer, ByVal sex As String, ByVal startAge As short, ByVal endAge As Integer, ByVal startWeight As Integer, ByVal endWeight As Integer, ByVal survivor As Boolean, ByVal division As String, ByVal depth As short, ByVal overall As Boolean, ByVal masters As Boolean, ByVal uSATF As Boolean) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("tblRaceDivisionsAdd"), GetNull(portalId), GetNull(sex), GetNull(startAge), GetNull(endAge), GetNull(startWeight), GetNull(endWeight), GetNull(survivor), GetNull(division), GetNull(depth), GetNull(overall), GetNull(masters), GetNull(uSATF)), Integer)
        End Function

        Public Overrides Sub UpdateRaceDivisions(ByVal raceId As Integer, ByVal priority As Integer, ByVal portalId As Integer, ByVal sex As String, ByVal startAge As short, ByVal endAge As Integer, ByVal startWeight As Integer, ByVal endWeight As Integer, ByVal survivor As Boolean, ByVal division As String, ByVal depth As short, ByVal overall As Boolean, ByVal masters As Boolean, ByVal uSATF As Boolean)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblRaceDivisionsUpdate"), raceId, priority, GetNull(portalId), GetNull(sex), GetNull(startAge), GetNull(endAge), GetNull(startWeight), GetNull(endWeight), GetNull(survivor), GetNull(division), GetNull(depth), GetNull(overall), GetNull(masters), GetNull(uSATF))
        End Sub

        Public Overrides Sub DeleteRaceDivisions(ByVal raceId As Integer, ByVal priority As Integer)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblRaceDivisionsDelete"), raceId, priority)
        End Sub
		
	  Public Overrides Function GetRaceDivisionssByRaceId(ByVal raceId As Integer) As IDataReader
		Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblRaceDivisionsGetByRaces"), raceId), IDataReader)
	End Function 
		

        Public Overrides Function GetRaces(ByVal raceId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblRacesGet"), raceId), IDataReader)
        End Function

        Public Overrides Function ListRacess(ByVal portalId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblRacesList"), portalId), IDataReader)
        End Function

        Public Overrides Function AddRaces(ByVal portalId As Integer, ByVal eventType As Integer, ByVal raceName As String, ByVal raceDate As DateTime, ByVal raceDistance As Single, ByVal raceLocation As String, ByVal raceCity As String, ByVal raceState As String, ByVal raceCountry As String, ByVal raceLogo As String, ByVal uSATFNumber As String, ByVal rodaleEventId As Integer, ByVal activeEventId As Integer, ByVal preregistrationDate As DateTime, ByVal preregistrationFee As decimal, ByVal raceDayFee As decimal, ByVal registrationURL As String, ByVal registrationLogo As String, ByVal description As String, ByVal emailText As String, ByVal resultsText As String, ByVal resultsURL As String, ByVal annual As short, ByVal keyword As String, ByVal lastBibNumber As double, ByVal contactName As String, ByVal contactAddress1 As String, ByVal contactAddress2 As String, ByVal contactCity As String, ByVal contactState As String, ByVal contactZIP As String, ByVal contactPhoneNumber As String, ByVal contactFAX As String, ByVal contactEMail As String, ByVal wEBSite As String, ByVal relatedRace As Integer, ByVal organization As Integer, ByVal volunteerContact As String, ByVal volunteerPhone As String, ByVal volunteerEmail As String, ByVal displayStartDate As DateTime, ByVal displayEndDate As DateTime, ByVal insertionDate As DateTime, ByVal modificationDate As DateTime) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("tblRacesAdd"), GetNull(portalId), GetNull(eventType), GetNull(raceName), GetNull(raceDate), GetNull(raceDistance), GetNull(raceLocation), GetNull(raceCity), GetNull(raceState), GetNull(raceCountry), GetNull(raceLogo), GetNull(uSATFNumber), GetNull(rodaleEventId), GetNull(activeEventId), GetNull(preregistrationDate), GetNull(preregistrationFee), GetNull(raceDayFee), GetNull(registrationURL), GetNull(registrationLogo), GetNull(description), GetNull(emailText), GetNull(resultsText), GetNull(resultsURL), GetNull(annual), GetNull(keyword), GetNull(lastBibNumber), GetNull(contactName), GetNull(contactAddress1), GetNull(contactAddress2), GetNull(contactCity), GetNull(contactState), GetNull(contactZIP), GetNull(contactPhoneNumber), GetNull(contactFAX), GetNull(contactEMail), GetNull(wEBSite), GetNull(relatedRace), GetNull(organization), GetNull(volunteerContact), GetNull(volunteerPhone), GetNull(volunteerEmail), GetNull(displayStartDate), GetNull(displayEndDate), GetNull(insertionDate), GetNull(modificationDate)), Integer)
        End Function

        Public Overrides Sub UpdateRaces(ByVal raceId As Integer, ByVal portalId As Integer, ByVal eventType As Integer, ByVal raceName As String, ByVal raceDate As DateTime, ByVal raceDistance As Single, ByVal raceLocation As String, ByVal raceCity As String, ByVal raceState As String, ByVal raceCountry As String, ByVal raceLogo As String, ByVal uSATFNumber As String, ByVal rodaleEventId As Integer, ByVal activeEventId As Integer, ByVal preregistrationDate As DateTime, ByVal preregistrationFee As decimal, ByVal raceDayFee As decimal, ByVal registrationURL As String, ByVal registrationLogo As String, ByVal description As String, ByVal emailText As String, ByVal resultsText As String, ByVal resultsURL As String, ByVal annual As short, ByVal keyword As String, ByVal lastBibNumber As double, ByVal contactName As String, ByVal contactAddress1 As String, ByVal contactAddress2 As String, ByVal contactCity As String, ByVal contactState As String, ByVal contactZIP As String, ByVal contactPhoneNumber As String, ByVal contactFAX As String, ByVal contactEMail As String, ByVal wEBSite As String, ByVal relatedRace As Integer, ByVal organization As Integer, ByVal volunteerContact As String, ByVal volunteerPhone As String, ByVal volunteerEmail As String, ByVal displayStartDate As DateTime, ByVal displayEndDate As DateTime, ByVal insertionDate As DateTime, ByVal modificationDate As DateTime)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblRacesUpdate"), raceId, GetNull(portalId), GetNull(eventType), GetNull(raceName), GetNull(raceDate), GetNull(raceDistance), GetNull(raceLocation), GetNull(raceCity), GetNull(raceState), GetNull(raceCountry), GetNull(raceLogo), GetNull(uSATFNumber), GetNull(rodaleEventId), GetNull(activeEventId), GetNull(preregistrationDate), GetNull(preregistrationFee), GetNull(raceDayFee), GetNull(registrationURL), GetNull(registrationLogo), GetNull(description), GetNull(emailText), GetNull(resultsText), GetNull(resultsURL), GetNull(annual), GetNull(keyword), GetNull(lastBibNumber), GetNull(contactName), GetNull(contactAddress1), GetNull(contactAddress2), GetNull(contactCity), GetNull(contactState), GetNull(contactZIP), GetNull(contactPhoneNumber), GetNull(contactFAX), GetNull(contactEMail), GetNull(wEBSite), GetNull(relatedRace), GetNull(organization), GetNull(volunteerContact), GetNull(volunteerPhone), GetNull(volunteerEmail), GetNull(displayStartDate), GetNull(displayEndDate), GetNull(insertionDate), GetNull(modificationDate))
        End Sub

        Public Overrides Sub DeleteRaces(ByVal raceId As Integer)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblRacesDelete"), raceId)
        End Sub
		
	  Public Overrides Function GetRacessByEventType(ByVal eventTypeId As Integer) As IDataReader
		Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblRacesGetByEventTypes"), eventTypeId), IDataReader)
	End Function 
		

        Public Overrides Function GetZIP(ByVal fiveDigitZIP As String, ByVal sequence As short) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblZIPGet"), fiveDigitZIP, sequence), IDataReader)
        End Function

        Public Overrides Function ListZIPs(ByVal portalId As Integer) As IDataReader
            Return CType(SqlHelper.ExecuteReader(ConnectionString, GetFullyQualifiedName("tblZIPList"), portalId), IDataReader)
        End Function

        Public Overrides Function AddZIP(ByVal portalId As Integer, ByVal city As String, ByVal state As String, ByVal county As String, ByVal country As String) As Integer
            Return CType(SqlHelper.ExecuteScalar(ConnectionString, GetFullyQualifiedName("tblZIPAdd"), GetNull(portalId), GetNull(city), GetNull(state), GetNull(county), GetNull(country)), Integer)
        End Function

        Public Overrides Sub UpdateZIP(ByVal fiveDigitZIP As String, ByVal sequence As short, ByVal portalId As Integer, ByVal city As String, ByVal state As String, ByVal county As String, ByVal country As String)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblZIPUpdate"), fiveDigitZIP, sequence, GetNull(portalId), GetNull(city), GetNull(state), GetNull(county), GetNull(country))
        End Sub

        Public Overrides Sub DeleteZIP(ByVal fiveDigitZIP As String, ByVal sequence As short)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("tblZIPDelete"), fiveDigitZIP, sequence)
        End Sub
		
        Public Overrides Sub PurgeRace2012(ByVal portalId As Integer)
            SqlHelper.ExecuteNonQuery(ConnectionString, GetFullyQualifiedName("Race2012Purge"), portalId)
        End Sub
#End Region

    End Class

End Namespace
